<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Voice of Dingding Ye</title>
  <subtitle>Share Fun, Life and Thoughts in Pragmatic.ly</subtitle>
  <id>http://yedingding.com</id>
  <link href="http://yedingding.com/"/>
  <link href="http://yedingding.com/feed.xml" rel="self"/>
  <updated>2013-09-10T18:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>实用 Git 工作流</title>
    <link rel="alternate" href="/2013/09/11/practical-git-flow-for-startups.html"/>
    <id>/2013/09/11/practical-git-flow-for-startups.html</id>
    <published>2013-09-10T18:00:00Z</published>
    <updated>2013-09-10T18:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 一文中，我们分享了我们团队做代码审核的一些经验心得，在微博上引起了热烈的讨论，引出了一些非常有意思的工作流介绍，比如下面的几点。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们有 master-dev 分支，比较大的功能才会新开 branch，小功能都是直接到 dev 上的，再加上团队在一起开发所以固定时间看昨日的代码，效果还不错。我们同样没有 QA，自己做的 ticket 也会找对方来做测试，但多是功能的完整性上的测试了。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/iamroody" target="_blank"&gt;@iarmroody&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们团队小，每个开发人员一个 git 分支，基本上工作不会互相打扰。我们的分支策略是，对于新功能，从主干开一个功能分支，然后每个开发在功能分支上开个人分支。合并时，先 BI（Backward Integration)，，再 FI（Forward Integration)。每周四定期合并，合并时 review。之所以放在周四，是因为如果合并出错，周五还有时间修复。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/u/2128792480" target="_blank"&gt;@施懿民&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个团队都在寻找最适合自己团队的工作方法，希望能提高工作效率和团队协作。我们也是，这也是为什么我们除了代码审查之外，还需要过程审查这类的执行过程。像上面提到的两种方式，肯定也是在各自团队推行中觉得效果不错的，但是个人觉得在过程上在效率上还是有改进空间的，具体理由看下面，可以对比我们的目标和相应方式。目前我们使用的这一套 Git 工作流，是我们这几年不断的过程演进而来，目前 4 个人做 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 在用，之前 10 个人做 Socialspring 也在用。个人觉得非常适合技术型创业团队。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 一文中，我们分享了我们团队做代码审核的一些经验心得，在微博上引起了热烈的讨论，引出了一些非常有意思的工作流介绍，比如下面的几点。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们有 master-dev 分支，比较大的功能才会新开 branch，小功能都是直接到 dev 上的，再加上团队在一起开发所以固定时间看昨日的代码，效果还不错。我们同样没有 QA，自己做的 ticket 也会找对方来做测试，但多是功能的完整性上的测试了。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/iamroody" target="_blank"&gt;@iarmroody&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们团队小，每个开发人员一个 git 分支，基本上工作不会互相打扰。我们的分支策略是，对于新功能，从主干开一个功能分支，然后每个开发在功能分支上开个人分支。合并时，先 BI（Backward Integration)，，再 FI（Forward Integration)。每周四定期合并，合并时 review。之所以放在周四，是因为如果合并出错，周五还有时间修复。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/u/2128792480" target="_blank"&gt;@施懿民&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个团队都在寻找最适合自己团队的工作方法，希望能提高工作效率和团队协作。我们也是，这也是为什么我们除了代码审查之外，还需要过程审查这类的执行过程。像上面提到的两种方式，肯定也是在各自团队推行中觉得效果不错的，但是个人觉得在过程上在效率上还是有改进空间的，具体理由看下面，可以对比我们的目标和相应方式。目前我们使用的这一套 Git 工作流，是我们这几年不断的过程演进而来，目前 4 个人做 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 在用，之前 10 个人做 Socialspring 也在用。个人觉得非常适合技术型创业团队。&lt;/p&gt;

&lt;p&gt;在选择代码级别的项目管理工作流程的时候，我们希望能达到这样的目标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能够持续交付&lt;/strong&gt;：我们没有固定的发布周期，而是一个更改通过审查就可以直接上线，这样我们才能很快地发布新的功能或者 bug 修复，也能快速地获得用户对修改的反馈。所以，有时一天里就会有好多次的发布。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方便代码审查&lt;/strong&gt;：我们很重视代码审查，具体可以看我们在&lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 的分享。所以这个流程必须对代码审查功能很友好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用代码沟通&lt;/strong&gt;：代码，是程序员沟通的最直接的手段。我们希望每一次的更改提交都是独立的，专注并只专注一件事情。这样，我们就很容易地去了解这次更改背后要传达的信息了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，为了达到持续交付，我们必须随时有一个可发布的分支，同时，工作分支能很简单很早的 merge 过来。为了做到随时随地的代码审查，我们必须每一次更改都要有迹可循，且和其他更改没有交叉。为了方便代码沟通，我们必须有独立的分支来做独立的事。所以，像开头列出的两种方式，首先代码审查会很麻烦，因为代码容易混在一起，不够独立，做不到异步随时审查，而需要大家一起花时间专门执行代码审查。同时，会推迟 merge 的发生，带来的更多的不确定性，比如冲突的增加，时间的拖长等等，就更不要说持续交付了。所有这些，都是效率的杀手，是应该尽量去避免的。下面看看我们的工作流程。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Git Flow in Pragmatic.ly" src="/images/practical-git-flow-for-startups/git-flow.png?1378836070" /&gt;&lt;/p&gt;

&lt;p&gt;我们有三种性质的分支：1) Master  2) Feature or Bug 3) Staging。所有在时间线上的变化都只跟着 feature 或者 bug 走，跟人无关，也就是项目推进的自然法则。对了，版本控制系统我们用 Git，而不是 SVN，好处就不多讲了，主要是三点：1) 分布式 2) 建分支很容易 3) merge 很简单。如果你对这个不太了解，可以看看 &lt;a href="http://gitcafe.com"&gt;GitCafe&lt;/a&gt; 的 &lt;a href="https://gitcafe.com/beginning_git"&gt;开始 Git 文档&lt;/a&gt;。&lt;/p&gt;

&lt;h4&gt;Master 分支&lt;/h4&gt;

&lt;p&gt;对于我们而言，master 分支是非常特别的，它必须是可以部署的分支，也就是通常意义上的 production。比如对于 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt;，现在线上跑的等同于我们代码里的 master 分支。所以，master 上的任何代码更改都只能是从别的分支 merge 过来，在代码审查过后。&lt;/p&gt;

&lt;h4&gt;Feature or Bug 分支&lt;/h4&gt;

&lt;p&gt;我们开发时不区分功能特性和 Bug，所有都一致按任务处理。所以，为了方便持续交付和代码审查，我们会人为的细分任务，比如在 9 月份，我们有下面这些任务计划。&lt;/p&gt;

&lt;p&gt;&lt;img alt="features and bugs" src="/images/practical-git-flow-for-startups/features-bugs.png?1378836070" /&gt;&lt;/p&gt;

&lt;p&gt;我们在开始实现这个功能或者修复这个 bug 的时候，就基于 master 支持创建一个新分支。之所以基于 master，正是因为上面提到过 master 永远是可以部署的分支，那么基于 master 开的分支就可以直接被 merge 回 master 做发布。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yedingding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;$ &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Pragmatic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ly&lt;/span&gt; › &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 754&lt;span class="n"&gt;_usage_analytics&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &amp;quot;754&lt;span class="n"&gt;_usage_analytics&lt;/span&gt;&amp;quot;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;$ &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Pragmatic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ly&lt;/span&gt; › &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 746&lt;span class="n"&gt;_integrate_mobile&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &amp;quot;746&lt;span class="n"&gt;_integrate_mobile&lt;/span&gt;&amp;quot;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;$ &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Pragmatic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ly&lt;/span&gt; › &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 77&lt;span class="n"&gt;_comment_via_email&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &amp;quot;77&lt;span class="n"&gt;_comment_via_email&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从分支创建例子上来看，我们是按照 &amp;lt;sid&amp;gt;&amp;#95;&amp;lt;ticket title&amp;gt; 的方式来命名。sid 是这个任务在 Pragmatic.ly 的任务 ID，ticket title 是任务在 Pragmatic.ly 上的标题概述。通过每个任务开发都基于 master 开新分支，就保证了，这个新分支能很容易的跟 master 做 diff 来做代码审查，然后被 merge 回 master。我们也把这种工作方式集成到了 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 中，比如提交到 754&amp;#95;usage&amp;#95;analytics 的 commits 会自动关联到 Pragmatic.ly 这个任务的动态里，也可以在 commit 消息里加上 &amp;ldquo;ref #754&amp;rdquo;, &amp;ldquo;resolved #754&amp;rdquo; 这样的文本，也会自动做关联，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Activity" src="http://blog.pragmatic.ly/images/integrate-version-control-system-with-pragmat/vcs-integration.png" /&gt;&lt;/p&gt;

&lt;p&gt;这里，在创建 pull request 发布做代码审查前，我们需要先同步 master，也就是 merge master 到正在开发的分支，确保没有 break 和可以正常 merge。然后，团队其他成员会介入做代码审查，当然之前会要求齐全的测试，通过后就可以 merge 会 master 做发布了。用这种方法，需要注意的是，merge 必须得及时，不然如果留下很多个分支没有 merge 的话，解决冲突是个麻烦的事情，更不要说有时会遇到功能有依赖关系的情况时。&lt;/p&gt;

&lt;h4&gt;Staging 分支&lt;/h4&gt;

&lt;p&gt;Staging 分支也是一个特殊的分支，是部署到我们的 staging 服务器上的版本。理想情况下，所有的更改做完代码审查后，在 merge 回 master 发布之前，会先 merge 到 staging 分支，发布到 staging 服务器做人工测试，通过后再 merge 到 master 发布到生产线上。所以，大部分时候，Staging 分支是 master 的一个备份保护，每次测尽可能少的改变。所以，还是会回到同一个注意点，要及时 merge。而且，有时候，根据任务的复杂度不同，我们可能不会通过 staging 而是会直接 merge 到 master 分支上线，比如一些简单的 bug 修复。&lt;/p&gt;

&lt;h4&gt;关于 CI&lt;/h4&gt;

&lt;p&gt;目前，我们没有专门的 CI 服务器做持续集成测试，因为在我们团队的理解力，CI 并不是意味着必须有专门的 CI server，而是每个开发人员在提交代码时必须保证通过了集成测试。所以我们的做法是发出每个 Pull Request 的时候，必须确保我们所有的测试仍然通过。&lt;/p&gt;

&lt;h4&gt;Pull Request VS Merge Reuqest&lt;/h4&gt;

&lt;p&gt;严格意义上来说，我们使用的是 Merge Request，而不是 Pull Request。Pull Request 要解决的问题是防止远程分支过多造成混乱，这样由每个开发人员建立自己的一个版本库，在自己的版本库建分支操作，然后往产品生产版本库发起一个 Pull 请求，同时，又要不断的跟远程的产品版本库同步保持一致，对于 10 个人以下的团队，个人感觉太重了。像&lt;a href="http://douban.com"&gt;豆瓣&lt;/a&gt;这样的团队，为了利用好 Pull Request，专门开发了一整套工具链来自动做这些操作降低复杂度，小团队可能就没这个条件了。而对于开源项目来说，组织松散，Pull Request 是个非常好的方式。Merge Request 就是我前面一直提到的工作方式，一个远程代码库，多个分支来管理，简单直接。&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;以上就是我们代码级别的项目管理工作流程，希望对你有帮助。个人觉得这个流程很适合 lean 的敏捷创业团队，能快速迭代快速交付。你们是怎么做的呢，欢迎交流，可以在微博上直接 &lt;a href="http://weibo.com/presently"&gt;@yedingding&lt;/a&gt; 或者 &lt;a href="http://weibo.com/pragmaticly"&gt;@pragmaticly&lt;/a&gt;！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>让代码审查成为你的团队习惯</title>
    <link rel="alternate" href="/2013/08/08/dig-into-code-review-process.html"/>
    <id>/2013/08/08/dig-into-code-review-process.html</id>
    <published>2013-08-08T10:00:00Z</published>
    <updated>2013-08-08T10:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/07/24/remote-team-the-things-you-should-know.html"&gt;「远程工作经验谈 - 如何适应及如何管理」&lt;/a&gt; 一文中，我在规则这章节提到了代码审查，收到不少朋友的提问和反馈，故在本文中拓展开来聊聊。&lt;/p&gt;

&lt;p&gt;在 &lt;a href="http://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5"&gt;Wikipedia&lt;/a&gt; 上，对代码审查的定义是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;代码审查（英语：&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;）是指对计算机源代码系统化地审查，常用软件同行评审的方式进行，其目的是在找出及修正在软件开发初期未发现的错误，提升软件质量及开发者的技术。代码审查常以不同的形式进行，例如结对编程、非正式的看过整个代码，或是正式的软件检查&lt;span class="p"&gt;[&lt;/span&gt;1&lt;span class="p"&gt;]&lt;/span&gt;。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出，代码审查主要是为了软件质量和个人开发修养。巧合的是，但凡我接触过的靠谱的团队，无一不是在团队中推行严格的代码审查制度。这个就像是一种习惯，直接融入在团队血液之中。&lt;/p&gt;

&lt;h3&gt;为什么我们要求代码审查&lt;/h3&gt;

&lt;p&gt;人们习惯用自己能衡量的东西来判断一件事情，所以对于代码审查而言，我们能看到的是它需要花掉一些人的一些额外的时间，那些本应该用来继续做开发的时间。这也正是代码审查在团队推行遇到的最大阻力。&lt;/p&gt;

&lt;p&gt;在我们 &lt;a title="团队高效协作工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 的实践中，代码审查给我们带来的三点好处。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/07/24/remote-team-the-things-you-should-know.html"&gt;「远程工作经验谈 - 如何适应及如何管理」&lt;/a&gt; 一文中，我在规则这章节提到了代码审查，收到不少朋友的提问和反馈，故在本文中拓展开来聊聊。&lt;/p&gt;

&lt;p&gt;在 &lt;a href="http://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5"&gt;Wikipedia&lt;/a&gt; 上，对代码审查的定义是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;代码审查（英语：&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;）是指对计算机源代码系统化地审查，常用软件同行评审的方式进行，其目的是在找出及修正在软件开发初期未发现的错误，提升软件质量及开发者的技术。代码审查常以不同的形式进行，例如结对编程、非正式的看过整个代码，或是正式的软件检查&lt;span class="p"&gt;[&lt;/span&gt;1&lt;span class="p"&gt;]&lt;/span&gt;。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出，代码审查主要是为了软件质量和个人开发修养。巧合的是，但凡我接触过的靠谱的团队，无一不是在团队中推行严格的代码审查制度。这个就像是一种习惯，直接融入在团队血液之中。&lt;/p&gt;

&lt;h3&gt;为什么我们要求代码审查&lt;/h3&gt;

&lt;p&gt;人们习惯用自己能衡量的东西来判断一件事情，所以对于代码审查而言，我们能看到的是它需要花掉一些人的一些额外的时间，那些本应该用来继续做开发的时间。这也正是代码审查在团队推行遇到的最大阻力。&lt;/p&gt;

&lt;p&gt;在我们 &lt;a title="团队高效协作工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 的实践中，代码审查给我们带来的三点好处。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;代码审查保证软件质量。我们团队没有专门的 QA 人员，测试一般由完成功能的程序员完成，思考不够周全，有时也达不到完全的测试覆盖率，我们在做代码审查时已经很多次发现过当事者没考虑过到的设计细节和一些实现上的 bug。它已成为我们团队找 bug 的一大手段，对于软件质量保证有很大贡献。在有些严格的团队如 Facebook，每一个修改如果没有被 3 个不同的成员审查通过，代码都不能做发布。&lt;/li&gt;
&lt;li&gt;代码审查促进团队成长。通过代码审查，每个人可以学习到其他人好的的思维方式和编码方式，也会提出做的不好的地方和改进意见，是整个团队在代码级别的另一种沟通和思考。我发现过了一段时间后，团队的成长是喜人的。对于专门花时间去做培训，成本低多了，XD&lt;/li&gt;
&lt;li&gt;代码审查避免单点故障。每一行代码，团队里至少有两个人以上是了解的。所以万一出了问题，即使代码编写者不在，我们仍然有其他人能立刻去修正。经理再也不担心出现虫子了。而且，视团队情况，最好尝试交叉审查，不要老是 A 审查 B，B 审查 A，换着审查效果更好。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你的团队还没有做代码审查，我很建议去尝试几个迭代周期，然后做个过程回顾，看看是否适合于团队，我相信结果肯定不会让你们失望，:)&lt;/p&gt;

&lt;h3&gt;代码审查应该是群体行为&lt;/h3&gt;

&lt;p&gt;这个是我在很多团队看到的问题。有些团队虽然在做代码审查，但是主要还是为了保证软件质量，没有最好的发挥代码审查的威力。我听过过很多次“他们经验比较浅，可能无法对别人的代码做审查”。不，不是这样子的。代码审查应该是群体行为，与经验无关。俗话说，三个臭皮匠，顶个诸葛亮。即使是经验欠缺的团队，如果能群策群力，也能交付出顶级质量的软件。这里先不论代码审查对团队的成长，单单是每一次修改都让其他人审查的行为，就能提高初级程序员的信心、对产品的参与度和责任心。反之，有些人会一直呆在舒服区，反正有人帮忙做审查提意见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do it and get surprised!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;我们团队如何做代码审查&lt;/h3&gt;

&lt;p&gt;我在 &lt;a href="http://intridea.com"&gt;Intridea&lt;/a&gt; 和 &lt;a title="团队协作软件" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 做项目管理时都做代码审查，主要尝试过两种方式，最常用的是 Github 倡导的 Pull Request，还有就是结对编程。&lt;/p&gt;

&lt;h4&gt;Pull Request&lt;/h4&gt;

&lt;p&gt;这是我们最常用的方式，我们用 &lt;a title="敏捷项目管理工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 做项目管理，用 &lt;a href="https://bitbucket.org"&gt;BitBucket&lt;/a&gt; 做代码版本控制系统。每个任务都会基于线上版本开一个新的分支，当任务完成后，提交推送到 BitBucket 的时候，会自动的关联这个提交到 Pragmatic.ly 中，也创建了一个 Pull Request。当有 Pull Request 出现时，我们的原则是谁有空谁审查，并不指派到人。整个审查过程，提意见，做修改，直到被通过，等待上线。具体例子可以见下图，&lt;/p&gt;

&lt;p&gt;&lt;img alt="Activity" src="http://blog.pragmatic.ly/images/integrate-version-control-system-with-pragmat/vcs-integration.png" /&gt;&lt;/p&gt;

&lt;p&gt;值得一提的是，我们在做代码审查的时候会关注下面一些问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本功能工作不，要实际跑起来看。&lt;/li&gt;
&lt;li&gt;代码实现清晰易读吗&lt;/li&gt;
&lt;li&gt;有没有没有考虑到的点，特别是对其他部分代码会否造成影响&lt;/li&gt;
&lt;li&gt;是不是最好的实现，有没有重构的空间&lt;/li&gt;
&lt;li&gt;测试代码同样需要审查&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你对 Pull Request 方式感兴趣，推荐一个我非常喜欢的 Talk，来自 Zach Holman 的 &lt;a href="http://zachholman.com/talk/how-github-uses-github-to-build-github/"&gt;「How Github Uses Github To Build Github」&lt;/a&gt;。Zach Holman 也是我们今年 &lt;a href="http://rubyconfchina.org"&gt;RubyConf China&lt;/a&gt; 的邀请嘉宾，欢迎广大 Ruby 爱好者来京交流，XD&lt;/p&gt;

&lt;h4&gt;结对编程&lt;/h4&gt;

&lt;p&gt;因为我们是一直在远程工作，所以对于结对编程实践并不多。在有限的几次里，我们是用一个共享的 VPS + TMux 结对，也有时用 &lt;a href="http://gotomeeting.com"&gt;GoToMeeting&lt;/a&gt; 这样的在线会议系统做结对编程。结对编程等同于实时代码审查，有限的几次结对编程体验都不错，开发效率提升飕飕的，也是很好的互相学习的机会，但是太累了，同时因为远程的缘故受网络条件制约太多&amp;hellip;. Kevin 曾在 Teahour 里分享过他们在 &lt;a href="http://hashrocket.com"&gt;HashRocket&lt;/a&gt; 的结对编程经验分享，叹为观止，有兴趣的可以听听&lt;a href="http://teahour.fm/2013/02/03/learning-ruby-and-rails.html"&gt;这一期&lt;/a&gt;。如果你们团队在一起办公，推荐尝试一下结对编程，不过严格的每个任务都做结对编程不推荐。&lt;/p&gt;

&lt;h3&gt;建议&lt;/h3&gt;

&lt;p&gt;以上就是我们团队在代码审查上的经验和思考，希望对你有帮助。让代码审查融入团队的血液，成为你们的工作习惯，绝对会是你们在团队管理上做出的最正确的决定之一，去尝试吧！如果对于代码审查实践或者团队管理上面有任何想交流的，欢迎随时联系我，任何我列出的联系方式都可以。&lt;/p&gt;

&lt;p&gt;最后，上篇博客最后一段很有用，收获了不少关注者，所以故伎重演，XD。如果你读到这里了，那么你应该在微博上&lt;a href="http://weibo.com/presently"&gt;加我为好友&lt;/a&gt;。我也会在 &lt;a href="http://weibo.com/pragmaticly"&gt;Pragmatic.ly 微博账号&lt;/a&gt;发布更多关于团队协作、团队管理方面的思考。谢谢！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>远程工作经验谈 - 如何适应及如何管理</title>
    <link rel="alternate" href="/2013/07/24/remote-team-the-things-you-should-know.html"/>
    <id>/2013/07/24/remote-team-the-things-you-should-know.html</id>
    <published>2013-07-24T00:00:00Z</published>
    <updated>2013-07-24T00:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Remote Work WorldMap" src="/images/remote-team-the-things-you-should-know/remote-work-worldmap.jpg?1374651368" /&gt;
前记：本文源于我在知乎上回答的&lt;a href="http://www.zhihu.com/question/20011303/answer/17978689"&gt;「团队成员都在异地办公有哪些优劣？」&lt;/a&gt;。在国外远程工作已经是很习以为常的事情，而国内却仍然是个新鲜事。经常也会有朋友问我如何适应远程工作，如何管理远程团队，觉得还是有挺多的可以交流的，故在这里记录点文字，希望对大家有帮助。&lt;/p&gt;

&lt;p&gt;算算从 07 年开始到现在基本都是在异地办公，从一开始一个人兼多种角色做独立开发者，也经历并管理过一个曾多达 18 人的远程团队，到现在 3 个人创业，做团队高效协作工具 &lt;a title="团队高效协作工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt;，依然大部分时间远程。大体上远程工作，在我看来主要包含三个方面：1）团队 2）工具 3）规矩。&lt;/p&gt;

&lt;h3&gt;团队&lt;/h3&gt;

&lt;p&gt;当我们说到团队适不适合远程工作时，这里会有两层意思：一是团队里的个人是否适合远程工具，二是这个团队适不适合远程工作。&lt;/p&gt;

&lt;h4&gt;团队个人&lt;/h4&gt;

&lt;p&gt;远程工作远不是人们想像中的自由状态，想工作就工作，不想工作就不工作。所以并不是所有人都适合远程工作，只有自律且耐得住寂寞的人才适合远程工作。“自律”，说易行难，却很重要，你在一个完全没有监督的环境，有大把的时间供你挥霍，你能否迅速调整到最佳工作状态，是工作成败的一个很关键因素。如果说当你对所做的事情充满激情而能努力工作的话，那么当激情退却的时候，能否仍然保持自律是个更大的挑战。“耐得住寂寞”是另外一个要求，即使你在一个团队里，大多数时候没有人说话，没有人扯淡，也没有人讨论，甚至当你无法很好把握生活和工作的平衡时有时一天也出不了一次门说不了几句话，所以如果你很看重或热衷职场社交活动的话，那么远程工作并不适合你。然而，一旦你习惯了这种工作方式，你会发现你可以选择更自由的工作方式，有更多的时间可以用来学习，也有更多的时间可以陪伴家人，你会喜欢上这种感觉，:)&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Remote Work WorldMap" src="/images/remote-team-the-things-you-should-know/remote-work-worldmap.jpg?1374651368" /&gt;
前记：本文源于我在知乎上回答的&lt;a href="http://www.zhihu.com/question/20011303/answer/17978689"&gt;「团队成员都在异地办公有哪些优劣？」&lt;/a&gt;。在国外远程工作已经是很习以为常的事情，而国内却仍然是个新鲜事。经常也会有朋友问我如何适应远程工作，如何管理远程团队，觉得还是有挺多的可以交流的，故在这里记录点文字，希望对大家有帮助。&lt;/p&gt;

&lt;p&gt;算算从 07 年开始到现在基本都是在异地办公，从一开始一个人兼多种角色做独立开发者，也经历并管理过一个曾多达 18 人的远程团队，到现在 3 个人创业，做团队高效协作工具 &lt;a title="团队高效协作工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt;，依然大部分时间远程。大体上远程工作，在我看来主要包含三个方面：1）团队 2）工具 3）规矩。&lt;/p&gt;

&lt;h3&gt;团队&lt;/h3&gt;

&lt;p&gt;当我们说到团队适不适合远程工作时，这里会有两层意思：一是团队里的个人是否适合远程工具，二是这个团队适不适合远程工作。&lt;/p&gt;

&lt;h4&gt;团队个人&lt;/h4&gt;

&lt;p&gt;远程工作远不是人们想像中的自由状态，想工作就工作，不想工作就不工作。所以并不是所有人都适合远程工作，只有自律且耐得住寂寞的人才适合远程工作。“自律”，说易行难，却很重要，你在一个完全没有监督的环境，有大把的时间供你挥霍，你能否迅速调整到最佳工作状态，是工作成败的一个很关键因素。如果说当你对所做的事情充满激情而能努力工作的话，那么当激情退却的时候，能否仍然保持自律是个更大的挑战。“耐得住寂寞”是另外一个要求，即使你在一个团队里，大多数时候没有人说话，没有人扯淡，也没有人讨论，甚至当你无法很好把握生活和工作的平衡时有时一天也出不了一次门说不了几句话，所以如果你很看重或热衷职场社交活动的话，那么远程工作并不适合你。然而，一旦你习惯了这种工作方式，你会发现你可以选择更自由的工作方式，有更多的时间可以用来学习，也有更多的时间可以陪伴家人，你会喜欢上这种感觉，:)&lt;/p&gt;

&lt;h4&gt;团队情感&lt;/h4&gt;

&lt;p&gt;如果你找到了自律并耐得住寂寞的人一起工作，那么恭喜你。下面就是你得信任他，100% 的信任，如果你花时间去思考他到底是不是在用心工作的话，或者你并不相信他能做好这个任务的话，那事情就难办了。而信任关系，很多时候是依靠团队的情感基础。所以，一个完全陌生的团队，是不适合远程工作的。如果一定要，一定要尽量多做团队建设，可以每隔一段时间就组织一次，加强情感交流。短时间的面对面的交流对团队的凝聚力是个很大的帮助，最后会感觉做事情顺多了，效率也提高了。否则沟通时会有所顾忌，毕竟当团队不熟的时候，开个玩笑都不太确定别人接受程度如何，而过于严肃的讨论有时会成为一种负担。另外，如果可能的话，也可以尝试做线上团队建设，比如我在 Intridea 时就组织了个 teahour，也就是目前 &lt;a href="http://teahour.fm"&gt;Teahour.FM&lt;/a&gt; 的前身，一段非常美好的回忆，对整个团队打成一片非常有帮助。&lt;/p&gt;

&lt;h3&gt;工具&lt;/h3&gt;

&lt;p&gt;当远程团队建立起来以后，大家为了一个共同的目标一起努力，是一件非常有意义的事。我们必须得承认，不管如何远程办公的沟通成本是远远大于面对面交流的，所以远程团队更需要好的效率工具来辅助，让团队即使远程也能很高效的工作。在我们团队，主要使用的有五个应用： &lt;a href="http://skype.com"&gt;Skype&lt;/a&gt;， &lt;a href="https://hipchat.com"&gt;Hipchat&lt;/a&gt;， &lt;a title="团队高效协作软件" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt;， &lt;a href="https://dropbox.com"&gt;Dropbox&lt;/a&gt;， &lt;a href="https://www.google.com/intl/zh-CN/enterprise/apps/business/"&gt;Google Apps&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Collaboration Tools" src="/images/remote-team-the-things-you-should-know/collaboration-tools.jpg?1374651368" /&gt;&lt;/p&gt;

&lt;h4&gt;Skype&lt;/h4&gt;

&lt;p&gt;对于 Skype，我们基本只用做会议工具，而很少使用聊天功能。当我们需要做头脑风暴的时候，订每周计划或者站立会议的时候，直接语音远比文本高效。 Skype 的语音质量并不是非常的稳定，但是至少在目前这个点上，我还没遇到一个能让我们团队同时在线语音会议的更好选择，别说 Google 环聊，有墙的世界真的很烂。&lt;/p&gt;

&lt;h4&gt;Hipchat&lt;/h4&gt;

&lt;p&gt;超好用的群组聊天工具，而且可以很方便的跟第三方服务做集成。我们基本上在上面讨论事情和共享信息，当然也顺便扯扯淡。&lt;a href="https://hipchat.com"&gt;Hipchat&lt;/a&gt; 让我最喜欢的是它的简单性，基于它的 API 也有很多可以做，比如每次部署时都会发消息到 Hipchat，每次有新的用户意见也会发消息到 Hipchat，等等。不过我几乎不用他的 1-to-1 聊天，也基本只开一个房间。&lt;/p&gt;

&lt;h4&gt;Pragmatic.ly&lt;/h4&gt;

&lt;p&gt;我们自己创业的项目，本身就是为了让团队专注高效的工作，能非常简单地集成到工作流程，很方便地进行计划安排，进度跟踪和沟通交流。我们基本每周在 Skype 上开完计划会议之后，就把要做的任务创建到 &lt;a title="高效任务管理工具" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 上，之后大家所有关于任务的安排、执行、讨论等就直接用工具了，不再需要同步状态，不再需要动不动就骚扰其他人，始终让团队保持在专注高效的状态，极大地提升了我们的协作效率。&lt;/p&gt;

&lt;h4&gt;Dropbox&lt;/h4&gt;

&lt;p&gt;如果你还没开始在团队里使用 Dropbox，我还能说什么呢，:)  我们用 Dropbox 来分享公司内部文档，书籍和一些设计稿。Dropbox 能把文件管理做到如此简单，值得很多产品学习。我希望未来 Pragmatic.ly 也能把团队协作、任务管理做到如 Dropbox 般简单，当然，仍然不失高效！&lt;/p&gt;

&lt;h4&gt;Google Apps&lt;/h4&gt;

&lt;p&gt;我们并不是 Google Apps 的重度用户，但是我们是 GMail 的重度用户，让我能即时的了解 Pragmatic.ly 项目里发生的近况，也是我们联系用户的纽带。Google Docs 和 Google Spreadsheets 我们偶尔也用，其强大的协同写文系统和文档留言系统是我们最喜欢的，只是在国内访问实在很糟糕，逼迫我们要科学上网。&lt;/p&gt;

&lt;h3&gt;规则&lt;/h3&gt;

&lt;p&gt;有了靠谱的人，有了靠谱的工具，那么是否就意味着远程团队就一定好管理呢？其实不然，还要有靠谱的规则。而规则也正是联系团队和工具之间的桥梁。我们自己在工作中就有下面的几个规则。&lt;/p&gt;

&lt;h4&gt;免扰模式&lt;/h4&gt;

&lt;p&gt;因为沟通成本高，所以我们需要更谨慎的沟通方式。我们不鼓励在工作时随意地打断别人，即使是一起在办公室工作时。相反，我们要求每个人如果需要讨论，想清楚整个问题，然后在 Pragmatic.ly 或者 Hipchat 里发出来。短时间来看可能回复会有延时，但从长期来看反而能让大家都能更深入的思考，更专注的工作，对我们来说是个更好的方式。&lt;/p&gt;

&lt;h4&gt;代码审查&lt;/h4&gt;

&lt;p&gt;做为开发团队，我们不一定能保证每个任务都有充足的测试覆盖而且我们也不追求 100% 覆盖率。但是，每一段代码，每一次修改，必须要有其他人来审查，验收通过后才会被进入主干。这样既能保证代码质量，也能确保每一部分都至少有两个人了解。&lt;/p&gt;

&lt;h4&gt;流程审查&lt;/h4&gt;

&lt;p&gt;除了代码，过程也是一个很有审查必要的事情。所以我们每隔一段时间，会一起进行一个简单的回顾，各自对这个周期的一些工作提出意见。迭代式调整，迭代式改进，让我们根据自身的情况，不停地实践出到最适合团队的工作流程。&lt;/p&gt;

&lt;h4&gt;易者优先&lt;/h4&gt;

&lt;p&gt;如果讨论时遇到意见分歧，且这些不一致的意见不涉及对错，那么会很容易陷入到各自试图说服别人接受自己观点的困境，尤其是在远程工作时，因为缺乏面对面交流时的表情和肢体语言，纯属浪费时间。所以我们采用易者优先原则，设置了单任务最长讨论时间，一旦超过无法达成共识，就会选择最简单的方案，做出来测试看再做改进。&lt;/p&gt;

&lt;h3&gt;建议&lt;/h3&gt;

&lt;p&gt;基本这些就是我在远程工作上的思考和经验，希望对你有帮助。如果国内也能有更多的团队接受远程工作。让大家把浪费在交通等上的时间拿来工作，绝对是在给社会做贡献。最后再说一句，远程工作非常适合需求明确的项目，比如外包，因为你不需要去试方向试错，只要照着需求做就可以了。而对于创业，前面的路是不可知的，需要团队不断试错，要经常地头脑风暴，快速前进，所以除非团队已经熟悉到了一定程度，不然还是建议本地办公，或者在相对距离近的地方办公，也就是见面的成本要低。&lt;/p&gt;

&lt;p&gt;最后，如果你读到这里了，那么你应该在微博上&lt;a href="http://weibo.com/presently"&gt;加我为好友&lt;/a&gt;。我也会在 &lt;a href="http://weibo.com/pragmaticly"&gt;Pragmatic.ly 微博账号&lt;/a&gt;发布更多关于远程工作、团队协作方面的思考。如果你有任何想交流的，可以随时通过我博客的几种联系方式联系我。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>创业工具箱之视频篇</title>
    <link rel="alternate" href="/2013/07/04/video-for-startup.html"/>
    <id>/2013/07/04/video-for-startup.html</id>
    <published>2013-07-04T04:00:00Z</published>
    <updated>2013-07-04T04:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Pragmatic.ly Tour Video" src="/images/video-for-startup/example.png?1372989968" /&gt;&lt;/p&gt;

&lt;p&gt;前天在微博上发了一条消息介绍视频托管服务 &lt;a href="http://wistia.com"&gt;Wista&lt;/a&gt;，很多朋友回复并给出很多很好的信息，觉得很有必要汇总一下，希望对创业者有用。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;一般那些有产品视频的网站我个人印象分都会有提升，但是打开视频你让我先看 30 秒优酷广告我就有点受不了了，优酷有没有提供付费免广告的服务我不知道，不过 Wistia 是个很靠谱的视频服务，可以看这个例子，&lt;a href='http://t.cn/zQvd8NG' target='_blank'&gt;http://t.cn/zQvd8NG&lt;/a&gt; 国内问过各个地区的朋友都说速度没问题，清晰度也好 #创业工具箱#&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;曾经看到过数据，用户在看到一个网站后点进去的平均访问时间是 6 到 7 秒。也就是说你只有七秒的时间来让用户了解你的产品，然后吸引那批感兴趣的用户多停留一段时间。所以很多网站在传达清晰明确的产品信息给你的同时，会提供更多辅助的形象化表达方式。我们常说，一图胜千言，一屏胜万文。有统计一个好的产品介绍视频能带来 &lt;strong&gt;64% 到 85%&lt;/strong&gt; 左右的转化率提升，会让你的网站的平均访问时间&lt;strong&gt;提高两分钟&lt;/strong&gt;。所以，创业者们，好好思考一下视频，严肃地。&lt;/p&gt;

&lt;p&gt;但是，制造一个产品视频会涉及到文案、录制、后期、音乐、托管等，而中间三个是技术创业团队很少具有的能力，我相信这也正是很多产品缺乏视频的一个主要原因。所幸的是，这是一个分工合作的年代，这些专业的事情就应该交给专业的人去做。如果这个不是业务的核心，我相信付出一点点的成本来寻求更好的回报是个更好的选择。这里列一下我了解的和朋友分享的几种托管方案和制作选择。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Pragmatic.ly Tour Video" src="/images/video-for-startup/example.png?1372989968" /&gt;&lt;/p&gt;

&lt;p&gt;前天在微博上发了一条消息介绍视频托管服务 &lt;a href="http://wistia.com"&gt;Wista&lt;/a&gt;，很多朋友回复并给出很多很好的信息，觉得很有必要汇总一下，希望对创业者有用。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;一般那些有产品视频的网站我个人印象分都会有提升，但是打开视频你让我先看 30 秒优酷广告我就有点受不了了，优酷有没有提供付费免广告的服务我不知道，不过 Wistia 是个很靠谱的视频服务，可以看这个例子，&lt;a href='http://t.cn/zQvd8NG' target='_blank'&gt;http://t.cn/zQvd8NG&lt;/a&gt; 国内问过各个地区的朋友都说速度没问题，清晰度也好 #创业工具箱#&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;曾经看到过数据，用户在看到一个网站后点进去的平均访问时间是 6 到 7 秒。也就是说你只有七秒的时间来让用户了解你的产品，然后吸引那批感兴趣的用户多停留一段时间。所以很多网站在传达清晰明确的产品信息给你的同时，会提供更多辅助的形象化表达方式。我们常说，一图胜千言，一屏胜万文。有统计一个好的产品介绍视频能带来 &lt;strong&gt;64% 到 85%&lt;/strong&gt; 左右的转化率提升，会让你的网站的平均访问时间&lt;strong&gt;提高两分钟&lt;/strong&gt;。所以，创业者们，好好思考一下视频，严肃地。&lt;/p&gt;

&lt;p&gt;但是，制造一个产品视频会涉及到文案、录制、后期、音乐、托管等，而中间三个是技术创业团队很少具有的能力，我相信这也正是很多产品缺乏视频的一个主要原因。所幸的是，这是一个分工合作的年代，这些专业的事情就应该交给专业的人去做。如果这个不是业务的核心，我相信付出一点点的成本来寻求更好的回报是个更好的选择。这里列一下我了解的和朋友分享的几种托管方案和制作选择。&lt;/p&gt;

&lt;h3&gt;视频托管&lt;/h3&gt;

&lt;p&gt;先假设你有了视频后，你会选择放在哪里？下面是我经历过的或者朋友推荐的。Youtube 在我亲测下来其实是非常好的选择，无论各方面来讲，可惜被墙掉了，所以本文就忽略了。&lt;/p&gt;

&lt;h4&gt;Wistia&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://wistia.com"&gt;Wistia&lt;/a&gt; 是目前 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 在用的视频托管商，你可以&lt;a href="https://pragmatic.ly/tour"&gt;点击这里&lt;/a&gt;看看实际效果。作为一个还未被墙希望也不要被墙的服务，他满足了我的所有需求。国内访问数据快，根据带宽自动调整视频码率，基本看到的都是非常清晰的版本。另外一点值得一说的，Wistia 还有强大的视频分析能力，可以通过这个分析视频的转化率等，可以看下图。集成方面，Wistia 支持 iframe, API 和 SEO 方式，非常简单。Wistia 额免费计划包括 3 个视频和 5G 流量，初期也够用了。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Wistia Analytics" src="/images/video-for-startup/wistia-analytics.png?1372948131" /&gt;&lt;/p&gt;

&lt;h4&gt;优酷&lt;/h4&gt;

&lt;p&gt;优酷是国内最大的视频网站，使用优酷作为托管商的话基本不用担心用户的播放问题。然而其免广告服务只提供给用户而非视频创作者，想想一个一分钟到两分钟的视频让用户先看 30 秒优酷广告是什么感觉，至少我是不能接受的。另外，上传后的视频被压缩后分辨率也不行，我实验了几次基本是糊的。&lt;/p&gt;

&lt;h4&gt;自己架服务器&lt;/h4&gt;

&lt;p&gt;自己架媒体服务器，可以利用&lt;a href="http://upyun.com"&gt;又拍云&lt;/a&gt;或者&lt;a href="http://qiniu.com"&gt;七牛云存储&lt;/a&gt;来做静态视频文件存放，成本低，也算是一个靠谱的选择，目前 &lt;a href="http://railscasts-china.com"&gt;RailsCasts China&lt;/a&gt; 就是采用这样的方案。只是在集成方面可能需要一些额外的工作，比如寻找一个好的 JS 视频播放器，或者把视频转成 FLV 播放。另外一点是很难提供多个版本不同码率的视频，根据用户的带宽做自行选择。&lt;/p&gt;

&lt;h4&gt;CC视频&lt;/h4&gt;

&lt;p&gt;有朋友推荐了&lt;a href="http://www.bokecc.com/"&gt;CC视频&lt;/a&gt;给我，之前不知道国内有这类服务，看了一下，觉得应该是还可以的，不知道有没有朋友试用过，可以评价下&lt;/p&gt;

&lt;h3&gt;视频制作&lt;/h3&gt;

&lt;p&gt;但凡国外我喜欢用的服务，产品视频都很让我喜欢，比如 &lt;a href="https://hipchat.com"&gt;HipChat&lt;/a&gt;，&lt;a href="https://dropbox.com"&gt;Dropbox&lt;/a&gt;。我也一直想拍一个能更好跟用户互动的视频，而不仅仅是产品介绍，但是苦于没有设备，没有拍摄经验，没有制作经验。国外有一些专门为科技公司提供视频制作的服务公司，而国内这个是一块待开垦的处女地，我相信一定会有市场。这里是我了解的几个服务，供大家参考。&lt;/p&gt;

&lt;h4&gt;Video Sales Lab&lt;/h4&gt;

&lt;p&gt;来自&lt;a href="http://weibo.com/tisiwi"&gt;@天使湾创投&lt;/a&gt;推荐，&lt;a href="http://videosaleslab.com/"&gt;Video Sales Lab&lt;/a&gt;，专业视频定制服务，并提供一系列增值服务，比如市场营销，分析统计等。价格不太了解，但是有退款保证，也就是如果你的视频制作投入没有收回，他们会一直免费提供修改服务只要你收回成本，不然，就会全额退款，也算是他们对自己的强大自信心的体现。&lt;/p&gt;

&lt;h4&gt;GoAnimate&lt;/h4&gt;

&lt;p&gt;同样来自于&lt;a href="http://weibo.com/tisiwi"&gt;@天使湾创投&lt;/a&gt;推荐，&lt;a href="http://goanimate.com"&gt;GoAnimate&lt;/a&gt; 是在线的视频制作工具，提供多种动画模板，可以让你方便的自己制作简单视频。GoAnimate 以免费为噱头，如果你真正在做产品介绍的话很可能是需要付月费的，所以也并不是什么廉价的方案。&lt;/p&gt;

&lt;h4&gt;SandwichVideo &amp;amp; Vooza&lt;/h4&gt;

&lt;p&gt;看看 &lt;a href="http://sandwichvideo.com/"&gt;SandwichVideo&lt;/a&gt; 的一系列作品就知道他的厉害了，专为一些科技类产品做产品视频，而且是微电影，很喜欢。价格上可能就不是初创团队承受的起了的，不过他们的定价策略是先看团队，然后大家再谈。&lt;a href="http://vooza.com/"&gt;Vooza&lt;/a&gt; 是这个领域的新的玩家，个人也挺喜欢这种风格。多看这两家的视频会帮助你区思考你自己及的视频的文案，推荐！&lt;/p&gt;

&lt;h4&gt;几分钟网&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.jifenzhong.com/sub/video_studio.html"&gt;几分钟工作室&lt;/a&gt;是一个国内的专业视频创意工作室。&lt;a href="http://jifenzhong.com"&gt;几分钟网&lt;/a&gt;里的视频就是他们自主拍摄的。最近他们也推出了专业的视频制作服务，满让我期待的。我跟他们的创始人&lt;a href="http://weibo.com/yeruizhi"&gt;叶睿智&lt;/a&gt;在 QQ 上沟通了一下，很认可他们的服务，无论前期后期都会全程参与，而且在价格上也基本是大多数创业团队能接受的，我很有兴趣和他们合作拍一个 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 的产品视频，如果你也有兴趣，可以直接微博上 @ 他。&lt;/p&gt;

&lt;h4&gt;自己制作&lt;/h4&gt;

&lt;p&gt;如果因为各种原因觉得以上几种都不行，你也可以选择全部自己制作。我们的 &lt;a href="https://pragmatic.ly/tour"&gt;2 分钟产品介绍&lt;/a&gt; 就是这样子的，主要是用了 &lt;a href="http://www.telestream.net/screenflow/"&gt;Screenflower&lt;/a&gt; 录屏幕再加后期配音。基本没什么特效，因为 &lt;a href="https://www.apple.com/finalcutpro/motion/"&gt;Motion&lt;/a&gt; 太复杂，买了没学会用&amp;hellip;.  音乐最后是找的 CC 版权的，也实在没太多好选择。&lt;/p&gt;

&lt;p&gt;希望未来在国内能看到越来越多的好的产品视频，也希望有更多元化的视频类服务出现。祝大家的产品都成功，:)&lt;/p&gt;

&lt;h3&gt;关于 Pragmatic.ly&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 是一个新型的团队协作工具，致力于让中小团队更加专注、有序、高效地工作，从而创造更多的价值。如果你在寻找一款适合你们团队的协作工具或者项目管理工具，不妨一试，很期待能听到你的意见和建议，谢谢！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>黑客马拉松 - 玩脱了就行！</title>
    <link rel="alternate" href="/2013/05/22/happy-hackathon.html"/>
    <id>/2013/05/22/happy-hackathon.html</id>
    <published>2013-05-22T04:00:00Z</published>
    <updated>2013-05-22T04:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Rails Rumbling" src="/images/happy-hackathon/rumbling.jpg?1369226457" /&gt;&lt;/p&gt;

&lt;p&gt;去年十月参加 &lt;a href="http://railsrumble.com"&gt;Rails Rumble 2012&lt;/a&gt;，做了一个 &lt;a href="http://call4review.com"&gt;call4review.com&lt;/a&gt;，虽然现在已经很少打理，但是偶尔用到几次也觉得挺有价值。这是第二次参加 Rails Rumble，2010 年和 &lt;a href="http://lvguoning.com"&gt;Daniel&lt;/a&gt;、&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt;、&lt;a href="#"&gt;David Pots&lt;/a&gt; 做了个 IMGateway，2012 年和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt;、&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 做了这个 Call4Review，每每谈论起整个过程，个个眉飞目舞，意犹未尽的样子。其实就两个字，好玩！Just for fun，这不正是黑客精神的很好诠释嘛。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当时：困倦，但是兴奋得睡不着觉。事后：几周，几个月，甚至一年后想起 Rumble的经历，依然充满各种欢乐的回忆。&lt;/p&gt;
  &lt;p&gt;&lt;cite&gt;— &lt;img alt="Daniel" height="36" src="https://secure.gravatar.com/avatar/b338e877fffff7a61d90a799c081c85b?size=72" width="36"&gt; &lt;a href="//lvguoning.com"&gt;Daniel&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote&gt;
  &lt;p&gt;犹如一场48小时的电竞比赛… 紧张刺激而又充满乐趣&amp;hellip;&lt;/p&gt;
  &lt;p&gt;&lt;cite&gt;— &lt;img alt="Terry" height="36" src="https://secure.gravatar.com/avatar/85a64fb3375926c0be5c75eccf40e853?size=72" width="36"&gt; &lt;a href="//terrytai.com"&gt;Terry&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Rails Rumbling" src="/images/happy-hackathon/rumbling.jpg?1369226457" /&gt;&lt;/p&gt;

&lt;p&gt;去年十月参加 &lt;a href="http://railsrumble.com"&gt;Rails Rumble 2012&lt;/a&gt;，做了一个 &lt;a href="http://call4review.com"&gt;call4review.com&lt;/a&gt;，虽然现在已经很少打理，但是偶尔用到几次也觉得挺有价值。这是第二次参加 Rails Rumble，2010 年和 &lt;a href="http://lvguoning.com"&gt;Daniel&lt;/a&gt;、&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt;、&lt;a href="#"&gt;David Pots&lt;/a&gt; 做了个 IMGateway，2012 年和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt;、&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 做了这个 Call4Review，每每谈论起整个过程，个个眉飞目舞，意犹未尽的样子。其实就两个字，好玩！Just for fun，这不正是黑客精神的很好诠释嘛。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当时：困倦，但是兴奋得睡不着觉。事后：几周，几个月，甚至一年后想起 Rumble的经历，依然充满各种欢乐的回忆。&lt;/p&gt;
  &lt;p&gt;&lt;cite&gt;— &lt;img alt="Daniel" height="36" src="https://secure.gravatar.com/avatar/b338e877fffff7a61d90a799c081c85b?size=72" width="36"&gt; &lt;a href="//lvguoning.com"&gt;Daniel&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;犹如一场48小时的电竞比赛… 紧张刺激而又充满乐趣&amp;hellip;&lt;/p&gt;
  &lt;p&gt;&lt;cite&gt;— &lt;img alt="Terry" height="36" src="https://secure.gravatar.com/avatar/85a64fb3375926c0be5c75eccf40e853?size=72" width="36"&gt; &lt;a href="//terrytai.com"&gt;Terry&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;是一场极限'运动&amp;lsquo;, 在严格的限定时间里产出自己最大的效能, 很刺激很过瘾.&lt;/p&gt;
  &lt;p&gt;&lt;cite&gt;— &lt;img alt="Ben" height="36" src="https://secure.gravatar.com/avatar/e7ac2850f5cfb29baaf97625c7bd590c?size=72" width="36"&gt; &lt;a href="//beenhero.com"&gt;Ben&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相对惭愧的是，国内的黑客马拉松参加的少，只因为习惯了远程工作，对于这种限定场地的反而感觉到了不自在。上周跟&lt;a href="http://segmentfault.com/u/sunny"&gt;高阳&lt;/a&gt;聊起黑客马拉松，获得了一些有意思的信息，也知道他们最近正在搞 &lt;a href="http://segmentfault.com/codejam-2013"&gt;CodeJam&lt;/a&gt;。程序员大多都很宅，远程工作的就是死宅了&amp;hellip; ❨╯°□°❩╯︵ ┻━┻  提供和限定场地可以让参加的团队能互相交流，思想碰撞，有一种跟线上比赛完全不一样的感官享受。&lt;/p&gt;

&lt;p&gt;这里分享一下我们参加过几次 Rumble 的经验。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;做最小化的东西，你只有 48 小时的开发时间，把功能砍到不能再砍。&lt;/li&gt;
&lt;li&gt;充分的准备，不要在比赛的时候去做选择方案的事。规则不允许提前开发，但是你应该对开发中遇到的所有技术难点都提前有尝试。&lt;/li&gt;
&lt;li&gt;一个好的协作工具。48 小时开发是非常高强度的，交流可以靠吼，进度控制管理必须靠工具，这样团队的每个人才能专注开发。&lt;/li&gt;
&lt;li&gt;做什么不是关键，相信大家平时会有很多创意，随便选个，最主要是玩的尽兴，不是吗？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如我们在做 &lt;a href="http://call4review.com"&gt;Call4Review&lt;/a&gt; 时，提前一两周确定一个最小化的需求分析，然后把所有要做的事情都记在 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 上，比赛时在上面协作沟通，非必要时尽量不干扰团队其他成员，但是每个人又都很清楚进度情况，非常高效。&lt;/p&gt;

&lt;p&gt;6 月 1 号儿童节，杭州， &lt;a href="http://segmentfault.com/codejam-2013"&gt;2013 CodeJam&lt;/a&gt;，有没有人愿意出来跟我们 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队交流交流，:) 让我们以程序员的方式像孩子一样狂欢吧！&lt;/p&gt;

&lt;p&gt;PS: 据说适逢 &lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 一周年, 不知道高阳会给我们什么惊喜，哈！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>记 5 月 11 号 Ruby 开发者沙龙</title>
    <link rel="alternate" href="/2013/05/14/ruby-event-5-11.html"/>
    <id>/2013/05/14/ruby-event-5-11.html</id>
    <published>2013-05-14T00:00:00Z</published>
    <updated>2013-05-14T00:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Hangzhou Ruby Event May 11th" src="/images/ruby-event-5-11/event.jpg?1368509827" /&gt;&lt;/p&gt;

&lt;p&gt;上周六我们在杭州举行了面对长三角的小型 Ruby 爱好者沙龙，5 个小时，6 位分享嘉宾，70多位参与者，很好很强大。&lt;/p&gt;

&lt;p&gt;我个人很喜欢 Daniel 之前在上海搞的季度 ShanghaiOnRails 线下活动，给长三角的 Rubyists 提供了交流学习的时间和平台，每次参加都感觉收获不浅。可惜随着 Daniel 的退隐江湖，这个活动也就搁置了一段时间。上个月我和杭州 Ruby 社区的朋友聊了一下，决定在杭州也搞一期，希望未来有上海的朋友苏州的朋友也能牵头搞这件事，促进城际间的交流。其实对于活动本身，只要搞定了场地问题，其他都不是问题了，时间选个周末，讲师大家一期安排。在这里感谢一下我所在 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队的另外两位创始人 &lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt; 允许我用工作时间来做这件事，感谢淘宝阿里技术协会(ATA)对社区的一贯支持和本次提供场地设备和茶歇点心，感谢 &lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 提供会议报名组织支持，感谢杭州 Ruby 社区的李建业 (&lt;a href="https://twitter.com/fswordlee"&gt;@fswordlee&lt;/a&gt;)，李华顺 (&lt;a href="https://twitter.com/huacnlee"&gt;@huacnlee&lt;/a&gt;)，武鑫 (&lt;a href="https://twitter.com/SaitoWu"&gt;@SaitoWu&lt;/a&gt;)和吕戈 (&lt;a href="https://twitter.com/night_song"&gt;@night_song&lt;/a&gt;) 一起组织活动。&lt;/p&gt;

&lt;p&gt;这次沙龙分享嘉宾阵容非常强大，分享主题非常有料，很有幸能得到他们的支持，特别是远道而来的曹力 (&lt;a href="https://twitter.com/shiningray"&gt;@ShiningRay&lt;/a&gt;) 和黄志敏 (&lt;a href="https://twitter.com/flyerhzm"&gt;@flyerhzm&lt;/a&gt;)。6 场演讲场场精彩，我这里小记一下。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Hangzhou Ruby Event May 11th" src="/images/ruby-event-5-11/event.jpg?1368509827" /&gt;&lt;/p&gt;

&lt;p&gt;上周六我们在杭州举行了面对长三角的小型 Ruby 爱好者沙龙，5 个小时，6 位分享嘉宾，70多位参与者，很好很强大。&lt;/p&gt;

&lt;p&gt;我个人很喜欢 Daniel 之前在上海搞的季度 ShanghaiOnRails 线下活动，给长三角的 Rubyists 提供了交流学习的时间和平台，每次参加都感觉收获不浅。可惜随着 Daniel 的退隐江湖，这个活动也就搁置了一段时间。上个月我和杭州 Ruby 社区的朋友聊了一下，决定在杭州也搞一期，希望未来有上海的朋友苏州的朋友也能牵头搞这件事，促进城际间的交流。其实对于活动本身，只要搞定了场地问题，其他都不是问题了，时间选个周末，讲师大家一期安排。在这里感谢一下我所在 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队的另外两位创始人 &lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt; 允许我用工作时间来做这件事，感谢淘宝阿里技术协会(ATA)对社区的一贯支持和本次提供场地设备和茶歇点心，感谢 &lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 提供会议报名组织支持，感谢杭州 Ruby 社区的李建业 (&lt;a href="https://twitter.com/fswordlee"&gt;@fswordlee&lt;/a&gt;)，李华顺 (&lt;a href="https://twitter.com/huacnlee"&gt;@huacnlee&lt;/a&gt;)，武鑫 (&lt;a href="https://twitter.com/SaitoWu"&gt;@SaitoWu&lt;/a&gt;)和吕戈 (&lt;a href="https://twitter.com/night_song"&gt;@night_song&lt;/a&gt;) 一起组织活动。&lt;/p&gt;

&lt;p&gt;这次沙龙分享嘉宾阵容非常强大，分享主题非常有料，很有幸能得到他们的支持，特别是远道而来的曹力 (&lt;a href="https://twitter.com/shiningray"&gt;@ShiningRay&lt;/a&gt;) 和黄志敏 (&lt;a href="https://twitter.com/flyerhzm"&gt;@flyerhzm&lt;/a&gt;)。6 场演讲场场精彩，我这里小记一下。&lt;/p&gt;

&lt;h5&gt;单兵如何打造日PV百万的网站架构&lt;/h5&gt;

&lt;p&gt;来自南京的曹力是现&lt;a href="http://baozoumanhua.com"&gt;暴走漫画&lt;/a&gt;的 CTO 和原&lt;a href="http://qiushibaike.com"&gt;糗事百科&lt;/a&gt;的联合创始人。暴走漫画目前日均 PV 过千万，可以想像对网站架构和性能优化带来的挑战。曹力介绍了几次主要的架构变迁，单机，百万 PV 时的挑战，千万 PV 下又是如何转变，演讲风趣生动，很有暴走之风。大家可以在这里查看 &lt;a href="http://vdisk.weibo.com/s/B5vle"&gt;PPT&lt;/a&gt;。因地制宜，善用 Cache，量化分析，摆事实，讲道理。会后跟曹力也交流了很多创业的想法，受益匪浅。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="4e6be5309da501308e951a9333edbc11" data-ratio="1.41436464088398" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;与 Obj-C 结婚，与 RubyMotion 恋爱&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://rubymotion.com"&gt;RubyMotion&lt;/a&gt; 绝对是目前 Ruby 界的超新星。随着越来越多的 Ruby 界知名公司如 &lt;a href="http://37signals.com/"&gt;37signals&lt;/a&gt;，&lt;a href="http://thoughtbot.com"&gt;ThoughtBot&lt;/a&gt; 用 RubyMotion 开发 iOS 产品，RubyMotion 博得了越来越多的眼球。而前几天发布的 v2.0 宣布了对 OSX 的支持，将把这把火持续的更旺盛的烧下去。来自阿里巴巴 Mac 实验室的李龑分享了他使用 RubyMotion 的经验和一些坑。值得关注的是，他整个 PPT 就是用 RubyMotion 做的一个应用。想知道 RubyMotion 到底有哪些魔力才能让一个文科出生的纪实摄影师转行成为一个 Mac 开发者的，请看这里。整个 PPT 的代码在 &lt;a href="https://github.com/eyeplum/motion-affair"&gt;https://github.com/eyeplum/motion-affair&lt;/a&gt;&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="6c0051009ebb0130dfb33efc707903f5" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;构建异步 API 服务&lt;/h5&gt;

&lt;p&gt;黄志敏是我们的老朋友了，基本以前每次这种线下活动都会给大家带来分享，也是目前国内在国际上知名的开源贡献者。黄志敏曾负责 OpenFeint 平台的基础设施，平台架构和服务器调优。在这次分享里，Richard 通过一个 demo 应用程序，比较了进程模型，线程模型，进程+线程模型，事件驱动模型和进程+事件驱动模型的实现差异和性能差别，也就很容易看出为什么要用异步方式构建 API 服务了。如果你对 Rails 的性能不满，那么这个分享会给你带来很多其他的选择。正如 Richard 而言，Ruby 可以做到性能好、并发高、开发效率高、维护性好，关键是你要用对东西。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="988c07e09d3501309d4f6e9dd498db92" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;Ruby 2.1 Walk Through&lt;/h5&gt;

&lt;p&gt;Ruby 大家都会用，但是却很少人会关心 Ruby 是怎么实现的，Ruby 的语言演进是如何的。这个主题的分享者吕戈却是个反例。在我看来，吕戈是科学家多于开发者，算是活在 Ruby trunk 上的人。他向我们介绍了 Ruby 2.0/2.1 的主要新特性和一些实现细节，当然也经常跑题&amp;hellip;. -.-  我们尊封吕戈为杭州 Ruby 社区的首席吐槽师不是没有道理的。话说回来，吕戈在这次主题分享中让我感受到了什么叫做知识渊博。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="7658f3109c6f0130377462ecddd7671a" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;实践中的 CI&lt;/h5&gt;

&lt;p&gt;分布式系统中如何实现 CI，尤其是对于一淘这种级别的大应用？如何保证多人协作过程中，CI 仍然能正确的执行？如何构建一个正确稳定的自动化分布式 CI 环境？这些问题，来自淘宝的李建业向我们介绍了他们在实践中的 CI 系统。最后那个讨论我尤其感兴趣，在 CI 系统中单元测试和集成测试所处的位置和的关系，单元测试是否是集成测试的必要条件。如果大家对详细内容感兴趣，可以看这里 &lt;a href="http://fsword.github.io/slide/ci_con/index.html"&gt;http://fsword.github.io/slide/ci_con/index.html&lt;/a&gt;。&lt;/p&gt;

&lt;h5&gt;中大型前端应用开发工具链&lt;/h5&gt;

&lt;p&gt;中大型前端应用开发应该如何做？这个主题的分享者武鑫最近半年多一直在做重前端应用，他分享了一些他的心得体会。在他看来，前端应用规模上去后，会有七方面的问题：JS 加载、命名空间污染、文件依赖关系、模块化、测试、Build、UX。武鑫介绍了解决这些问题可以使用的方法并给出了一个 demo，信息量很大，完全可以做成一个大主题演讲。有个观点很好，现在对于每个问题的解决方法都有很多种方案，我们是该选哪一种呢？这并不重要，重要的是你去解决了这个问题。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="c74b17309c6f0130246f226fb1014015" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;One More Thing&lt;/h5&gt;

&lt;p&gt;这次活动我们是有录像的，还需要花时间剪辑，之后会把视频放出来，敬请期待！感谢这次活动各位讲师的精彩演讲，希望活动能持续的办下去！会后我们也进行了亲切的会晤，气氛异常的热烈。&lt;/p&gt;

&lt;p&gt;&lt;img alt="After Event" src="/images/ruby-event-5-11/after-event.jpg?1368509827" /&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
