<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Voice of Dingding Ye</title>
  <subtitle>Share Fun, Life and Thoughts in Fengche.co</subtitle>
  <id>http://yedingding.com</id>
  <link href="http://yedingding.com/"/>
  <link href="http://yedingding.com/feed.xml" rel="self"/>
  <updated>2014-02-27T13:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>『风车』技术架构介绍</title>
    <link rel="alternate" href="/2014/02/27/fengcheco-architecture.html"/>
    <id>/2014/02/27/fengcheco-architecture.html</id>
    <published>2014-02-27T13:00:00Z</published>
    <updated>2014-02-27T13:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;&lt;img title="风车" alt="Fengche.co" src="/images/fengcheco-architecture/logo.png?1393869410"&gt;&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末，应邀在 &lt;a href="http://hnshanghai.com"&gt;Hacker News 上海聚会&lt;/a&gt;和 &lt;a href="http://shruby.github.io/"&gt;Ruby 上海活动&lt;/a&gt;上做了『风车』架构介绍的分享，在此感谢各位组织者和活动场地提供方。&lt;/p&gt;

&lt;p&gt;风车这个项目开始于 2011 年 11 月份，之前叫做 Pragmatic.ly。从第一天开始我们基本上就定了大致的框架结构，在今天回头看，基本上整个架构都没有什么变化，可以算是个很成熟和很适合时代的方案，☺。&lt;/p&gt;

&lt;p&gt;最近一两年，作为技术人员，我们都能很明显的感觉到前端技术的飞速发展，比如 HTML5 支持，移动端优先、响应式界面设计以及层出不穷的各种客户端框架。而所有，都是基于一点，浏览器的发展。Chrome、Firefox、Safari、Opera 甚至于 IE，最近几年发展的都很快，不夸张的说，这些浏览器已经不再是浏览器，而是成为开放平台，有各自的扩展插件机制。这些极大地改变了网站开发的方式，网站开始应用化。&lt;/p&gt;

&lt;p&gt;风车即是如此，设计得非常接近桌面应用，比如下面这些特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重客户端，所有的业务逻辑都在客户端，响应非常迅速&lt;/li&gt;
&lt;li&gt;单页系统，项目内操作不需要刷新页面，操作非常流畅&lt;/li&gt;
&lt;li&gt;三栏布局，左中右栏自左向右各司其职，信息非常清晰&lt;/li&gt;
&lt;li&gt;实时更新，项目内任何更新都会实时的同步到你的页面&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;而在这个设计的背后，就是其本身的技术栈。&lt;/p&gt;

&lt;h4&gt;总览&lt;/h4&gt;

&lt;p&gt;&lt;aside class="aside"&gt;&lt;img title="风车架构" alt="Fengche.co Overview" src="/images/fengcheco-architecture/arch.png?1393869410"&gt;&lt;/aside&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spinejs.com"&gt;Spine.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pusher.com"&gt;Pusher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;风车在客户端使用的是 Spine.JS，后端使用的是 Ruby on Rails。实时消息同步用的是 Pusher。(三个里面有两个因为莫名其妙的原因打不开… -.-)&lt;/p&gt;

&lt;p&gt;Spine.js 是一个轻量级的 MVC JavaScript 库，由&lt;a href="http://shop.oreilly.com/product/0636920018421.do"&gt;《Javascript Web Applications》&lt;/a&gt;的作者 &lt;a href="http://alexmaccaw.com"&gt;Alex MacCaw&lt;/a&gt; 基于 Backbone.js 改良。Spine 库是用 CoffeeScript 编写，整体代码量一千行左右，比起 Angular.js...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车" alt="Fengche.co" src="/images/fengcheco-architecture/logo.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末，应邀在 &lt;a href="http://hnshanghai.com"&gt;Hacker News 上海聚会&lt;/a&gt;和 &lt;a href="http://shruby.github.io/"&gt;Ruby 上海活动&lt;/a&gt;上做了『风车』架构介绍的分享，在此感谢各位组织者和活动场地提供方。&lt;/p&gt;

&lt;p&gt;风车这个项目开始于 2011 年 11 月份，之前叫做 Pragmatic.ly。从第一天开始我们基本上就定了大致的框架结构，在今天回头看，基本上整个架构都没有什么变化，可以算是个很成熟和很适合时代的方案，☺。&lt;/p&gt;

&lt;p&gt;最近一两年，作为技术人员，我们都能很明显的感觉到前端技术的飞速发展，比如 HTML5 支持，移动端优先、响应式界面设计以及层出不穷的各种客户端框架。而所有，都是基于一点，浏览器的发展。Chrome、Firefox、Safari、Opera 甚至于 IE，最近几年发展的都很快，不夸张的说，这些浏览器已经不再是浏览器，而是成为开放平台，有各自的扩展插件机制。这些极大地改变了网站开发的方式，网站开始应用化。&lt;/p&gt;

&lt;p&gt;风车即是如此，设计得非常接近桌面应用，比如下面这些特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重客户端，所有的业务逻辑都在客户端，响应非常迅速&lt;/li&gt;
&lt;li&gt;单页系统，项目内操作不需要刷新页面，操作非常流畅&lt;/li&gt;
&lt;li&gt;三栏布局，左中右栏自左向右各司其职，信息非常清晰&lt;/li&gt;
&lt;li&gt;实时更新，项目内任何更新都会实时的同步到你的页面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而在这个设计的背后，就是其本身的技术栈。&lt;/p&gt;

&lt;h4&gt;总览&lt;/h4&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车架构" alt="Fengche.co Overview" src="/images/fengcheco-architecture/arch.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spinejs.com"&gt;Spine.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pusher.com"&gt;Pusher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;风车在客户端使用的是 Spine.JS，后端使用的是 Ruby on Rails。实时消息同步用的是 Pusher。(三个里面有两个因为莫名其妙的原因打不开&amp;hellip; -.-)&lt;/p&gt;

&lt;p&gt;Spine.js 是一个轻量级的 MVC JavaScript 库，由&lt;a href="http://shop.oreilly.com/product/0636920018421.do"&gt;《Javascript Web Applications》&lt;/a&gt;的作者 &lt;a href="http://alexmaccaw.com"&gt;Alex MacCaw&lt;/a&gt; 基于 Backbone.js 改良。Spine 库是用 CoffeeScript 编写，整体代码量一千行左右，比起 Angular.js, Ember.js 这些框架来说少的多，非常容易学习和上手。&lt;/p&gt;

&lt;p&gt;Rails 目前我们在使用的还是 3.2 版本，基本上是用来做 API 服务器，只管数据，不做逻辑。上周活动有些朋友也问到基本只做 API 服务器，为啥不选用更轻量的方案如 Sinatra，Grape 之类。一是从开发上来说，Rails 默认这一套用起来比较舒服，我们除了 API 之外还有一些第三方应用的集成和管理性功能，所以整体建站更方便。二是我们目前还没遇到大的性能上问题，所以没必要去更换。如果下一阶段真有需要了，会把 RESTful API 专门独立出来。&lt;/p&gt;

&lt;p&gt;Pusher 是一个基于 WebSocket 的实时消息推送服务，集成到应用中也非常方便。即使在不支持 WebSocket 的浏览器里（对，没错，说的就是 IE），也有默认的备用方式，可选择 Flash Socket 或者 SockJS。整体体验来说，Pusher 算是一个很不错的解决方法，轻、快，给我节省了大量开发时间，只需要关注产品的核心价值。不过如果你的应用对于实时性要求非常严格，比如交易系统，可能 Pusher 的稳定性还不够符合你要求，因为你懂的一些网络原因。&lt;/p&gt;

&lt;p&gt;当浏览器刷新页面的时候，会向服务端发起一个请求。服务端收到这个请求后，会返回一个不带数据的纯 HTML 空模板。然后客户端渲染模板后，再次通过 RESTful API 向服务端请求项目的真实数据（json 格式），再由客户端对数据做处理并呈现，得到用户真正看到的页面。之后，会跟 Pusher 服务器建立一条 WebSocket 的长连接，接收推送信息。当服务端有任何更新的时候，会发送消息到 Pusher 服务器，再由 Pusher 服务器传输到客户端浏览器，页面同时也得到更新。以上，就是一个简单的过程。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车前端架构" alt="Fengche.co Frontend Overview" src="/images/fengcheco-architecture/frontend.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h4&gt;客户端&lt;/h4&gt;

&lt;p&gt;上面也介绍过了，风车的前端用的是 Spine.JS 和 jQuery。在移动端稍微有点不同，是 Spine.JS Mobile 和 Zepto。在目前这个时候，我计算了一下，压缩后的 JS 和 CSS，包括所有第三方的库，已经将近 270 KB。这里感谢一下&lt;a href="http://www.qiniu.com"&gt;七牛云存储&lt;/a&gt;，风车的这些静态文件因他们的 CDN 服务，能很快的下载到用户端，加速页面的加载。&lt;/p&gt;

&lt;h5&gt;Spine.JS&lt;/h5&gt;

&lt;p&gt;Spine 上面已经介绍了不少，这里再介绍一个我很喜欢的特性：&lt;em&gt;Asynchronous interfaces&lt;/em&gt;。当我们决定把逻辑从服务端移到客户端的时候，就是要提高用户的整个使用体验，要能非常迅速的对用户行为做出响应。所以，当用户做了一个操作更新数据的时候，不要再显示个 loading spinner，让用户去等待数据更新完毕，而是应该立刻给出页面的变化。这就是异步 UI，通过解耦客户端 UI 交互跟服务端数据同步，保证了交互的流畅性。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="CoffeeScript" src="/images/fengcheco-architecture/dhh-coffee.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;CoffeeScript + Eco&lt;/h5&gt;

&lt;p&gt;这里真的很佩服 DHH，当时力排众难固执地在 Rails 3 里面默认加入了 CoffeeScript，让 CoffeeScript 迅速地流行起来。Coffee 是那种一用就能上瘾的东西，我们几乎所有的 JS 代码都是用 Coffee 写的，最后编译出来的纯 JS 代码也很具有可读性。即使是让人诟病的调试复杂度，对于熟悉代码结构和 Coffee 的人来说从不是问题，更不用说现在还提供了 &lt;a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;Source Maps&lt;/a&gt; 的支持。&lt;a href="https://github.com/sstephenson/eco"&gt;Eco&lt;/a&gt; 是 &amp;ldquo;Embedded CoffeeScript templates&amp;quot;，语法跟 ERB 很像，作为一个 Ruby 开发人员没法不喜欢，:)&lt;/p&gt;

&lt;h5&gt;Model-View-Controller&lt;/h5&gt;

&lt;p&gt;从 MVC 框架来说，Controller 层，主要负责接受请求并处理请求，对应到客户端，请求就是事件，所以 Controller 负责对 DOM 事件的处理和 Router 事件的处理。基于此，风车前端有两种类型的 Controller，一种是跟页面 DOM 打交道的，一种是跟路由打交道的。基于 DOM 的 Controller 是按照页面的结构设计，每个 Controller 对应于一个单独的 DOM 模块，比如风车里面的侧边栏对应一个 Controller，侧边栏里面的任务列表部分和团队成员部分又分别对应一个 Controller，等等。这些 DOM Controller 会监视 DOM 上事件的发生，以及 DOM 对应的数据的更新。而基于 Router 的 Controller 是按照 URL 来设计，用来监视页面 URL 的变化，比如每一项任务都对应于一个单独的 URL，那么点击行为会导致 URL 的变化，这个变化会被 Router Controller 捕捉到，执行相应的操作，整个过程跟 Dom 没有任何关系。&lt;/p&gt;

&lt;p&gt;Model 层，负责所有跟数据有关的处理。绝大多数时候，数据是 URL 对应，所以 Model 层绝大多数时间只需要跟 Router Controller 交互。Router Controller 从 Model 准备好数据后，会触发一个事件，交由 DOM Controller 去渲染相应的页面。&lt;/p&gt;

&lt;p&gt;除了 MVC 三层之外，风车在设计上还使用了很多 HTML5 的特性，除了之前介绍的 WebSocket 之外，还有 History、Web Notification、Drag &amp;amp; Drop 和 LocalStorage。&lt;/p&gt;

&lt;h5&gt;HTML5 History pushState&lt;/h5&gt;

&lt;p&gt;History 是 Router Controller 的实现基础。我们都已经很习惯了浏览器页面的前进后退来访问历史页面。而很多富客户端应用因为 URL 没有发生改变，就很难支持这点。HTML5 History 就是为了解决这个问题，而在 JavaScript 端的一个实现。当我们访问下一个页面的时候，会 push 这个 URL 到栈里，当我们按后退的话，会 pop 出这个 URL。Router Controller 需要定义一系列要响应的 URL，这样一旦匹配，就会截获页面跳转，转而去执行相应的代码，渲染出对应数据。所以在风车里，每次页面的修改都是对应一个唯一的 URL，这样除了可以前进后退外，还有个额外的好处是刷新页面后，总是可以回到刷新前的 URL。当然，需要在客户端和服务端用同一套路由。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Web Notification" src="/images/fengcheco-architecture/feature-notification.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;HTML5 桌面通知&lt;/h5&gt;

&lt;p&gt;Web Notification 是桌面端的通知，当一个跟用户相关的事件发生时，比如团队里有人分配了一个任务给你，有人在讨论里 @ 了你，就会收到一个通知。目前 Chrome 和 Safari 已经直接支持 Web Notification，Firefox 最新版已经支持，老版本需要安装一个插件支持，而 IE 在 10 以上才支持，而且必须加入 pinned site 列表里。具体的可以参考我之前在&lt;a href="https://fengche.co/blog/its-not-perfect-but-its-time-to-integrate-web"&gt;风车官方博客&lt;/a&gt;里面写的这篇详细介绍 HTML5 Web Notification 的文章。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Drag &amp;amp; Drop" src="/images/fengcheco-architecture/dnd.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;HTML5 拖放&lt;/h5&gt;

&lt;p&gt;Drag &amp;amp; Drop 之前已经有很多 JS 的实现了，比如 jQuery UI 里面就有 DnD 的支持，HTML5 在规范制定的时候，也把 DnD 加入了进来，做了标准化。风车里面是用的 HTML5 的规范，主要用于把任务拖到某个任务列表里，某个成员里和拖到同个列表不同的位置。&lt;/p&gt;

&lt;h5&gt;有限离线支持&lt;/h5&gt;

&lt;p&gt;上面也介绍了，Spine 里面有个特性是异步 UI，但是如果我们跟服务器之间的连接出现短暂的问题，比如网络断了，那么就会在客户端更新了，但是服务端却没有同步到，这样用户一刷新，就会发现丢数据了。我们针对这个情况，一般发现同步失败，就先把未同步的数据放到 LocalStorage 里面，每隔一段时间重试一下，只到同步成功。所以，在页面加载后，即使离线情况下，短暂时间使用风车也不是问题。但是，因为我们目前实现的很有限，也没做版本控制系统，所以在极端情况下，比如团队里不同人对同一个任务做出了更新，后同步的数据会覆盖掉先同步的。因为这种情况很少发生，所以目前我们没花大时间去改进他。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车后端架构" alt="Fengche.co Backend Overview" src="/images/fengcheco-architecture/backend.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h4&gt;服务端&lt;/h4&gt;

&lt;p&gt;风车的整个服务端是基于 Ruby on Rails，前面也已经给了一些介绍。我在之前的&lt;a href="http://yedingding.com/2013/03/04/steps-to-refactor-controller-and-models-in-rails-projects.html"&gt;重构 Rails 项目之最佳实践&lt;/a&gt;介绍了一些可以用来写出更好的代码结构的方法。在风车中，我们也在标准的 MVC 三层之外，加了 Service 层和 Presenter 层。&lt;/p&gt;

&lt;h5&gt;Service Layer&lt;/h5&gt;

&lt;p&gt;为了保持 Controller 结构的尽可能简单，所以对于一些复杂的请求处理逻辑，同时这些逻辑又不仅属于某个 Model，我们在 Controller 和 Model 之间引入了新的一层：Service 层。举个例子，风车目前集成了 GitHub、GitLab 和 BitBucket 的 hook。当用户向远端推送提交的时候，GitHub/BitBucket 会向风车的服务器发起一个请求，包含这些提交的信息。在风车这边收到这些请求的时候，首先需要去做特征判断，查明是来自于哪一个服务。然后分析推送消息，是否绑定到具体的任务。最后根据消息，判断是否要更新状态和创建讨论。整个处理的逻辑比较复杂又相对独立，涉及多个 Model 并且有多种不同的策略，非常适合抽象成一个 Service。另外的一些场景比如 Analytics Service，Password Service，Email Handler Service 等。&lt;/p&gt;

&lt;h5&gt;Presenter Layer&lt;/h5&gt;

&lt;p&gt;熟悉 Rails 开发的朋友一般都知道，View 层应该仅仅是用来显示数据，我们应该避免在 View 里面有逻辑。但是，很多时候会不可避免的会有一些很难维护的 View。去年 RubyConf China 2013，来自台湾的讲师 xdite 就介绍了如何写出可维护的 View，详见&lt;a href="https://leanpub.com/rails-view-book"&gt;这里&lt;/a&gt;。不过对于风车而言，大量的 View 是在客户端，服务端很少，只是提供了一些数据准备，所以没用多少技巧。只是因为数据准备涉及到了多个 Model 的数据以及来自于 Redis 数据库里面的数据，所以我们独立出了 Presenter Object，用来管理这些逻辑，而不是放在 View 里面。&lt;/p&gt;

&lt;h5&gt;Observer&lt;/h5&gt;

&lt;p&gt;Observer 一般而言是监控数据的，当数据创建、更新或者删除时，可以执行一些相应的操作，比如用户注册后可以发送注册邮件。但是风车里面的 Observer 有些许不同，除了监控数据以外，我们还监控 Controller，来了解数据变化相对应的请求信息，比如操作用户是谁。这里主要借鉴了 Rails 自带的 Caching Sweeper，后面我们会专门写一篇文章来介绍。&lt;/p&gt;

&lt;h5&gt;Sidekiq&lt;/h5&gt;

&lt;p&gt;Sidekiq 是一个简单强大的消息队列系统，目前可以说是 Ruby 世界里后台处理的首选。同类的选择还有 resque、delayed_job 等，但是 Sidekiq 之所以能迅速成为首选是基于两个特点，一是基于 Actor 模式的并行处理机制，二是基于 Redis 的 pubsub 模型，所以能用更少的内存资源来获得一样的处理能力。在风车里只要是能延迟的操作我们就会全放到后台执行，比如发送通知、数据统计、创建初始数据等等。这样子，我们就能让每个请求在最短的时间内完成，提高整个系统的吞吐量。Sidekiq 在收到消息后会在后台处理，即使失败了也会重试，更加可靠。&lt;/p&gt;

&lt;h5&gt;Percona&lt;/h5&gt;

&lt;p&gt;风车的主数据库还是使用了关系数据库 Percona，是基于 MySQL 的一个分支，但是因为使用了 Percona 公司自己研发的 XtraDB 存储引擎，具有更好的性能。另外一点好处是 Percona 号称是最接近官方 MySQL Enterprise 发行版的版本，可以完全与 MySQL 兼容，我可以很方便的做切换而不用修改代码。&lt;/p&gt;

&lt;h5&gt;Redis&lt;/h5&gt;

&lt;p&gt;Redis 在风车里面主要是两个用途：1. 用作 Caching Store，存储 View Cache 和 Record Cache 2. 加速数据访问，在内存中存储一些会频繁读写的数据，减少对 Percona 数据库的访问，比如 UID 映射表、统计信息之类。使用 Redis 而不是 Memcached 的原因是首先 Redis 的数据是持久的，不会因为重启而丢失，因为我们有一些无法立刻重建的数据，比如用户的在线状态，第二点是 Redis 可以用来存储一些复杂数据结构，比如 List 和 Set，对于统计信息来说非常合适。今年 Redis 3.0 有望正式发布，到时有 Redis Cluster 的支持，可以期待带来更好的性能。&lt;/p&gt;

&lt;h4&gt;结语&lt;/h4&gt;

&lt;p&gt;目前来说，我相信这套架构还能让我们撑不少时间，也可以很方便的做水平扩展。对于一个技术驱动型团队，这是我们的优势，也是对待事情应有的态度。感谢所有风车使用到的开源软件和在线服务，才能让我们这么&amp;quot;小&amp;quot;的一个团队，能有更好的时间专注在产品的核心价值上，节省时间去做&amp;quot;大&amp;quot;事。作为一个团队协作工具，风车也想帮助你们更好的工作。如果你懂得时间的价值，那么你应该使用风车来管理你的项目。风车，让协作更简单，让协作更高效。&lt;/p&gt;

&lt;p&gt;应很多用户要求，我们最近也开放了一个免费的计划，可以说对于大多数团队开始使用风车都绰绰有余。有想法吗？&lt;a href="https://fengche.co"&gt;现在就试试吧&lt;/a&gt;！&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
欢迎交流！我可以针对一些常见的问题我来写 (二)，(三) 等。
&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>远程工作，你准备好了吗？</title>
    <link rel="alternate" href="/2014/01/17/are-you-ready-for-remote-work.html"/>
    <id>/2014/01/17/are-you-ready-for-remote-work.html</id>
    <published>2014-01-17T10:55:00Z</published>
    <updated>2014-01-17T10:55:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;&lt;blockquote&gt;
    &lt;p&gt;本文摘自我发表在 &lt;a href="http://programmer.csdn.net/"&gt;《程序员》&lt;/a&gt; 杂志 12 月刊里的文章。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;10 月 29 号，著名洗脑公司 &lt;a href="http://37signals.com/"&gt;37signals&lt;/a&gt; 发布万众期待的新书 &lt;a href="http://37signals.com/remote/"&gt;《Remote - Office Not Required》&lt;/a&gt;，随书 37signals 发布新网站 &lt;a href="http://weworkremotely.com"&gt;http://weworkremotely.com&lt;/a&gt;，专门做远程工作招聘服务。回想年初，Yahoo 宣布取消远程工作方式时，舆论哗然，远程工作是否适合互联网团队，曾在 IT 圈引起激烈讨论，却着实让人对远程工作充满了憧憬。而现在年底 37signal 的新书，必然会让远程工作这把火燃烧得更旺盛。&lt;/p&gt;

&lt;p&gt;对于个人而言，要开始远程工作是一件很容易的事情，就像我在 07 年的时候觉得每天朝九晚五不是我所期望的工作方式，我需要更大的刺激，所以直接从网易离职，然后在网上寻找远程的工作机会，从个人做自由职业者接项目到参与到一家坚持远程工作的公司，再到现在创业做 &lt;a title="简单高效的团队协作工具" href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 团队协作工作，整个过程选择哪个工作方式的自主权都在我自己这。说服自己的成本比起说服别人的成本可远远小多了。所以，要让公司层面接受远程工作这种新兴的工作方式是个更艰难的决定和更漫长的过程。所以尽管最近半年发现使用远程工作方式的国内 IT 公司开始慢慢变多，但是整体上这种工作方式的公司比例还是非常少。我们可以做个假设，如果你随便去一家公司，问所有员工想不想远程工作，我想答案多半是 “为什么不”，但是你问公司领导要不要远程工作，多半答案会是”为什么要"。对，为什么要？但是如果100% 知道远程工作能带来更好的工作质量，但是会有一段初期的阵痛期，你会选择尝试一下吗？可能会有部分的人的答案是“可能吧”，没有人会拒绝更好。所以，最主要的疑虑在于能不能带来更好的工做质量，也不知道这个是不是适合，而这个不适合是他不确定员工在远程的情况下还能仍然像在办公室里一样很好的完成工作，...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;blockquote&gt;
    &lt;p&gt;本文摘自我发表在 &lt;a href="http://programmer.csdn.net/"&gt;《程序员》&lt;/a&gt; 杂志 12 月刊里的文章。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;10 月 29 号，著名洗脑公司 &lt;a href="http://37signals.com/"&gt;37signals&lt;/a&gt; 发布万众期待的新书 &lt;a href="http://37signals.com/remote/"&gt;《Remote - Office Not Required》&lt;/a&gt;，随书 37signals 发布新网站 &lt;a href="http://weworkremotely.com"&gt;http://weworkremotely.com&lt;/a&gt;，专门做远程工作招聘服务。回想年初，Yahoo 宣布取消远程工作方式时，舆论哗然，远程工作是否适合互联网团队，曾在 IT 圈引起激烈讨论，却着实让人对远程工作充满了憧憬。而现在年底 37signal 的新书，必然会让远程工作这把火燃烧得更旺盛。&lt;/p&gt;

&lt;p&gt;对于个人而言，要开始远程工作是一件很容易的事情，就像我在 07 年的时候觉得每天朝九晚五不是我所期望的工作方式，我需要更大的刺激，所以直接从网易离职，然后在网上寻找远程的工作机会，从个人做自由职业者接项目到参与到一家坚持远程工作的公司，再到现在创业做 &lt;a title="简单高效的团队协作工具" href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 团队协作工作，整个过程选择哪个工作方式的自主权都在我自己这。说服自己的成本比起说服别人的成本可远远小多了。所以，要让公司层面接受远程工作这种新兴的工作方式是个更艰难的决定和更漫长的过程。所以尽管最近半年发现使用远程工作方式的国内 IT 公司开始慢慢变多，但是整体上这种工作方式的公司比例还是非常少。我们可以做个假设，如果你随便去一家公司，问所有员工想不想远程工作，我想答案多半是 “为什么不”，但是你问公司领导要不要远程工作，多半答案会是”为什么要&amp;quot;。对，为什么要？但是如果100% 知道远程工作能带来更好的工作质量，但是会有一段初期的阵痛期，你会选择尝试一下吗？可能会有部分的人的答案是“可能吧”，没有人会拒绝更好。所以，最主要的疑虑在于能不能带来更好的工做质量，也不知道这个是不是适合，而这个不适合是他不确定员工在远程的情况下还能仍然像在办公室里一样很好的完成工作，至少看上去很好的在完成工作，尤其是几十年的经历告诉了我们在办公室工作是“正确”的工作方式。我这里用了“不确定”，而不是“不相信”。如果一家公司是不相信的话，那只能证明公司找了错误的人，还有人进了错误的公司。下面来谈谈公司采用远程会有哪些好处。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Remote: Office Not Required" src="/images/are-you-ready-for-remote-work/remote_front.png?1389984911" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;远程工作的好处&lt;/h3&gt;

&lt;h4&gt;更好的团队成员&lt;/h4&gt;

&lt;p&gt;招聘难在现在看来是个永恒的话题，公司一直在寻找靠谱的人才，靠谱的人却有不同的机会做选择。前不久，有个香港的朋友招人，接受远程工作，一个下午收到十几二十封简历，看上去都是很不错的人，而这些是他在香港本地不敢想的。又比如我上一家公司 Intridea，公司有三十多个人，分布在华盛顿、加州、马里兰、北京、上海、杭州、福州、常州、阿根廷、巴西、乌克兰等十几个地方，且在我看来都是非常优秀的工程师，相反在公司所在地华盛顿，几乎招不到人。所以一旦采用远程工作，你的招聘将不受地域所限，而是直接面向世界各地。同时，远程工作能让团队更稳定，比如程序员都梦想去的公司 GitHub，自创立以来没有一个员工离职，我敢说这里面就有远程工作的功劳。&lt;/p&gt;

&lt;h4&gt;更少的运营成本&lt;/h4&gt;

&lt;p&gt;我记得我第一次到 Intridea 在 DC 的办公室以后，第一感觉是怎么这么小的一个地方，整个基本就是一厅两室五六十平方，还不如我自己家里，而这就是一个有三四十号员工的公司，一个已创立四年的公司，年营收将近千万美元，每天都在飞速运转飞速发展。而对比着如中关村、硅谷这样的地方，你要一间能容纳三四十号员工的场地，至少要百万人民币级别一年。所以一旦远程的话，你已经不需要在 CBD 有一个大办公室了，你的员工也会因此省下一大笔的居住成本，这也意味着你更有可能以更低的薪资水平招到更好的人。比如我有些朋友，就选择了降薪离开了北京，虽然还是在同一家公司，做同样的事情。&lt;/p&gt;

&lt;h4&gt;更多的工作时间&lt;/h4&gt;

&lt;p&gt;我没在大城市工作过，最主要的是我不愿意在交通上浪费过多时间，那些我原本可以用来更好工作和学习的时间。很简单的一个算术，假设一个工程师的一天工作时间是 8 小时，有效工作时间一般是 4 到 5 个小时，然后大城市如北京上海一个人一天平均花在交通上的时间是 2 到 3 小时，有没有发现只要一对比那是多么可怕的事实，更不要说人在花了一个半小时后到办公室后是怎样的一个疲劳状态。而远程工作者们一般是这样的一个工作状态，早上从从容容地醒来，吃完早饭泡上一杯茶，精神饱满地开始一天的工作。傍晚时，会出去健身跑步等等，然后回来洗个澡吃完晚饭继续扫尾，从绝对时间上来说，每天能多做很多事。当然，更不要提那些无法区分工作时间和个人时间的远程家伙们，简直个个都是代码狂魔，每天工作十到十二小时是家常便饭的事。&lt;/p&gt;

&lt;h4&gt;更好的工作效率&lt;/h4&gt;

&lt;p&gt;当然，我们要说工作不是只拼时间，要拼效率。但是从工作效率上来说，远程工作者的效率会更多。我去课程格子办公室拜访的时候发现他们专门有个“高产室 (productivity city)”，天放介绍这个是专门给一些员工要独处专注做事的时候提供的，里面有三大规矩。一是不能说话，也就是不需要面对面沟能，二是手机必须静音，三是不能超过三个人的，也就是降低人之间的干扰。在我看来就是在尝试一种变相的远程工作方式。要高效，首先得专注，而专注就需要没有干扰，减少上下文切换。但是在办公室里，人会时不时的被走动的同事，被交谈中的同事所干扰，时间被切成很多个碎片，每次都要重新去回顾上个碎片时做到什么程度了，效率必然低下。所以我有做 CTO 的朋友白天只跟同事交流要做什么事情和指导，所以技术性的编码工作都留到下班后晚上独处的时候完成。&lt;/p&gt;

&lt;h4&gt;更全的用户支持&lt;/h4&gt;

&lt;p&gt;月初跟 Basho 的 Eric Redmond 聊起他们公司的人员情况，介绍到他们在美国，欧洲和日本都有分公司，这样子跨时区远程协作，一个很大的好处是当美国的同事去休息的时候，日本的同事可以像客户提供用户支持，反之也一样，所以他们能做到工作日 7x24 的用户支持，这对于做产品的人来说是多么美好的事。所以，如果你需要人做更全的用户支持，与其招人三班倒，何不考虑尝试招一个跨时区的员工呢？&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Remote Working Solution" src="/images/are-you-ready-for-remote-work/fengcheco.png?1389984911" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;要注意和解决的问题&lt;/h3&gt;

&lt;p&gt;凡事都是双面的，有利必有弊，那么远程工作会有什么缺点呢？首当其冲的是沟通效率变差。不可否认，面对面交流永远是最好的沟通方式，因为沟通除了语言以外，还有肢体上的，表情上的，而这些是远程工作的软肋，更不要说现在很多团队沟通基本还是靠吼。所幸的是，现在已经有了很多的科技手段来降低沟通成本，也越来越多的人出来分享在远程工作团队解决沟通问题的经验。也正因为沟通成本的提高，却会让你重新审视每次沟通的必要性，也会让你尽可能地去高效沟通，比如沟通前一定要想清楚为什么而沟通，也就是沟通的目地，沟通时如何最好的表达观点、减少误会，也就是沟通的过程，结束后也会去记录沟通的结果，沉淀下来。还有一个缺点就是缺乏全局的掌控，项目如何管理，信息如何同步和更新。因为远程工作的缘故，一些本来在办公室很容易干的事情比如会议、比如状态查看都需要换个全新的方式去执行和适应，这个的确是个大问题，也是现在很多新型的协作工具希望去解决的问题，如 HipChat、Fengche.co 等。下面我介绍一下我们是如何解决这些问题的。&lt;/p&gt;

&lt;h4&gt;沟通交流问题，如何达到或接近面对面沟通效果&lt;/h4&gt;

&lt;p&gt;按照事情轻重缓慢来分，我们把沟通分成了四类。第一种是重要而紧急的沟通，第二种是重要而不紧急的沟通，第三种是不重要而紧急的沟通，第四种是不重要而不紧急的沟通。只有对于第一类沟通，我们才会采用安排时间会议的方式，而其它会用文字异步沟通，甚至审视沟通的必要性。在工具上，我们主要用 Skype、HipChat 和 Fengche.co，基本不用 email 来沟通。&lt;/p&gt;

&lt;p&gt;Skype，语音会议工具，当我们需要做方向性的头脑风暴，做每周计划安排或者站立会议的时候。这些保证整个团队要往同一个地方使力的沟通，重要且紧急，直接语音远比文本高效。会议工具其实也做过不少，比如 WebEx，GoToMeeting，Join.me，但是 Skype 胜在足够简单并且语音质量足够用。&lt;/p&gt;

&lt;p&gt;HipChat，群组聊天工具，超好用，而且可以很方便的跟第三方服务做集成。我们基本上在上面讨论事情和共享信息，当然也会扯扯淡。我最喜欢 HipChat 的地方是它够纯净，干干净净的一个工作空间，没有一丝干扰，不像 QQ 一样揉杂了个人空间和工作空间，动不动就收到个人聊天消息的影响。只有给团队提供了一个能专注的工具，才能让他们有专注工作的可能性。&lt;/p&gt;

&lt;p&gt;而具体做的事情或者任务的沟通，大多属于重要而不紧急的沟通，Fengche.co 就很适合。如果在某个任务上需要讨论，直接在该任务下留言就可以了，相关的人在得到通知后会参与进来讨论。这样，也不会出现某两个人之间讨论了，其他团队成员不知情导致重复沟通的情况。&lt;/p&gt;

&lt;h4&gt;项目管理问题，如何管理让项目朝好的方向发展&lt;/h4&gt;

&lt;p&gt;在项目管理上，务实第一，至于算不算 Scrum，Kanban, Scrumban 抑或 XP 这些流程并不重要，重要的是要找到适合团队的，这个也是一个不停的迭代改进的过程。我们实践下来，有很多的模式，比如类 Kanban 流程，Git 工作流，持续发布，代码审核，都是能很好的促进项目健康良好发展的方式。在项目管理工具上，我们希望要能 HipChat 这种聊天工具一样，是一个能专注工作高效工作的工具。这也是我们创造和使用 Fengche.co 的原因，让工具回归到最初的目的，真正地帮助团队工作，让团队尽可能少的浪费时间在工具上，而不是为了用而用，目前来看是最适合中小型开发团队的轻量级项目管理工具。&lt;/p&gt;

&lt;p&gt;项目管理上也会涉及到文档知识管理，目前来看 Dropbox 是一个很不错的选择，分享公司内部文档，书籍和一些设计稿再合适不过了。我就喜欢这些只做好一件事情的工具产品。&lt;/p&gt;

&lt;h4&gt;信息同步问题，如何了解团队每个人的当前状态&lt;/h4&gt;

&lt;p&gt;信息同步主要包括两个方面，你目前个人的状态是如何的，你接下来有哪些计划？这样整个团队才能保持一样的节奏，能做出是合适的安排，不至于出现因为信息不同步造成计划失控，或者互相等待的情况。了解一个项目的状态是容易的，因为指标是明显的，但是了解一个团队的状态就相对难的多，尤其是当团队在多项目同时在跑的时候，远程时特别容易出现某些人任务过载或者某些人任务过少。要解决这个问题，还是要靠工具，我们也是用 Fengche.co，来了解团队里所有人的当前状态。而计划，我们使用公司日历，每个人有事情不在工作时间需要直接在日历里面添加一个事项，这样做计划的时候就会看到，可以增加一些备份选择。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Are you ready" src="/images/are-you-ready-for-remote-work/ready.jpg?1389984911" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;你准备好了吗？&lt;/h3&gt;

&lt;p&gt;我有足够的理由相信，未来人们有权利和有资本选择在什么地方和什么时候工作，不接受远程工作的公司会慢慢落后，尤其是新的一代人成长起来的时候，所以如果想尝试一下看看这是不是一个更好的方式，可以慢慢的改变看看是否能适应，比如“高产室”，比如每周先减至 4 天在办公室工作，然后 3 天，2 天，每次调整前大家明确下目标，为啥要怎么做，如何能做到最好，遇到哪些问题，可以怎么解决，不断的总结，不断的改进，那么真正的全部远程工作会水到渠成。迈出了这一步，一切将变得容易，一切将得到改变。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>不要让办公室成为你的效率杀手</title>
    <link rel="alternate" href="/2013/12/03/improve-productivity-in-office.html"/>
    <id>/2013/12/03/improve-productivity-in-office.html</id>
    <published>2013-12-03T08:00:00Z</published>
    <updated>2013-12-03T08:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Productivity City" src="/images/improve-productivity-in-office/productivity-city.png?1386091073" /&gt;&lt;/p&gt;

&lt;p&gt;上个月在北京的时候去拜访了一下&lt;a href="http://litianfang.com/"&gt;天放&lt;/a&gt;，&lt;a href="http://kechenggezi.com"&gt;课程格子&lt;/a&gt;有两项措施我特别喜欢，一个是 productivity city，如上图，是在办公室里隔出来的非常独立的一个小房间，里面不准说话，手机必须静音，同时这个房间不能超过三个人。天放介绍了一下这个是给团队成员需要专注工作时提供的一个特殊场所。另一点是天放给所以员工提供了住房补贴，鼓励团队的人住在公司边上，这样就可以不用浪费时间在交通上，以一个饱满的状态进入工作状态。&lt;/p&gt;

&lt;p&gt;我之所以喜欢远程工作，正是因为能让我独处专注地工作和不用花时间在交通上，工作更高效，这也是我为什么认为办公室很容易成为效率杀手的原因。而这两项措施非常聪明，在我看来正是在减少办公室的副作用，最大化办公室的正向作用。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The most valuable asset of a 21st-century institution, whether business or non-business, will be its knowledge workers and their productivity. Knowledge worker productivity is the biggest of the 21st century management challenges.&amp;ldquo; - Peter Drucker &lt;a href="http://www.amazon.com/Management-Challenges-Century-Peter-Drucker/dp/0887309992"&gt; 「Management Challenges for the 21st Century」&lt;/a&gt;
 &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;其实不管是远程办公还是本地办公，最终的诉求都是要更高效的工作，提供更好的工作成果。但是，怎样才算是更高效，更好的工作成果？最直觉的评判是，像我们做 Consulting 的时候按照时薪计费，看 Terry 的 &lt;a href="http://terrytai.com/salary-from-50rmb-to-100usd"&gt; 「我如何把薪水从 50 人民币/天提升到 100 美元/小时的」&lt;/a&gt; 系列文章，那么，是否是我们在一个小时内有更多的产出就是高效？ 如果是体力工作者，可以说是对的，比如富士康车间，一个工人生产出了更多的机器就可以认为是更高效。但是对于脑力工作者&amp;hellip;. 这不科学啊，因为除了数量还有质量，同样是我们，不能说是写了更多行的代码就是更高效，也不能说是完成了更多个功能就是更高效，抑或其他。所以，只能依赖一些不靠谱的可以量化的数据，比如在办公室呆了多久。但是，有一点每个人都会知道的是，办公室是不是你工作效率最高的地方？停下来仔细想想，我相信很多人会说不是，比如很多工程师在夜深人静时，编码如泉涌，两三个小时做的事会等于或者超过白天在办公室的八个小时。所以，如何提高在办公室的工作效率，如何科学使用办公室资源，是一个很值得团队思考的问题。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Productivity City" src="/images/improve-productivity-in-office/productivity-city.png?1386091073" /&gt;&lt;/p&gt;

&lt;p&gt;上个月在北京的时候去拜访了一下&lt;a href="http://litianfang.com/"&gt;天放&lt;/a&gt;，&lt;a href="http://kechenggezi.com"&gt;课程格子&lt;/a&gt;有两项措施我特别喜欢，一个是 productivity city，如上图，是在办公室里隔出来的非常独立的一个小房间，里面不准说话，手机必须静音，同时这个房间不能超过三个人。天放介绍了一下这个是给团队成员需要专注工作时提供的一个特殊场所。另一点是天放给所以员工提供了住房补贴，鼓励团队的人住在公司边上，这样就可以不用浪费时间在交通上，以一个饱满的状态进入工作状态。&lt;/p&gt;

&lt;p&gt;我之所以喜欢远程工作，正是因为能让我独处专注地工作和不用花时间在交通上，工作更高效，这也是我为什么认为办公室很容易成为效率杀手的原因。而这两项措施非常聪明，在我看来正是在减少办公室的副作用，最大化办公室的正向作用。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;blockquote&gt;
    &lt;p&gt;The most valuable asset of a 21st-century institution, whether business or non-business, will be its knowledge workers and their productivity. Knowledge worker productivity is the biggest of the 21st century management challenges.&amp;ldquo; - Peter Drucker &lt;a href="http://www.amazon.com/Management-Challenges-Century-Peter-Drucker/dp/0887309992"&gt; 「Management Challenges for the 21st Century」&lt;/a&gt;
 &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;其实不管是远程办公还是本地办公，最终的诉求都是要更高效的工作，提供更好的工作成果。但是，怎样才算是更高效，更好的工作成果？最直觉的评判是，像我们做 Consulting 的时候按照时薪计费，看 Terry 的 &lt;a href="http://terrytai.com/salary-from-50rmb-to-100usd"&gt; 「我如何把薪水从 50 人民币/天提升到 100 美元/小时的」&lt;/a&gt; 系列文章，那么，是否是我们在一个小时内有更多的产出就是高效？ 如果是体力工作者，可以说是对的，比如富士康车间，一个工人生产出了更多的机器就可以认为是更高效。但是对于脑力工作者&amp;hellip;. 这不科学啊，因为除了数量还有质量，同样是我们，不能说是写了更多行的代码就是更高效，也不能说是完成了更多个功能就是更高效，抑或其他。所以，只能依赖一些不靠谱的可以量化的数据，比如在办公室呆了多久。但是，有一点每个人都会知道的是，办公室是不是你工作效率最高的地方？停下来仔细想想，我相信很多人会说不是，比如很多工程师在夜深人静时，编码如泉涌，两三个小时做的事会等于或者超过白天在办公室的八个小时。所以，如何提高在办公室的工作效率，如何科学使用办公室资源，是一个很值得团队思考的问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在我看来，办公室得到的是沟通效率，失去的是工作效率。&lt;/p&gt;

&lt;p&gt;沟通分很多方式，除了语言，还有肢体的、表情的、眼神的交流，所以当大家在一起的时候，沟通会更高效，但是却不能滥用。作为一个多年的远程工作者，只有两件事情是我觉得非常希望大家是在一起面对面沟通的，第一种是在大方向选择如何前进时的沟通，因为需要统一思想，用最小的时间达成一致，第二种是需要结对找问题的时候，大家对着一块屏幕直接交流，在一起能省不少口舌和时间。其他情况，真不是那么重要，反而一不小心会坏事。比如当我跟团队一起在办公室的时候，有时有什么事情就不经大脑思考地立刻提出来：“Terry 啊, 你看这个事情 @!@￥＃%&amp;amp;￥！@＃￥%＊&amp;amp;”，Terry 会茫然的抬起头看着我，然后心不在焉地回了几句，一来一回过段时间才进入真正地沟通状态。既粗暴地打断了正在专心做事的同事，同时也因为没想清楚要讨论的事情导致了沟通延长。所以，我们团队会不断地提醒自己，如果要沟通，一定要多想一步甚至几步，想清楚后再找人，这样才能最高效。我在运营 &lt;a href="http://fengche.co"&gt;Fengche.co&lt;/a&gt; 时接触过不少用户，认为大家都在一个办公室，有什么事情拍拍肩膀直接说就够了，这样最高效。其实很不高效，一定要想清楚，这个事情是不是既紧急又重要，如果不是，那么用其他方式如文本、聊天室会更好。&lt;/p&gt;

&lt;p&gt;开会是另一个需要非常注意的沟通。正如 &lt;a href="http://yedingding.com/2013/11/20/startup-collaboration-advice.html"&gt;「小团队如何高效协作」&lt;/a&gt; 的留言里 greatghoul 所说，有些老板无法自拔地喜欢开会。开会是很容易上瘾的，非常有存在感，所以我们一定要明确开会的目的，然后严格控制时间。不然一不小心本来半个小时的会就开成了一个小时两个小时，不要以为只增加了一个多小时大不了，如果是 5 个人参加那可是将近 8 个小时，10 个人参加那可是将近 2 个工作日，心。而且，之后会开始雪球效应，每件要做的事情都会因此拖延，真的是牵一发而动全身。所以现在我们团队一起开会时我都会掐表，每个人都限制说话的时间。比如 &lt;a href="http://strikingly.com"&gt;Strikingly&lt;/a&gt; 团队甚至 Joyce 会在外面看着时间做提醒，很值得学习。除了控制时间之外，还需要做到不让不必要的人参加不必要的会。我记得我们在做 Present.ly 的时候，有时团队会在开会时讨论一些细节实现，然后我就悲剧了，因为跟我没什么关系，但是我还是得在席，消磨时间。这些明显应该私下继续交流，而不是浪费大家的时间。另外一点，可能很多团队没怎么注意的是，开会的时间也很重要，根据团队的工作习惯选择合适的开会时间，防止因为开会时间把工作时间划分成碎片，也会导致效率低下。我们在尝试了不同的时间段后，目前中饭过后是最适合我们做每天状态更新会议的时间。&lt;/p&gt;

&lt;p&gt;沟通之外，还得把结果沉淀，防止二次沟通、三次沟通，抑或避免换了做事人后所有都要重新沟通一遍。做为没有秘书的小团队，一定不要忽略这点。所以这也正是我们会尽量在 Fengche.co 里讨论的原因，自然沉淀。在 Roy 9 月份加入团队的时候，要做事时他在 Fengche.co 里就能看到我们之前的设计思路和讨论，节省了我们大量时间。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Focus On Workl" src="/images/improve-productivity-in-office/keep-calm-and-focus-on-work.png?1386091073" /&gt;
 &lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;一旦大家养成良好的沟通习惯后，就可以考虑工作效率了。说办公室是天然的工作效率杀手一点都不夸张。要高效地工作，不简单又简单，无非是做到三点，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;专注地&lt;/li&gt;
&lt;li&gt;用正确的方法&lt;/li&gt;
&lt;li&gt;做正确的事情&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;如何专注地？&lt;/strong&gt;如果大家数数看在工作时每天被人打断多少次，比如身边走过的同事，比如同事直接的说话交流，比如不必要的被沟通，绝对会吓你一跳。所以你会看到，很多人工作的时候喜欢带个耳机，开着音乐，就是要给自己创造一个隔离的环境，避免工作时被外界打扰。当然，我还见过更有意思的时，有些团队在办公室工作时是很少走动很少交流的，也就只是在吃饭时才会让你感觉到你是在公司和大家一起上班，其实都是一样的目的。所以，有条件的建议大家学学课程格子开辟个高产室，XD。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用正确的方法。&lt;/strong&gt;我们见识过不少的团队非常专注的在做事，但是却用了错误的方法，结果只能是事倍功半，非常不划算。比如，一些团队在用 Excel 管理项目和跟踪进度，每天在 QQ 上传来传去，好一点的即使用 Google Spreadsheet 也是大家不时地去刷新看看有没有新的变化，这些都是不正确的方法，显然用高效项目管理工具如 Fengche.co 会节省大量的时间来做正确的事。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;做正确的事情。&lt;/strong&gt;首先要让合适的人去做合适的事，显然让我去做视觉设计就不是在做正确的事。另外，正确的事情一般是跟时间有关，需要大家都清楚现在的目标是什么，什么是最高优先级的任务，大家各自的状态是什么，管理方式是否合理，而这些正是 Fengche.co 的巨大价值，随时让大家保持在一个节奏上，让合适的资源在正确的时间能立刻去做最适合的事。&lt;/p&gt;

&lt;p&gt;如果你在团队高效协作上有什么经验，欢迎留言分享给大家，或者加我 Skype 或者 &lt;a href="http://weib.com/presently"&gt;Weibo&lt;/a&gt; 聊聊。如果你觉得团队目前效率不够高，不妨试试推行我上面提的几点方式，试试 &lt;a title="高效协作工具" href="https://fengche.co"&gt;Fengche.co&lt;/a&gt;，它不一定是你看上去最简单的，但肯定是最适合小团队的高效协作工具。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
最后顺便帮朋友公司招人：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strikingly 招前端工程师，坐标上海，&lt;a href="http://www.strikingly.com/apply?utm_source=yedingding"&gt;点这联系&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;课程格子招 Rails 工程师，坐标北京，&lt;a href="mailto:joinus@creatingev.com"&gt;点这联系&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;36氪招 Rails 工程师，坐标北京，&lt;a href="mailto:hr@36kr.com"&gt;点这联系&lt;/a&gt;。
&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>小团队如何高效协作</title>
    <link rel="alternate" href="/2013/11/20/startup-collaboration-advice.html"/>
    <id>/2013/11/20/startup-collaboration-advice.html</id>
    <published>2013-11-20T10:00:00Z</published>
    <updated>2013-11-20T10:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;blockquote&gt;
    &lt;p&gt;本文摘自我发表在 &lt;a href="http://programmer.csdn.net/"&gt;《程序员》&lt;/a&gt; 杂志 10 月刊的文章。内容跟其他几篇博文有重叠的地方，大家凑合着看。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;毫无疑问，&lt;a href="https://www.stephencovey.com/‎"&gt;Stephen R. Covey&lt;/a&gt; 的&lt;a href="https://www.stephencovey.com/7habits/7habits.php"&gt;《The 7 Habits of Highly Effective People》&lt;/a&gt;和 &lt;a href="www.davidco.com/"&gt;David Allen&lt;/a&gt; 的 &lt;a href="https://secure.davidco.com/store/catalog/GETTING-THINGS-DONE-PAPERBACK-p-16175.php"&gt;《Getting Things Done: The Art of Stress-Free Productivity》&lt;/a&gt; 是个人管理类的超级畅销书，让我们学会如何才能成为高效能人士。然而，即使团队里的所有人都是高效能人士，这个团队也不一定是 个高效能团队。我们常说“一个和尚有水喝，两个和尚挑水喝，三个和尚没水喝”，正是出于这个道理。顾名思义，团队协作是指所有团队成员之间协同、合作，里 面会有分工、沟通、协调，甚至会有妥协，所以我们需要一些规则和工具来帮助团队提高协作效率。本文的一些心得和实践来自于我在小团队（&amp;lt;10）的经验，并且在团队内部相互信任、目标一致的基础上，所以不涉及办公室人事管理，适合于创业型开发团队。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Same Goal" src="/images/startup-collaboration-advice/collaboration-hands.jpg?1384953321" /&gt;
  &amp;copy; &lt;a href="http://www.ideachampions.com/weblogs/archives/2011/03/35_awesome_quot.shtml"&gt;Ideachampions.com&lt;/a&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;目标一致&lt;/h3&gt;

&lt;p&gt;不仅要确保团队的长期目标一致，还要确保短期目标一致。如同在足球场踢球，刚开始比赛时，大家战术和思想都是一致的。而一旦进球后，就会出现有人想守，有人想攻的情况，这种不一致会造成局面被动并可能导致输球。创业团队也是如此。所以在任何时候，团队成员都要保持一致意见：现阶段的目标是什么，什么事情对团队最重要，然后所有做的事情都配合这个目标来完成。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;blockquote&gt;
    &lt;p&gt;本文摘自我发表在 &lt;a href="http://programmer.csdn.net/"&gt;《程序员》&lt;/a&gt; 杂志 10 月刊的文章。内容跟其他几篇博文有重叠的地方，大家凑合着看。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;毫无疑问，&lt;a href="https://www.stephencovey.com/‎"&gt;Stephen R. Covey&lt;/a&gt; 的&lt;a href="https://www.stephencovey.com/7habits/7habits.php"&gt;《The 7 Habits of Highly Effective People》&lt;/a&gt;和 &lt;a href="www.davidco.com/"&gt;David Allen&lt;/a&gt; 的 &lt;a href="https://secure.davidco.com/store/catalog/GETTING-THINGS-DONE-PAPERBACK-p-16175.php"&gt;《Getting Things Done: The Art of Stress-Free Productivity》&lt;/a&gt; 是个人管理类的超级畅销书，让我们学会如何才能成为高效能人士。然而，即使团队里的所有人都是高效能人士，这个团队也不一定是 个高效能团队。我们常说“一个和尚有水喝，两个和尚挑水喝，三个和尚没水喝”，正是出于这个道理。顾名思义，团队协作是指所有团队成员之间协同、合作，里 面会有分工、沟通、协调，甚至会有妥协，所以我们需要一些规则和工具来帮助团队提高协作效率。本文的一些心得和实践来自于我在小团队（&amp;lt;10）的经验，并且在团队内部相互信任、目标一致的基础上，所以不涉及办公室人事管理，适合于创业型开发团队。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Same Goal" src="/images/startup-collaboration-advice/collaboration-hands.jpg?1384953321" /&gt;
  &amp;copy; &lt;a href="http://www.ideachampions.com/weblogs/archives/2011/03/35_awesome_quot.shtml"&gt;Ideachampions.com&lt;/a&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;目标一致&lt;/h3&gt;

&lt;p&gt;不仅要确保团队的长期目标一致，还要确保短期目标一致。如同在足球场踢球，刚开始比赛时，大家战术和思想都是一致的。而一旦进球后，就会出现有人想守，有人想攻的情况，这种不一致会造成局面被动并可能导致输球。创业团队也是如此。所以在任何时候，团队成员都要保持一致意见：现阶段的目标是什么，什么事情对团队最重要，然后所有做的事情都配合这个目标来完成。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;合理安排&lt;/h3&gt;

&lt;p&gt;小团队人少，永远有做不完的事，所以在做计划时总是害怕资源出现闲置而添加过多任务。我们一开始也是如此。但慢慢发现，这样不仅弄得团队身心俱疲，不停地赶进度，而且也会因为不停地延期导致团队很沮丧、压力过大影响工作的心情和状态。因此，现在每次迭代只会给大家 80%~90% 的工作量。有意思的是，很多时 候时间都是刚刚够。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Easier First" src="/images/startup-collaboration-advice/easier-first.jpg?1384953321" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;易者优先&lt;/h3&gt;

&lt;p&gt;如果讨论时遇到意见分歧，且这些不一致的意见不涉及对错，那么会很容易陷入各自试图说服别人接受自己观点的困境，纯属浪费时间。所以我们采用易者优先原则，设置了单任务最长讨论时间。 一旦超过讨论时间又无法达成共识，就会选择最简单的方案，先做出来，然后大家测试，最后再做改进，毕竟创业最需要的是进度，是前进。&lt;/p&gt;

&lt;h3&gt;免扰模式&lt;/h3&gt;

&lt;p&gt;确定项目计划后，我们就基本启动了免扰模式。我们不鼓励在工作时随意地打断别人，即使是一起在办公室工作时。在我们看来，每一次粗暴的打扰（例如电话、 IM）都是对效率的损害，我们更需要的是100%专注在要做的事情上。因此，我们要求每个人如果需要讨论，就先想清楚整个问题，然后在 Fengche.co 或者 HipChat 里发出来。短时间来看可能回复会有延时，但从长期来看反而能让大家都能更深入的思考、更专注的工作。&lt;/p&gt;

&lt;p&gt;尽量避免会议。只有一个例外是遇到困难需要头脑风暴时，因为开会比起文字是效率更高的选择。但只有任务涉及者才需要参与，而不需要浪费其他人的时间。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Sync the state" src="/images/startup-collaboration-advice/pragmaticly.png?1384953321" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;状态同步&lt;/h3&gt;

&lt;p&gt;团队人越多，沟通成本越高，尤其是需要知道团队的当前状态时，例如目前进度如何，接下来有哪些事情要做，做完的时候需不需要其他成员帮忙审查，或者有没有卡 在某些地方需要帮助。这些状态和信息同步是非常耗时的，我们更倾向于用眼睛看代替嘴巴说，而 Fengche.co 就很好地满足了这点。项目里的所有信息和状态都会实时地同步给整个团队。&lt;/p&gt;

&lt;h3&gt;代码审查&lt;/h3&gt;

&lt;p&gt;作为开发团队，我们不一定能保证每个任务都有充足的测试覆盖而且也不追求 100% 覆盖率。但每一段代码、每一次修改，都必须有其他人来审查，通过后才能进入 主干。代码审查中可以发现当事者没考虑过的设计细节和一些实现上的 Bug，保证了软件质量。通过代码审查，每个人可以学习到其他人好的思维方式和编码方 式，也会提出做的不好的地方和改进意见，是整个团队在代码级别的另一种沟通和思考，促进了团队的成长。代码审查也能避免单点故障，万一出了问题，即使代码 编写者不在，仍然有其他人能立刻去修正。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Retrospective Meeting" src="/images/startup-collaboration-advice/retrospective-meeting.jpeg?1384952725" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h3&gt;过程审查&lt;/h3&gt;

&lt;p&gt;除代码需要审查外，过程也是一个很有审查必要的事情。所以我们会不定时地一起进行一次简单的回顾，各自对这个周期的一些工作提出意见，然后在下一个周期里有针对性地改进。整个工作过程就是这样不断地在迭代式调整和改进，让我们根据自身的情况，实践出最适合团队的方式。&lt;/p&gt;

&lt;h3&gt;健康工作&lt;/h3&gt;

&lt;p&gt;要想工作好，身体先练好。一个健康的成员才可能高效地工作，每次运动过后，我都能感觉到身心得到放松，更加容易集中注意力，思维也更加的敏捷。所以我们团队每个人基本每天都会有至少一个小时的专门的运动时间，跑步、游泳，或者健身房，我们也会互相督促做比较，让运动成为一个团队习惯。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
最后帮高大上朋友公司招人：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strikingly 招前端工程师，坐标上海，&lt;a href="http://www.strikingly.com/apply?utm_source=yedingding"&gt;要求看这&lt;/a&gt;。了解团队请听&lt;a href="http://teahour.fm/2013/08/21/strikingly-yc-and-startup.html"&gt;这期 Teahour&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;课程格子招 Rails 工程师，坐标北京，&lt;a href="mailto:joinus@creatingev.com"&gt;点这联系&lt;/a&gt;。了解团队请听&lt;a href="http://teahour.fm/2013/10/14/interview-with-tstyle11-about-kechenggezi.html"&gt;这期 Teahour&lt;/a&gt;。
&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>如何吸引技术合伙人</title>
    <link rel="alternate" href="/2013/10/11/how-to-find-tech-cofounder.html"/>
    <id>/2013/10/11/how-to-find-tech-cofounder.html</id>
    <published>2013-10-11T03:00:00Z</published>
    <updated>2013-10-11T03:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Show Me" src="/images/how-to-find-tech-cofounder/show-me.jpg?1384953321"&gt;&lt;/p&gt;

&lt;p&gt;昨天在 36kr 看到一篇文章很有意思，&lt;a href="http://www.36kr.com/p/206766.html"&gt;「为什么很多技术合伙人参与创业时会先谈钱」&lt;/a&gt;，其实简单说就是信任问题，要不对人缺乏信任，要不对要做的事情还缺乏信任。因为一个靠谱的技术人员，可能这种场景又见多了，一开始会出于保护先以怀疑的眼光看待整个事情。比如下面这两个桥段，很多技术朋友都觉得很熟悉。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;用了你们的产品觉得不错，团队挺强。我有个非常 NB 的想法，能颠覆行业改变世界，就是没技术团队来做。如果你们跟我一起做的话，一定 XXX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我有个很 NB 的想法，我也认识很多投资人，只要你们给我做出来肯定就能拿到投资再做大，我可以给你 X% 的股份。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我经常会收到这样的邮件或者 IM 消息。如果我回答说要收一定的费用，他们就会非常惊奇，这么好的项目拉你一起玩你竟然还在乎前期的那点收入，真是鼠目寸光。QNMD，真的，我不需要。&lt;/p&gt;

&lt;p&gt;也经常有朋友让我给推荐靠谱的技术伙伴，我也一直说：“我可以帮忙牵线。靠谱的人就那么点，也从来不缺乏各种机会，所以如果看轻技术的话就算了。真要谈，请给予足够的尊重和诚意，剩下的真得看缘分。”&lt;/p&gt;

&lt;h3&gt;启动项目的机会成本&lt;/h3&gt;

&lt;p&gt;假设真的启动一个创业项目，表示大家对产品方向的认可，意味着不出意外会在这个产品至少花一两年甚至更久。可是对于技术人员来说，在职业生涯中还有多少个可以折腾的一两年，还有多少次试错的机会。思考的成本是很低的，但是一旦项目开始启动，时间成本机会成本都是巨大的。所以，做为一个技术人员，对待那些拍脑袋想出的 idea，不会说我们做出来试试吧，然后花上个几个月半年的时间奉献自己。相反，会看看你到底有多少诚意，会故意"刁难"你，了解你是否愿意花钱去做这个产品，逼迫你去想得更清楚。&lt;/p&gt;

&lt;h3&gt;你是否真的是找技术合伙人&lt;/h3&gt;

&lt;p&gt;回过头来，仔细思考一下，你是否真的是在找一个技术合伙人，&lt;strong&gt;合伙人&lt;/strong&gt;。技术合伙人相当于 CTO 的角色，业务理解、架构设计、编...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Show Me" src="/images/how-to-find-tech-cofounder/show-me.jpg?1384953321" /&gt;&lt;/p&gt;

&lt;p&gt;昨天在 36kr 看到一篇文章很有意思，&lt;a href="http://www.36kr.com/p/206766.html"&gt;「为什么很多技术合伙人参与创业时会先谈钱」&lt;/a&gt;，其实简单说就是信任问题，要不对人缺乏信任，要不对要做的事情还缺乏信任。因为一个靠谱的技术人员，可能这种场景又见多了，一开始会出于保护先以怀疑的眼光看待整个事情。比如下面这两个桥段，很多技术朋友都觉得很熟悉。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;用了你们的产品觉得不错，团队挺强。我有个非常 NB 的想法，能颠覆行业改变世界，就是没技术团队来做。如果你们跟我一起做的话，一定 XXX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我有个很 NB 的想法，我也认识很多投资人，只要你们给我做出来肯定就能拿到投资再做大，我可以给你 X% 的股份。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我经常会收到这样的邮件或者 IM 消息。如果我回答说要收一定的费用，他们就会非常惊奇，这么好的项目拉你一起玩你竟然还在乎前期的那点收入，真是鼠目寸光。QNMD，真的，我不需要。&lt;/p&gt;

&lt;p&gt;也经常有朋友让我给推荐靠谱的技术伙伴，我也一直说：“我可以帮忙牵线。靠谱的人就那么点，也从来不缺乏各种机会，所以如果看轻技术的话就算了。真要谈，请给予足够的尊重和诚意，剩下的真得看缘分。”&lt;/p&gt;

&lt;h3&gt;启动项目的机会成本&lt;/h3&gt;

&lt;p&gt;假设真的启动一个创业项目，表示大家对产品方向的认可，意味着不出意外会在这个产品至少花一两年甚至更久。可是对于技术人员来说，在职业生涯中还有多少个可以折腾的一两年，还有多少次试错的机会。思考的成本是很低的，但是一旦项目开始启动，时间成本机会成本都是巨大的。所以，做为一个技术人员，对待那些拍脑袋想出的 idea，不会说我们做出来试试吧，然后花上个几个月半年的时间奉献自己。相反，会看看你到底有多少诚意，会故意&amp;quot;刁难&amp;quot;你，了解你是否愿意花钱去做这个产品，逼迫你去想得更清楚。&lt;/p&gt;

&lt;h3&gt;你是否真的是找技术合伙人&lt;/h3&gt;

&lt;p&gt;回过头来，仔细思考一下，你是否真的是在找一个技术合伙人，&lt;strong&gt;合伙人&lt;/strong&gt;。技术合伙人相当于 CTO 的角色，业务理解、架构设计、编码实现、团队建设、人员招聘，甚至需要做商业开发、客户交流等，这个角色绝对不只是实现者或者翻译的角色。如果你只是想找一个人快点把东西做出来，这个人只需要按照你给的需求做实现的话，那么，你不需要一个合伙人，你需要的是一个开发和一个设计，最好只谈钱。如果你对产品有信心的话，采用外包做原型其实是个更好的方式，千万别随便选人。等试验一段时间后，你再去寻找好的技术合伙人，效果会更好。&lt;/p&gt;

&lt;h3&gt;你应该怎样找技术合伙人&lt;/h3&gt;

&lt;p&gt;我不知道，但我可以说下如果有人来找我做技术合伙人的话，我会看什么。我们都说创使团队最好是互补的，所以我希望能碰到一个能弥补我弱项的人做合伙人。比如&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 融资能力，能有钱推动项目的前进，自我资金也可以&lt;/li&gt;
&lt;li&gt; 运营能力，能说会写，深入了解领域用户&lt;/li&gt;
&lt;li&gt; 商业开发和客户开发能力&lt;/li&gt;
&lt;li&gt; 公司业务能力，如会计法律等&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些能力你具备的越多，我越可能跟你一起干，只要大家认可产品，都愿意非常严肃的对待这个事情，甩开膀子干就可以了。所以，我希望能看到的是你向我介绍展示自己的这些能力，而不是把 idea 说得天花乱坠。记住，你其实并不是在&amp;ldquo;找&amp;quot;技术合伙人，而是在&amp;quot;吸引&amp;quot;技术合伙人。&lt;/p&gt;

&lt;p&gt;同时，技术人员长期跟计算机和代码打交道，思维方式是很逻辑和理性的，感性的介绍反而会遭受质疑，什么“我认为”，“我觉得”，“应该会”。其实，不需要谈过多的产品未来，不需要画大饼，只需要做到一点就够了：traction，用来证明你非常严肃的对待这件事情，你知道怎么做这件事情。比如，你能在产品没有出来的时候，就能把产品的概念和卖点宣传出去，收集到大批的潜在目标用户留下联系方式，足够证明你是知道自己在做什么事情的人，这个比说一个小时一天都强。我不会说 “Show Me The Money”，我更喜欢说 “Show Me The Data”。&lt;/p&gt;

&lt;h3&gt;你可以不懂技术，但是最好有所了解&lt;/h3&gt;

&lt;p&gt;仔细想想，我最喜欢合作的两类非技术人员是：1) 懂黑客文化的 2) 能做设计的。
懂黑客文化的是指那些愿意花时间去学点技术，并且知道怎么跟技术人员交流的人。他并不具备技术研发的能力，但是他在思考商业上的需求时会有一些技术思想做指导，沟通起来就更顺畅，也更容易获得技术人员的好感和尊重。
能做设计的是另外一种，比如构建一个推广主页，宣传产品，这种人很清楚他要做的产品，也清楚怎么去推广产品，既是能力的体验，也能让技术人员更理解 idea。而且，现在有越来越多的建站工具，比如 &lt;a href="http://striking.ly"&gt;Striking.ly&lt;/a&gt;，并不需要你去了解前端的 HTML/CSS，而是纯设计，想清楚产品。&lt;/p&gt;

&lt;h3&gt;花点钱没坏处！&lt;/h3&gt;

&lt;p&gt;找到一个合适的人不容易。在启动项目的时候，一个技术人员已经能证明在技术层面上能做好这个产品，一个商业人员却不能证明一定能在商业层面上做好这个产品。所以，往台面上放点钱是个不错的方式，在原型开发过程中，你也会更容易建立这个信任关系，如果大家磨合得好，很大可能就是会从雇佣关系变成合作人关系。反之，如果你拿着一个有待证明的想法过来又不愿意出钱，不要谈激情，不要谈理想，再见！&lt;/p&gt;

&lt;p&gt;如果你在技术团队建设上有任何想交流的, 我的微博是 &lt;a href="http://weibo.com/presently"&gt;@yedingding&lt;/a&gt;，欢迎随时 @ 我。祝靠谱的人找到靠谱的人! 最后记得，靠谱的团队协作工具 &lt;a href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 伴你在创业路，:p&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>实用 Git 工作流</title>
    <link rel="alternate" href="/2013/09/11/practical-git-flow-for-startups.html"/>
    <id>/2013/09/11/practical-git-flow-for-startups.html</id>
    <published>2013-09-10T18:00:00Z</published>
    <updated>2013-09-10T18:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 一文中，我们分享了我们团队做代码审核的一些经验心得，在微博上引起了热烈的讨论，引出了一些非常有意思的工作流介绍，比如下面的几点。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们有 master-dev 分支，比较大的功能才会新开 branch，小功能都是直接到 dev 上的，再加上团队在一起开发所以固定时间看昨日的代码，效果还不错。我们同样没有 QA，自己做的 ticket 也会找对方来做测试，但多是功能的完整性上的测试了。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/iamroody" target="_blank"&gt;@iarmroody&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们团队小，每个开发人员一个 git 分支，基本上工作不会互相打扰。我们的分支策略是，对于新功能，从主干开一个功能分支，然后每个开发在功能分支上开个人分支。合并时，先 BI（Backward Integration)，，再 FI（Forward Integration)。每周四定期合并，合并时 review。之所以放在周四，是因为如果合并出错，周五还有时间修复。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/u/2128792480" target="_blank"&gt;@施懿民&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个团队都在寻找最适合自己团队的工作方法，希望能提高工作效率和团队协作。我们也是，这也是为什么我们除了代码审查之外，还需要过程审查这类的执行过程。像上面提到的两种方式，肯定也是在各自团队推行中觉得效果不错的，但是个人觉得在过程上在效率上还是有改进空间的，具体理由看下面，可以对比我们的目标和相应方式。目前我们使用的这一套 Git 工作流，是我们这几年不断的过程演进而来，目前 4 个人做 &lt;a href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 在用，之前 10 个人做 Socialspring 也在用。个人觉得非常适合技术型创业团队。&lt;/p&gt;

&lt;p&gt;在选择代码级别的项目管理工作流程的时候，我们希望能达到这样的目标：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;strong&gt;能够持续交付&lt;/strong&gt;：我们没有固定的发布周期，而是一个更改通过审查就可以直接上线，这样我们才能很快地发布新的功能或者 bug 修复，也能快速地获得...&lt;/li&gt;&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;在 &lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 一文中，我们分享了我们团队做代码审核的一些经验心得，在微博上引起了热烈的讨论，引出了一些非常有意思的工作流介绍，比如下面的几点。&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们有 master-dev 分支，比较大的功能才会新开 branch，小功能都是直接到 dev 上的，再加上团队在一起开发所以固定时间看昨日的代码，效果还不错。我们同样没有 QA，自己做的 ticket 也会找对方来做测试，但多是功能的完整性上的测试了。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/iamroody" target="_blank"&gt;@iarmroody&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;p&gt;我们团队小，每个开发人员一个 git 分支，基本上工作不会互相打扰。我们的分支策略是，对于新功能，从主干开一个功能分支，然后每个开发在功能分支上开个人分支。合并时，先 BI（Backward Integration)，，再 FI（Forward Integration)。每周四定期合并，合并时 review。之所以放在周四，是因为如果合并出错，周五还有时间修复。&lt;/p&gt;
    &lt;p&gt;&lt;cite&gt; - &lt;a href="http://weibo.com/u/2128792480" target="_blank"&gt;@施懿民&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每个团队都在寻找最适合自己团队的工作方法，希望能提高工作效率和团队协作。我们也是，这也是为什么我们除了代码审查之外，还需要过程审查这类的执行过程。像上面提到的两种方式，肯定也是在各自团队推行中觉得效果不错的，但是个人觉得在过程上在效率上还是有改进空间的，具体理由看下面，可以对比我们的目标和相应方式。目前我们使用的这一套 Git 工作流，是我们这几年不断的过程演进而来，目前 4 个人做 &lt;a href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 在用，之前 10 个人做 Socialspring 也在用。个人觉得非常适合技术型创业团队。&lt;/p&gt;

&lt;p&gt;在选择代码级别的项目管理工作流程的时候，我们希望能达到这样的目标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;能够持续交付&lt;/strong&gt;：我们没有固定的发布周期，而是一个更改通过审查就可以直接上线，这样我们才能很快地发布新的功能或者 bug 修复，也能快速地获得用户对修改的反馈。所以，有时一天里就会有好多次的发布。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方便代码审查&lt;/strong&gt;：我们很重视代码审查，具体可以看我们在&lt;a href="http://yedingding.com/2013/08/08/dig-into-code-review-process.html"&gt;「让代码审核成为你的团队习惯」&lt;/a&gt; 的分享。所以这个流程必须对代码审查功能很友好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用代码沟通&lt;/strong&gt;：代码，是程序员沟通的最直接的手段。我们希望每一次的更改提交都是独立的，专注并只专注一件事情。这样，我们就很容易地去了解这次更改背后要传达的信息了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，为了达到持续交付，我们必须随时有一个可发布的分支，同时，工作分支能很简单很早的 merge 过来。为了做到随时随地的代码审查，我们必须每一次更改都要有迹可循，且和其他更改没有交叉。为了方便代码沟通，我们必须有独立的分支来做独立的事。所以，像开头列出的两种方式，首先代码审查会很麻烦，因为代码容易混在一起，不够独立，做不到异步随时审查，而需要大家一起花时间专门执行代码审查。同时，会推迟 merge 的发生，带来的更多的不确定性，比如冲突的增加，时间的拖长等等，就更不要说持续交付了。所有这些，都是效率的杀手，是应该尽量去避免的。下面看看我们的工作流程。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Git Flow in Fengche.co" src="http://yedingding.com/images/practical-git-flow-for-startups/git-flow.png" /&gt;&lt;/p&gt;

&lt;p&gt;我们有三种性质的分支：1) Master  2) Feature or Bug 3) Staging。所有在时间线上的变化都只跟着 feature 或者 bug 走，跟人无关，也就是项目推进的自然法则。对了，版本控制系统我们用 Git，而不是 SVN，好处就不多讲了，主要是三点：1) 分布式 2) 建分支很容易 3) merge 很简单。如果你对这个不太了解，可以看看 &lt;a href="http://gitcafe.com"&gt;GitCafe&lt;/a&gt; 的 &lt;a href="https://gitcafe.com/beginning_git"&gt;开始 Git 文档&lt;/a&gt;。&lt;/p&gt;

&lt;h4&gt;Master 分支&lt;/h4&gt;

&lt;p&gt;对于我们而言，master 分支是非常特别的，它必须是可以部署的分支，也就是通常意义上的 production。比如对于 &lt;a href="https://fengche.co"&gt;Fengche.co&lt;/a&gt;，现在线上跑的等同于我们代码里的 master 分支。所以，master 上的任何代码更改都只能是从别的分支 merge 过来，在代码审查过后。&lt;/p&gt;

&lt;h4&gt;Feature or Bug 分支&lt;/h4&gt;

&lt;p&gt;我们开发时不区分功能特性和 Bug，所有都一致按任务处理。所以，为了方便持续交付和代码审查，我们会人为的细分任务，比如在 9 月份，我们有下面这些任务计划。&lt;/p&gt;

&lt;p&gt;&lt;img alt="features and bugs" src="http://yedingding.com/images/practical-git-flow-for-startups/features-bugs.png" /&gt;&lt;/p&gt;

&lt;p&gt;我们在开始实现这个功能或者修复这个 bug 的时候，就基于 master 支持创建一个新分支。之所以基于 master，正是因为上面提到过 master 永远是可以部署的分支，那么基于 master 开的分支就可以直接被 merge 回 master 做发布。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;(yedingding)$ ~/Fengche.co › git checkout -b 754_usage_analytics -t master
Switch to a new branch named "754_usage_analytics"
(terry)$ ~/Fengche.co › git checkout -b 746_integrate_mobile -t master
Switch to a new branch named "746_integrate_mobile"
(roy)$ ~/Fengche.co › git checkout -b 77_comment_via_email -t master
Switch to a new branch named "77_comment_via_email"
&lt;/pre&gt;
&lt;p&gt;从分支创建例子上来看，我们是按照 &amp;lt;sid&amp;gt;&amp;#95;&amp;lt;ticket title&amp;gt; 的方式来命名。sid 是这个任务在 Fengche.co 的任务 ID，ticket title 是任务在 Fengche.co 上的标题概述。通过每个任务开发都基于 master 开新分支，就保证了，这个新分支能很容易的跟 master 做 diff 来做代码审查，然后被 merge 回 master。我们也把这种工作方式集成到了 &lt;a href="https://fengche.co"&gt;Fengche.co&lt;/a&gt; 中，比如提交到 754&amp;#95;usage&amp;#95;analytics 的 commits 会自动关联到 Fengche.co 这个任务的动态里，也可以在 commit 消息里加上 &amp;ldquo;ref #754&amp;rdquo;, &amp;ldquo;resolved #754&amp;rdquo; 这样的文本，也会自动做关联，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Activity" src="http://blog.pragmatic.ly/images/integrate-version-control-system-with-pragmat/vcs-integration.png" /&gt;&lt;/p&gt;

&lt;p&gt;这里，在创建 pull request 发布做代码审查前，我们需要先同步 master，也就是 merge master 到正在开发的分支，确保没有 break 和可以正常 merge。然后，团队其他成员会介入做代码审查，当然之前会要求齐全的测试，通过后就可以 merge 会 master 做发布了。用这种方法，需要注意的是，merge 必须得及时，不然如果留下很多个分支没有 merge 的话，解决冲突是个麻烦的事情，更不要说有时会遇到功能有依赖关系的情况时。&lt;/p&gt;

&lt;h4&gt;Staging 分支&lt;/h4&gt;

&lt;p&gt;Staging 分支也是一个特殊的分支，是部署到我们的 staging 服务器上的版本。理想情况下，所有的更改做完代码审查后，在 merge 回 master 发布之前，会先 merge 到 staging 分支，发布到 staging 服务器做人工测试，通过后再 merge 到 master 发布到生产线上。所以，大部分时候，Staging 分支是 master 的一个备份保护，每次测尽可能少的改变。所以，还是会回到同一个注意点，要及时 merge。而且，有时候，根据任务的复杂度不同，我们可能不会通过 staging 而是会直接 merge 到 master 分支上线，比如一些简单的 bug 修复。&lt;/p&gt;

&lt;h4&gt;关于 CI&lt;/h4&gt;

&lt;p&gt;目前，我们没有专门的 CI 服务器做持续集成测试，因为在我们团队的理解力，CI 并不是意味着必须有专门的 CI server，而是每个开发人员在提交代码时必须保证通过了集成测试。所以我们的做法是发出每个 Pull Request 的时候，必须确保我们所有的测试仍然通过。&lt;/p&gt;

&lt;h4&gt;Pull Request VS Merge Request&lt;/h4&gt;

&lt;p&gt;严格意义上来说，我们使用的是 Merge Request，而不是 Pull Request。Pull Request 要解决的问题是防止远程分支过多造成混乱，这样由每个开发人员建立自己的一个版本库，在自己的版本库建分支操作，然后往产品生产版本库发起一个 Pull 请求，同时，又要不断的跟远程的产品版本库同步保持一致，对于 10 个人以下的团队，个人感觉太重了。像&lt;a href="http://douban.com"&gt;豆瓣&lt;/a&gt;这样的团队，为了利用好 Pull Request，专门开发了一整套工具链来自动做这些操作降低复杂度，小团队可能就没这个条件了。而对于开源项目来说，组织松散，Pull Request 是个非常好的方式。Merge Request 就是我前面一直提到的工作方式，一个远程代码库，多个分支来管理，简单直接。&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;以上就是我们代码级别的项目管理工作流程，希望对你有帮助。个人觉得这个流程很适合 lean 的敏捷创业团队，能快速迭代快速交付。你们是怎么做的呢，欢迎交流，可以在微博上直接 &lt;a href="http://weibo.com/presently"&gt;@yedingding&lt;/a&gt; 或者 &lt;a href="http://weibo.com/pragmaticly"&gt;@pragmaticly&lt;/a&gt;！&lt;/p&gt;
</content>
  </entry>
</feed>
