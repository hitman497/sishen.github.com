<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Do Great Things - 叶玎玎</title>
  <subtitle> 叶玎玎在技术、创业、团队协作和项目管理上的思考和分享</subtitle>
  <id>http://yedingding.com</id>
  <link href="http://yedingding.com/"/>
  <link href="http://yedingding.com/feed.xml" rel="self"/>
  <updated>2014-05-04T04:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Teahour #50: 和 Jing 聊聊 Qubit 的产品和技术栈</title>
    <link rel="alternate" href="/2014/05/04/teahour-50-with-jing.html"/>
    <id>/2014/05/04/teahour-50-with-jing.html</id>
    <published>2014-05-04T04:00:00Z</published>
    <updated>2014-05-04T04:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
  目前 Teahour 的网站不适合放文本，需要重新设计，暂时先放我自己博客上。
&lt;/blockquote&gt;

&lt;p&gt;本文是 Teahour 第 50 期 &lt;a href="http://teahour.fm/2014/04/08/interview-with-dong-jing.html"&gt;『和Qubit的工程师聊聊A/B testing, Node 和 Ruby』&lt;/a&gt; 的录音文本，欢迎大家订阅 Teahour，iTunes URL 是 &lt;a href="http://itunes.apple.com/cn/podcast/teahour.fm/id608387170?l=en"&gt;http://itunes.apple.com/cn/podcast/teahour.fm/id608387170?l=en&lt;/a&gt;。Android 用户可以使用 &lt;a href="http://m.coolapk.com/apk/de.danoeh.antennapod"&gt;AntennaPod&lt;/a&gt; 来订阅。同时，欢迎加 Teahour 好友，&lt;a href="http://weibo.com/teahourfm"&gt;微博&lt;/a&gt;和 &lt;a href="https://twitter.com/teahourfm"&gt;Twitter&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;&lt;source src="http://screencasts.b0.upaiyun.com/podcasts/teahour_episode_50.m4a" type="audio/mpeg"&gt;&lt;/source&gt;&lt;/audio&gt;&lt;/p&gt;

&lt;h3&gt;Part 1 - HackerNews Meetup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：大家好，欢迎收听 Teahour，我是本期的主持人玎玎。本期由我一个人主持，邀请到了来自英国的 Qubit 公司的工程师董京，来 Teahour 做客。董京，你好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：大家好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：首先你做一个自我介绍吧，让大家来了解一下你的背景。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我现在在英国时区，大早上爬起来跟叶玎玎聊这些事情还是蛮困难的。因为我平时上班也没有起来这么早。我现在在英国创业公司（&lt;a href="http://www.qubitproducts.com/"&gt;Qubit&lt;/a&gt;），工作了 3 年多了。之前我还有在 F1 赛车和英国电信工作过，都是技术方面的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，我跟你认识其实也挺蛮巧的。你在英国生活了很多年，今年回国，在 Twitter 上联系到我，说想组织一个活动——是上海的 &lt;a href="http://hnshanghai.com/"&gt;Hacker News 的线下聚会&lt;/a&gt;。当初你是怎么想到回国时组织这样一个活动呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我个人虽然比较了解海外的创业市场，但是对中国的创业的环境几乎完全不了解。我在回国的时候想去了解一下，但是发现没有太多渠道或者机会去找聚会。所以我就突然想到，干脆我就自己从头到尾组织一个，找各个公司去 sponsor，自己一个人去联系 speaker。这其实还是蛮有趣的一个经历。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：对，我感觉这次活动也办得...&lt;/p&gt;</summary>
    <content type="html">&lt;blockquote&gt;
  目前 Teahour 的网站不适合放文本，需要重新设计，暂时先放我自己博客上。
&lt;/blockquote&gt;

&lt;p&gt;本文是 Teahour 第 50 期 &lt;a href="http://teahour.fm/2014/04/08/interview-with-dong-jing.html"&gt;『和Qubit的工程师聊聊A/B testing, Node 和 Ruby』&lt;/a&gt; 的录音文本，欢迎大家订阅 Teahour，iTunes URL 是 &lt;a href="http://itunes.apple.com/cn/podcast/teahour.fm/id608387170?l=en"&gt;http://itunes.apple.com/cn/podcast/teahour.fm/id608387170?l=en&lt;/a&gt;。Android 用户可以使用 &lt;a href="http://m.coolapk.com/apk/de.danoeh.antennapod"&gt;AntennaPod&lt;/a&gt; 来订阅。同时，欢迎加 Teahour 好友，&lt;a href="http://weibo.com/teahourfm"&gt;微博&lt;/a&gt;和 &lt;a href="https://twitter.com/teahourfm"&gt;Twitter&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;
  &lt;source src="http://screencasts.b0.upaiyun.com/podcasts/teahour_episode_50.m4a" type="audio/mpeg"&gt;
&lt;/audio&gt;&lt;/p&gt;

&lt;h3&gt;Part 1 - HackerNews Meetup&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：大家好，欢迎收听 Teahour，我是本期的主持人玎玎。本期由我一个人主持，邀请到了来自英国的 Qubit 公司的工程师董京，来 Teahour 做客。董京，你好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：大家好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：首先你做一个自我介绍吧，让大家来了解一下你的背景。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我现在在英国时区，大早上爬起来跟叶玎玎聊这些事情还是蛮困难的。因为我平时上班也没有起来这么早。我现在在英国创业公司（&lt;a href="http://www.qubitproducts.com/"&gt;Qubit&lt;/a&gt;），工作了 3 年多了。之前我还有在 F1 赛车和英国电信工作过，都是技术方面的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，我跟你认识其实也挺蛮巧的。你在英国生活了很多年，今年回国，在 Twitter 上联系到我，说想组织一个活动——是上海的 &lt;a href="http://hnshanghai.com/"&gt;Hacker News 的线下聚会&lt;/a&gt;。当初你是怎么想到回国时组织这样一个活动呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我个人虽然比较了解海外的创业市场，但是对中国的创业的环境几乎完全不了解。我在回国的时候想去了解一下，但是发现没有太多渠道或者机会去找聚会。所以我就突然想到，干脆我就自己从头到尾组织一个，找各个公司去 sponsor，自己一个人去联系 speaker。这其实还是蛮有趣的一个经历。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：对，我感觉这次活动也办得还可以。虽然场地上可能还可以有一些提高，但是总体上来说，你一个人办的也还可以。我记得你一个人联系我后，就自己做了一个页面，也设计得很高大上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：那个页面其实还是蛮搞笑的。如果国内有一个可以组织活动的平台，我希望用那个平台。但是我完全没有找到合适的平台，所以我基本上从头到尾，一个晚上，把后台和前台全部写出来了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：八卦一下，用什么写的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：后台是用 Node.js 写的。我是这样考虑的，那个服务器很小，我不希望需要用太多的内存，所以我没有选择 &lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt; 或者是其他大的框架，就是一个很简单的 &lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt; 和 &lt;a href="http://expressjs.com/"&gt;Express&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：听起来你是 Node 和 Rails 双修了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：平时我在工作的时候，这两个东西还是用得非常多的。基本上公司的 Rails 构架都是我一个人，后台大约 70－80% 是我写出来的，大约有 6 - 7 个 Node 服务器在后面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，那 Teahour 听众也了解到我们其实已经往 Node.js 社区偏了。开个玩笑。你在英国会经常参加这样的 meetup 吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对啊，我经常参加。这边的聚会是非常非常多的。你想了解有什么样的 meetup 可以到在国外还是蛮盛行的网站，叫 &lt;a href="http://www.meetup.com/"&gt;meetup.com&lt;/a&gt;。在中国还是可以用的，你可以在上面发现很多很多活动，不光光是技术圈的 meetup。还有些关于个人兴趣爱好的活动可以去。可以在周末或者晚上找到很多活动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你觉得参加这些 meetup 对你最大的收获是什么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：最大的收获是我认识了很多圈内的人。我发现大家还是有这个需求的，但是没有太多的人去组织。从我个人体验来说，从头到尾办一次这样的活动要花费很多的精力。不单单是联系 speaker，我还要组织场地，要提前预定、要提前到场去检查，这不只是一个周末的事，从开始到结束要花至少两个礼拜的时间。晚上还要操很多心，要保证这个活动的宣传要做到位，后续通知要做到位，有很多很多事情要做到位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：辛苦。你也提到过，月底会组织一个远程的聚会，可能会更加辛苦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。好消息是，我昨天刚和我公司的 CTO 联系过，他说如果公司的 budget 足够，他下个月礼拜五可以跟我确认一下，能不能在六月或者五月回国办一个活动。希望是一个好消息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK。我知道你在组织活动的同时，还在为公司寻找一些 deverlopers，同时还提供一个到英国工作的机会。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：是这样，创业的，不管是在美国还是在欧洲，都是非常缺人才的。我们在用各种方法去寻找适合的人才，无论在哪里。像我的同事里，前端和中端的工作组大概有 8 个人，这些人里没有一个是纯英国人。我们中有波兰人、立陶宛人、意大利人，再加上我一个中国人，有很多不同的文化。我们也尝试在美国找工程师，而美国，特别是在硅谷，也是非常非常缺人才。尤其是 startup。有经验的人未必适合做创业的工作。&lt;/p&gt;

&lt;h3&gt;Part 2 - Qubit 产品和技术栈介绍&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那和我们介绍一下你们公司其实是做什么的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我们公司做的方面还是挺多的。其中一个目标就是提高电商在线的销售率。这需要通过很多渠道。大家可能对这个市场不是特别了解，在欧洲和美国的电商都希望自己建立一个品牌。在中国大家都要提高在淘宝上的销售率。而在外国都是要在 Google 这个平台，在搜索引擎这个平台上竞争，竞标从而提高网站的浏览量，然后提高销售率。&lt;/p&gt;

&lt;p&gt;我们主要通过跟踪用户的行为，做一些个性化的需求的调整，从而提高销售率。我们公司一个产品 —— &lt;a href="http://www.qubitproducts.com/tag-management"&gt;OpenTag&lt;/a&gt;，他是可以管理网站用户跟踪标签(Tag/Script)的产品。我们很早进入到这个产业里。大家可能对这个产业不了解，一般来说，这个主要的产业趋势是在网站上跟踪各个用户的行为。比如&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;的网站上面，叶玎玎用到了 &lt;a href="https://mixpanel.com/"&gt;Mixpanel&lt;/a&gt;。对我们来说这只不过是一个提供商 (provider)。OpenTag 是一个平台，可以实时更改它们。可以使用 Mixpanel，或者 &lt;a href="https://www.google.com/analytics/web/"&gt;GA（Google Analytics）&lt;/a&gt;，或者 &lt;a href="https://www.kissmetrics.com/"&gt;KISSMetrics&lt;/a&gt;，即可以实时去更改在线网站跟踪代码，只需要花 5 分钟时间。&lt;/p&gt;

&lt;p&gt;对于电商网站来说，这个需求是非常非常高的。在国内虽然有淘宝，但你完全没有机会在其上做个性化的调整。没有办法了解某个用户的具体信息。而如果你有自己的电商平台，你是完全可以做到的。你可以用第三方的工具，比如说 Mixpanel，或者是 GA，或者 &lt;a href="https://www.optimizely.com/"&gt;Optimizely&lt;/a&gt;，去做一些 A/B testing，去做一些具体的跟踪方案。或者通过一些具体的个性化网站的更改方案。&lt;/p&gt;

&lt;p&gt;但问题是，很多中小型或者中大型的电商的开发过程都由第三方开发的，项目周期是非常长的。比如说一个企业公司——乐购，他需要找一个第三方去更改他的网站——添加一个跟踪代码，这个周期起码需要两到三个月。因为他们需要认证、要 approval，然后再等第三方把这个东西做好，还要再测试。&lt;/p&gt;

&lt;p&gt;通过我们的 OpenTag，这样一个标签管理的工具，我们可以在 5 分钟内把跟踪代码放到网上，可以做各种的逻辑管理。比如用户一定要从 Google Search 进入网站才能启动这个标签，来跟踪这个用户。在这个产业内，我们做得还是非常大的。我们发布一年半以后，Google 才做了他们的 &lt;a href="https://www.google.com/tagmanager/"&gt;Google Tag Manager&lt;/a&gt;，也是可以管理标签的。大家感兴趣的，可以搜一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你们在找怎样的人呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：目前，我们非常缺对 JavaScript 了解非常深入的。我们在面试的时候，自己说了解 JavaScript 的人的理解一般还是比较表面的。可能只懂怎么用 &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;，写很简单的界面的逻辑。但是我们可能是需要招一些深入了解 JavaScript 的人，比如说了解到 &lt;a href="http://wiki.ecmascript.org/doku.php?id=harmon:specification_drafts"&gt;ES6（ECMAScript 6）&lt;/a&gt; 版本的一些具体的功能有什么，如 &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;constructor&lt;/code&gt;，而且要了解整个 JS 的趋势。&lt;/p&gt;

&lt;p&gt;我们面临的问题是什么呢？我们的很多工具直接部署在客户的网站上，他们的环境是完全未知的，所以我们要保证在各种情况下面我们的代码都可以在客户的网站上运行。这是一件非常非常难的事情。我举一个非常简单的例子，是我们曾遇到一个非常狗血的问题。大家原来应该用到过一个比较老的框架—— &lt;a href="http://prototypejs.org/"&gt;Prototype JS&lt;/a&gt;。很多电商的网站运用这些陈旧的JS库，会自动 overrides window.JSON 上的方法。而我们经常会处理一些 JSON 数据，而它在 serialize 和 deserialize 的时候处理大的 JSON 非常低效，还会经常出错。特别是 JSON 中有 nested array 时它就完全不能处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：对，然后你们是怎么解决这些问题的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我们有自己的一个测试平台，在内部里面可以每天晚上实时运行一些 JavaScript 测试代码，调用各种不同的开发环境在客户的网站上运行，通过测试来达到部署前的测试和部署之后的监控测试，遇到问题之后具体个别处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，听起来就是说你们对 JS 的要求还是比较高的。是比较纯粹的 JS 开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对，是一个 full cycle，因为我们通过跟踪用户，是通过 JS 来的。然后再回到后台，整理用户数据。但我们另一个目标是如何通过行动来改变在线销售率。很多做分析的网站，比如 GA，或者 Mixpanel，他们的目标倾向于分析。但在很多情况下，分析完之后，如果要做行动、要怎么样改进一个网站还是一个未知数。我们的目标是提供一个简单的解决方案来帮用户提高销售率。我们偏向于行动，不仅有数据分析，而且还有工具可以评价如何让你尽快的做实实在在的更改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这一点我还是挺有兴趣了解的。如你提的问题，GA 也好， Mixpanel 也好，他只是告诉你了一个数据，比如这个页面到下一个页面的 flow 转换了多少，用户访问了哪些东西。而我确实知道了一些问题，但是如何解决这些问题。我只能去猜，只能去试，之后看转化率有没有提高。你说用了一些解决方案，能大概举一些例子吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我们大部分的客户都是电商，所以很多解决方案都是跟电商相关的东西。比如说一些客户的网站上，用一些 personalized 的方案。是在 homepage 上面提醒明天会下雨，以此接近用户。帮助产品重新做一个包装，让他们可以比较贴近用户一些。这是其中一种方案。另外一种方案，是在一些产品上面显示是不是已经快没有存货了。比如只有两到三个存货的时候，我们可以做一个界面上的更改，提醒用户，这个产品有很多人买，已经只剩下两个货物了，你是不是要买它。经过测试，根据用户的个性和需求，再加上产品的销售量提示会增加很多销售量。比如一个产品的销量提高 2%。&lt;/p&gt;

&lt;p&gt;对于大多数的电商来说，2% 的提高是非常大的。我们的客户有 &lt;a href="https://www.arcadiagroup.co.uk/"&gt;Arcadia Group&lt;/a&gt;，其中一个出名品牌叫做 &lt;a href="http://www.topshop.com/"&gt;Topshop&lt;/a&gt;，是专门给女孩子卖衣服的。如果提高百分之二的销售率对它来说是非常有利的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：了解。你们做的是电商垂直，所以你们说有关于电商的很多数据。通过这个数据提供一些建议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。我们一个未公开但是已经部署的产品也倾向于 enterprise。如果要做比较的话，我拿 &lt;a href="https://www.strikingly.com/"&gt;Strikingly&lt;/a&gt;来作例子。大家应该对 Strikingly 比较熟悉，是蛮有趣的，由中国人开发的产品，但是被 YC 投资了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：是我们已前的嘉宾。『&lt;a href="http://teahour.fm/2013/08/21/strikingly-yc-and-startup.html"&gt;28期：和Strikingly的CTO Dafeng聊聊他们和Y-Combinator的故事&lt;/a&gt;』&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。以我个人的见解来说，他们的产品与外国的一个产品叫做 &lt;a href="https://webflow.com/"&gt;Webflow&lt;/a&gt;，是非常非常像的。而且我觉得，Webflow 稍微做的比 Strikingly 专业一些，有很多页面调整的功能是可以更改的，UI 界面也做的非常好。我不知道他们解决的是一个什么问题。对于我来说，Webflow 和 Strikingly 是二十一世纪的 FrontPage。他们把 FrontPage 移到了网络上，但是没有解决用户的需求。如果我是开发人员，我绝对不会去用 Webflow 或 Strikingly 去做网站。我有能力去用 offline 的工具开发，而且我觉得更加顺手，所以我不需要用他们的工具。如果我是一个 designer 的话，我也不太会用这个平台，我会用 PS，或者是其他的 offline 的工具。对一个不懂设计的人用这个网站，你也不能完全保证，他能把这个网站做到怎么好。就是说，这两个产品都是在一个中间层，面对的用户都不是特别的确定。所以我对这种产品稍微有一点怀疑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这里说一下我自己的见解。他们的用户群是很确定的。开发设计网页需要一个比较好的 layout，让有美感的，但是不会做网页的人，去做自己的设计。他适合用于展示页面，比如说演员或者模特，他知道怎样的东西是好看的，但是他不会做网页，他可以通过拖拽加一些东西做一些很好看的网页。包括一些摄影的、一些学生。学生可能要给自己做很简单的网站，包括一些页面，来做产品的展示。他有比较确定的用户群体。这类用户是想做网站，而没有做网站的开发能力，所以要找一个相对来说比较简单的工具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：所以是他本身有一些设计的功底，或者一些设计的天分，然后只要把这个页面做好，再加上内容展示。在商业角度上来说，我可能觉得这一部分虽然还是有机会挣钱的，但不是特别多。毕竟以我的背景来说，我更倾向于 enterprise ，这些小的商业模式赚得钱可能会少一些。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，这个可能就不太确定了。我觉得应该发展得很好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：其实我还是蛮喜欢的。我们公司有个产品还是类似于他们的。我们对整个网络有另外一种看法，所有的网站设计趋势都是忘组件化发展的。大部分网站都是可以按模块来算的。不管是图像、文字、段落、复杂的 animation，或者是 slide，都是按模块来算的，你不能跳出模块。我们是以这个角度看待网站开发的。&lt;/p&gt;

&lt;p&gt;我们的一个解决方案叫 Deliver，通过分析更改网站的任何一个 component。对于一个开发者，专业地开发一个方案，放到市场上。然后市场的人通过调用开发人员已经开发过的方案部署到网站上面。这样就完全做到专业的人可以用专业的线下工具开发，再用我们的接口模块和工具，指出这个组件在哪个网站可以运作，能够提高多少销售率。对于那些非专业，没有太多 design、设计方面天赋的人就可以通过 drag-drop 来测试一下这个组件是不是对电商的品牌有利。&lt;/p&gt;

&lt;p&gt;这个产业——做 A/B testing 还是有很多公司的。另外一个做得比较好的叫做 Optimizely。我不知道叶玎玎有没用过这工具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：我觉得好贵。（&lt;small&gt;&lt;em&gt;作者注: 记错产品价格了，Optimizely 的价格还是比较合适的&lt;/em&gt;&lt;/small&gt;）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：如果想用免费的工具，Google 还是有一个这样的工具的，也有 A/B testing 的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：说起 A/B testing ，你们是怎么做的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我们的结构非常复杂。你想了解前端还是后端？做 A/B testing，主要靠 JavaScript，实时地替换页面。有 50% 的人可以看到 B 的页面，有 50% 的人可以看到 A 的页面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：我比较贪心一点，想了解前后端。我想去尝试一下，但是没有实战的经验，时间上也不太允许。但我想学习这方面的知识。你们是做分析的，还给用户提供建议，对于怎样更好地提高转化率，你们自己也会很多的 A/B testing 吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：恩，是的。我们内部也做了蛮多的 A/B testing。我们会用自己的工具去做。但还要通过从非专业和非技术的角度上去改善产品。比如我们的产品经理会假设，如果这个页面的模块更改成什么样子，也许会提高百分之多少的销售率，或者达到目标。这个目标需要自己定义。对电商来说，我的目标就是用户买完东西，到最后的 checkout page，然后到 payment，最后 confirmation。但是对于其他用户来说，可能希望用户到注册页面、希望更多的人填自己的邮件地址，subscribe 我的信件。也可能是，让大家点击一个链接，或者是滚动页面到最下面的位置。可以有很多不同的目标，所以要有不同的途径去实现目标。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那一般来说在前端，根据目标可能会有不同的板式，或者不同的操作过程。那你们是如何保证样本的独立性？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：大部分跟踪是通过 cookie 的，一般都是用 first party cookie。在欧洲，用第三方的 cookie 有很多限制，不能做太多的跨域名跟踪。一般都是在同一个域名下做跟踪。当这个用户第一次登上这个网站之后，会有一个自己的 id。其实可以在淘宝上看到，登陆后用户会有一个 cookie ip。再具体点，用户每一个动作会发到我们的服务器上，我们有一系列的后台运算。我们有专门的做数学模型的博士在我们公司做运算模型。通过运算模型，再把数据发到后台。我们用 &lt;a href="https://hive.apache.org/"&gt;Hive&lt;/a&gt;、&lt;a href="https://hadoop.apache.org/"&gt;Hadoop&lt;/a&gt;、&lt;a href="https://storm.incubator.apache.org/"&gt;Storm&lt;/a&gt;，来做一些实时的分析。这还是一件非常困难的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：再请教一下，你们后台的 A/B testing 是对前台做一个限制还是怎样？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：用 cookie 去实现 A/B testing，其实还是很 limit 的一种方式。大部分企业用户需要了解整个用户的全部的浏览历史。比如说我们有很多用户的数据，来预测一个用户一生会在网站上消费多少。通过这些分析，才能做一些具体的 A/B testing。比如说我要测试一些用户，这些用户的一生会在这个网站上花超过 1000 英镑，针对这些用户，我们再做一些具体的 A/B testing。给他一些优惠，给他一些 promotion，让这些用户群体上受到一些特别的待遇来测试。我们需要通过跟踪，通过一些后台的数据分析用户的历史。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：相当于不是在代码级别的分片，而是对于一些过去行为在后台计算得到结果，推算他会不会做出一个购买行为。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对我们公司来说，前台后台还是区别蛮大的。如果说前台工作的话，不光光包括前端代码，还包括 middle stack ，全部都要做。对于我自己来说，我平时的工作都是从写 &lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; 开始。如果大家不是很了解的话，就是管理服务器的脚本。从管理服务器开始，到 application logic 再写到前端，是一个非常辛苦的工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：全栈。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：恩。要切换自己的一个 context 还是非常困难的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你们现在开发有多少人？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我刚加入的时候整个公司就一层楼，大概有 28 个人。现在公司已经有两层楼了，整个公司从美国到英国到法国还有德国加起来一共有将近 90 个人，工程师可能占一半的数量。前端工程师有将近 10 个，包括 manager。其他人都是做后台的。后台这部分，我们在欧洲还是做得非常大的。按数量来算，我们每天要收到 1.6 个亿的数据点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这么大的数据是怎么处理的。介绍一下你们存储这方面？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我不能介绍太多，因为我不是主要做这个方面的。我可以从层面上说一下。如果你了解 Mixpanel 的数据模型，他们没有数据结构的，都是通过 event 来做的，会比较简单 (scalability的原因)。这个行业里大家都要跟踪用户行为，但是没有一个公司去定义一个数据结构。之前我参加了一个项目，是由我们公司首先提出的一个 standard，让大家都是要这个数据结构。运用这个电商数据结构提高跟踪的效率、跟踪代码的更改效率，这样你可以从不同的平台上做切换，也可以更好的做一些网站应用的 implementation。&lt;/p&gt;

&lt;p&gt;我们这个 specification 叫做 &lt;a href="http://www.w3cdigitaldatatoolkit.com/"&gt;Universal Variable&lt;/a&gt;，这个通用变量里有描述到用户的行为，页面的产品，页面的 type/category，比如是 homepage、产品的页面、checkout、basket（购物篮）。这个 spec 已经被列入到 W3C，你可以在 GitHub 上看到 &lt;a href="https://github.com/QubitProducts/UniversalVariable"&gt;specficaiton&lt;/a&gt;。有很多公司都是参加到了这个 spec 的审评的过程，有W3C、Google、IBM。当然还包括我们的 Qubit，也是主要的项目 leader。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那你能简单介绍 Qubit 的后台用到了什么？你刚才说每天有 Billion 级的数据，如何 scale？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我们有很多 data center，大部分都是在 Amazon 上面。最早是前台的 JS 发数据到后台，接收这个数据。接收端最早是用 Node 写的。当时我们大概可以 handle 的数量在几百万这样。当时 Node 版本是 0.4。在去年，我们做了一个实验，把它换到 &lt;a href="http://jbossas.jboss.org/"&gt;JBoss&lt;/a&gt; 上，才 handle 到 billion 上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;： handle billion 是指每天的接收的 data point？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。还是不需要太多的 backup server 才能做到。到后面我们发现 Node 很难 debug，经常有一些 memory 的问题。特别是在早期 0.4、0.6 的时候。虽然接收数据、forwarding 很简单，但是做了实验后还是放到了 Java 平台上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：还是 Java 更靠谱一点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你们有尝试最新版的 Node 吗？测过最大的时候能达到什么程度？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：没有尝试过，因为大家都很忙。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：已经受伤了是吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对。然后从接收数据到这个模块，再存到 HDFS 上面。之后我们有一个程序把这些数据实时发布到 Hbase、Storm 和 Hive。再做一些运算，根据具体的数据结构的需求把它写入到 Hive 里面，再通过 Storm 和 Hbase 做一些量的分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，听起来主要是 Hbase 做数据库存储，Hive 做类 SQL 查询这样的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：其实中间还有很多的技术。比如说 &lt;a href="https://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt;，做一些 queue 的处理。我们原先用 Cassandra 遇到了一些蛮奇怪的问题，说实在没有办法用下去了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：能吐槽一下么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：这个我就不能吐槽了，也是听别人说的。这么大的数据玩起来还是挺有意思的。有很多 challege。因为这些数据还是有很多 noise 的，所以要做很多测试、删除，包括有一些 bots，垃圾信息，全部都要隔离开。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那有个问题我想了解，你们拿到数据后处理，到最后得到的结果有多少延时？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：大概做到 5 - 10 分钟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那计算还是相当快的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：相当快。我们在 Amazon 上面就有将近 300 台服务器。而且不包括 &lt;a href="https://aws.amazon.com/ec2/spot-instances/"&gt;Spot Instance&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这个就不是一般人能玩的了。你之前聊到 Node 和 Ruby，特别是你是团队里面唯一一个用 Ruby 的，而其他人都在用 Node？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：可能这样说有点太过了，可能公司里 10 个人有 2 - 3 个会 Ruby。但是根据实际情况，我们的工作主要和 JavaScript 有关，所以 JS 的开发人员相对多一些。总体倾向于 Node.js。一般同事只懂一个语言，就是 JavaScript。也不是说这样不好，大家都用自己知道的东西做事。对实现功能和 startup，也没有太多的不好。用自己不习惯的语言做一些实现功能，毕竟不会做得特别好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那你们有这么多人，为什么还坚持换到 Java？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：因为写数据接收的那一块是属于后台的工作，而不是属于前台的工作。我们前台主要是做一些产品方面。后台存储处理和前台关系不大。&lt;/p&gt;

&lt;h3&gt;Part 3 - Ruby、Node 的比较和欧洲创业社区&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：难得碰到一个 Node 和 Ruby 双修的。我们在&lt;a href="http://teahour.fm/2014/02/24/first-nodejs.html"&gt;以前（45期：和《深入浅出Node.js》作者朴灵一起聊聊Node.js）&lt;/a&gt;采访朴灵的时候，由我和 Terry 两人主持。而我们对 Node 都不太了解，只好让朴灵来说。你两边都玩，那么你对这两个语言怎么看？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我个人还是比较偏向 Ruby 的，希望 Ruby 稍微给一点力。但是以现在的趋势来说，Node 的还是很有希望的。比如 ES6 的 sppec，发展趋势蛮好。但是我对这个社区不是特别感兴趣。虽然有层出不穷的 library，但是真正写得好的还是很少，特别是做过单元测试的。但是有一些好东西，比如 ES6 添加了很多编程语言的功能，比如 &lt;code&gt;constructor&lt;/code&gt;，可以写 OOP。Node 可以做 kernel work、annotation 和 dependency injection，慢慢成熟。我前两天还看到有些人在 ES6 上写了一些 spec——怎么样让 Node 实现多线程，实现平行计算。还是很有希望的社群。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：有没有感觉，在欧洲 Node 社区在不断发展，Ruby 社区有点相对 go down？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：有这个趋势。但是我在跟很多创业公司谈的时候，大部分创业的人还是在用 Ruby。有个比较大的创业公司叫 &lt;a href="https://state.com/"&gt;state.com&lt;/a&gt;，他的投资方是因特网之父(Tim Berners-Lee)。这个公司在英国，我之前也和他们开发人员聊过。他们用 Ruby，也用 Node.js。Node.js 不做太多后台的数据处理，主要倾向于前台的渲染。state 做的不是 single page project，需要考虑 SEO。但是通过 Node 做一些优化。大部分的后台的 API 都还是用 Rails 写的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这个挺有意思的。Node 在中间，然后在前端后端，相对于在中间做了一个桥。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：其实我们公司差不多也是这样类似的构架，我们虽然没有利用 Node 做 SEO，但是我之前说过大概有 6 - 7 个程序，6 - 7 个 logic 都是在用 Node 写的。比如一个 proxy 是用 Node 写出来的。但是也是非常困难，我们需要为此做一些 process management。Node 是一个 single event loop，要保证程序 crash 以后不会影响到其他的用户，需要做很多高端的优化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：了解。这个是 single event loop 的缺点。说到英国的创业环境，我想要了解一下。我可能知道的不多，但是像我们风车在用的 &lt;a href="http://pusher.com/"&gt;Pusher&lt;/a&gt;，支付上用的 &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt;，都是英国的创业公司。所以英国的创业公司是怎样的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：英国的创业环境应该是很好的，大家的趋势都是互帮互助。我发现一个非常好的现象，大部分有创业精神的人，都不是从天而降的一个点子，而是从自己的需求开始。有一个比较出名的打出租车的公司叫 &lt;a href="https://hailocab.com/london"&gt;Hailo&lt;/a&gt;，在英国是一个做的比较大的公司。它是用手机打车的一个工具。我之前和他们聊的时候，他们的需求也是从自身的需求开始的。这个创业者，家里两代人都是开出租车的。一开始宣传的时候都是从自己家人开始宣传的。比如说我爸爸，我妈妈他们都需要提高载客的时间，从这个地方开始宣传的。&lt;/p&gt;

&lt;p&gt;还有一些比较好玩的，是在欧洲的一个建立旅游行程的工具，叫 &lt;a href="http://citymapper.com/london"&gt;CityMapper&lt;/a&gt;。用来标记从这个地点怎么坐公交车、坐地铁到另外一个地点。这个需求也是从自身开始。原来没有什么工具能做到很准确的推送和预测，他就从头到尾写了这样一个工具。到后来，这样一个工具，在法国和纽约都比较热门。我身边的朋友都在用这个工具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：那英国的创业环境和欧盟的其他国家比起来怎么样？我弄欧盟签证的时候，除了英国不行，其他都行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：去欧盟其他国家其实还是蛮方便的。你可以申请法国的签证。法国属于欧盟，会给你一个比较长时间的签证，然后用欧盟的多入境的签证，1 年的时间内可以在欧盟里随便进出。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：但是，除了英国。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对，除了英国。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：这很头疼。那对于整个欧洲来说，英国的整个创业环境处在哪一个层次？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我不敢说其他城市，伦敦的环境还是非常好的。在伦敦有很多很棒的创业公司。非常非常多，我都没有办法数了。我原来参加活动的时候，和一个人在台下聊过，1 年后他已经在台上聊自己的产品了。所以我真的很佩服外国人。他们实在是太有魄力了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：既然你们考虑在国内招人，然后让他人肉翻墙。那么介绍一下英国的衣食住行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：衣食住行的话，一般来说，做工程师的话，工资都是在 30000 英镑/年。一般的初级工程师是这个价格。最贵的东西是房租和交通，吃饭上花的钱不是特别多。我觉得在上海吃饭的价格跟英国差不多了。但是伦敦的房租很贵，地铁也很贵。大概的价格是这样的。我现在一室一厅的房子的房租大概是 1000 朝上一个月。英国地铁是分区的，从 1 区到 6 区。我买了 1 区到 2 区的地铁票，包月是 120 英镑。地铁票每年都在涨价，去年是 116/月，今年是 120/月。所以说这都是大头。吃饭的话一个月如果你比较省的话，大概 500 英镑以下就可以做到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：按照你这个介绍的话，junior 的工资是 30000 英镑/年吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我找工作的时候对银行和金融没有特别感兴趣。如果做金融的话，junior 的工资相对高一些，大概是 40000 英镑朝上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：国内的很多程序员真的非常优秀。如果是 senior 的话，在英国的收入能达到怎样的水平？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：senior 的话，当然不能跟 Facebook 比，至少在 60000 英镑朝上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：所以可以给国内一些人参考。现在人肉翻墙是一个很火的话题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：特别是上海，上海这个天气，真的是没有办法形容。因为我是2月2日回上海的，那个飞机要迫降到厦门然后再到厦门，就是因为雾霾，整个飞机晚点了 6 个小时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：但是伦敦比上海就少了一个霾，雾还是有的嘛。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：雾其实没有很多，但是雨很多，我在回上海的时候差不多一个月没有见过太阳。冬天一直在下雨。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：像 Qubit 来说，待了 3 年多，是家创业公司，之前你提到 F1，在英国电信有过工作经历，所以我想了解你在 F1 干嘛了？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我之前在 F1 做了两个赛季，主要是帮他们写一些赛车策略上的软件。看赛车的话，国内应该还是有很多 F1 的 fans。从专业角度上看，F1 要看策略。看策略还是蛮有意思的。在欧洲有一些电视台，他们有一些策略的软件，能提前预测，赛车的油要加多少，轮胎要换什么样子，driver 是怎么开车的。每个赛车队都是有自己的一套软件的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你在哪个赛车队？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我之前在雷诺，现在车队改名叫莲花。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你相当于做策略分析？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：帮他们提供一些软件。做策略分析要专业的策略分析师。但我在层面上还是有一些了解的。每个车队都有一些历史数据，包括每个赛车手开车的习惯是什么，如 &lt;a href="https://en.wikipedia.org/wiki/Lewis_Hamilton"&gt;Lewis Hamilton&lt;/a&gt; 他打弯的时候是非常用力的，有一边的轮胎在磨损上比其他赛车手要高一些。数据接收的话，大部分赛车预测的数据都是实时给出。有一个公司叫 FOM（Formula One Management有限公司），他们提供整个比赛的规则和数据。大部分数据都是和时间有关，比如车子通过每一个赛道的时间是多少，他跑到第几圈。在赛外知道这件事情，还是非常 surprise 的。他们可以通过非常简单的一个时间数据就可以从头到尾了解到这个 driver 的 performance，包括其他车手的 performance。还是蛮有趣的一个工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：听起来是科技改变赛车。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：这有件搞笑的事。虽然看起来他很高端，但当年的时候，那些数据都是靠人工提供的。有一个人在赛道拿着一个计时器，每辆赛车跑过的时候他都会按一下计时器。但是现在会好一点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你有没上去玩过？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我没有上去过。不过我之前的办公室是在雷诺的一个工厂里面，在一个很偏僻，没有人烟的地方。上班如果骑车或者开车，只能看到一些动物，比如狐狸，梅花鹿，总之就是很偏僻的小山村。之前雷诺的工场分了两个。一个是在英国，一个是在法国。法国主要是造引擎的。英国是造车架的，包括整个车子的外框、车头。就是前翼、后翼和车身。英国这里还包括提供一些软件更新。那时候我的办公室楼下就是组装的地方。每个车队都要准备 4 辆车，2 个给 driver，另外两台给车手赛前预备。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：想想都觉得酷。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：基本上每天下午都要试引擎。每天 5 点钟之后，在我办公室下面要开引擎热车，那声音非常非常响。他们加了消音器之后，声音还是非常非常响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：不过从这段经历啊，到你后面的东西，都是在和数据打交道。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：都是在这个产业里做的。不知道怎么可以脱离这个行业。我对数据处理，怎么样让用户了解怎么去使用数据的了解还是比较多的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：其实不用脱离啊，我觉得这块现在很好。大数据其实很火。那你在学校是学什么的呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我是 Computer science 的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你是在计算机专业里偏数据这一块吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：偏理论一些。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你在英国待了多久？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：差不多 10 个年头了吧。然后 5 年学习，5 年工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：相当于在英国读了个大学就开始工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：大学本科和硕士，然后再工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：英国本硕只要 5 年。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：本科是 4 年，硕士 1 年。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：硕士在英国只需要 1 年，还是你学的比较快？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：只要 1 年。我是在帝国理工攻读的硕士。在帝国理工，学硕士是非常折磨人的。帝国理工是一个蛮有名以工程著名的学校，毕业率是非常低。如果你学 EE，或者是 CS，基本上毕业率在 60%。我第一次接触 Ruby 的时候是在 2008 年，还是比较早的。我记得 08 年那时候，Ruby 的版本是 1.8，Rails 刚出到 2。我大学的一个学长，他是一个很不淡定的人。他毕业的时候，一直想做一个创业公司，一个 social network。他找到我，说，“那好吧，那我们要用什么来写？”他可能想写 PHP，而我又是一个 hipster 的人，想学一个新的语言。当时我就比较喜欢 Ruby，所以就很莫名其妙的看了这一套东西。所以说就帮他做了一点东西。但是他当时对这个东西不是特别感兴趣。所以我跟他就是因为兴趣不合，就分开来了，也祝福他能把东西做好。后来我在大学毕业论文的时候，就写了一套 social network。我对这个东西还是蛮感兴趣的，就用 Rails 构架了一个 social network，有点像 Facebook，有点像 forum。像一个论坛，但是这个论坛里可以构架一些 apps。我记得当时在论文里写了一些关于 BDD 的东西。我还是蛮早的时候就接触了这一套东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：刚才你提到了一些 Node 不是特别舒服的地方，比如不太注重工程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我可能是片面的了解了。大部分写前端代码的人，没有太多的后端的经验。当然有些工程师有，但是他们没有太多后端的经历的话，对于一些具体的比较工程类的构架或者是怎么样能写出可以维护的代码不太了解。但都是因人而异。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：我们原来采访了朴灵嘛，朴灵也提到了类似的观点。把 Node 用得比较好的，都是来自后端的人。他们在后端有一些比较强的 background，到了前端这块，他们的整个思维会带过来。真正做得好的，能推进 Node 的可能会是后端的这些人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：非常同意。&lt;/p&gt;

&lt;h3&gt;Part 4 - Share Picks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：今天非常感谢你这么早起来录这一期的 Teahour，今天的节目就到这里为止。下面就是我们 Teahour 的一个例行环节，叫 short picks。Short picks 就是你可以任意分享一个你觉得有意思的东西，或者想玩的东西，或者在看的一本书。你先来？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：好吧。我说的可能会稍微长一点。我的兴趣还是蛮多的。去年我大概花了 1 年的去玩多轴飞行器。我推荐大家去看看这个公司，叫做 &lt;a href="http://store.3drobotics.com/"&gt;3DR（3DRobotics）&lt;/a&gt;，是 Chris Anderson 开的一个专门做飞行器的公司。最近这个主题还是蛮流行的。最近的新闻中 Facebook 要做他们自己的飞行器。而之前 Amazon 也有用他们自己的飞行器做一些货物的 delivery。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：自动送货。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：这一方面是一个趋势。我对这个方面也是蛮感兴趣的。大家可以看一下 3DR。和一个最新的飞行控制器的平台，叫 &lt;a href="http://3drobotics.com/pixhawk/"&gt;Pixhawk&lt;/a&gt;。这个飞行控制器是一个非常好的 32 位飞行控制器。之前的都是 8 位的，而这个控制器可以做平行计算，可以加非常多的感光器件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：没有图片，我没法想象。我看过一种，是 4 个圆组成的方，每一个圆里有一个机扇的那种。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：差不多吧。他是分多轴的嘛。你可以选 4 个，选 6 个。如果大家看《爸爸去哪儿》，他们拍摄的时候都是用那个拍的。他在空中拍摄都是用四轴拍的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：你等一下可以给我一张你在玩那个的照片。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：我可以给一个链接给大家看我是怎么把它&lt;a href="http://instagram.com/p/fI1EzmPbGW/"&gt;摔坏的录像&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：好的。这个我没玩过，我不太了解。但是我在外面看别人玩过，是挺好玩的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：这个东西还算是蛮贵的。我有一个理想就是退休后读一个博士，往这个方向读。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：好吧。听你这么介绍，是可编程的吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：对，是可编程的。这个社区还是蛮大的。有不同版本的飞行控制器，有几个比较有名的，有一个叫 ??。有一个法国人，他把任天堂 Wii Remote 的 controller 全部拆掉，然后把它改成了一个飞控的平衡控制器。在另外一个社区 3DR，他们专门造的一个飞行控制器，叫 APM。也是一个非常有名的飞行控制器。最近他们发布的一个 Pixhawk，这个新的控制器可以用Lua编译代码。之前老的都是要写类似于 C 的代码，通过 Arduino 来编译的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：什么时候让我看看你那个摔坏的视频能不能打动我，我也想尝试一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：玩这个要注意安全，还是蛮危险的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：也就是说这个不太适合给小孩子当玩具。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：不太适合，这个东西不是属于玩具类的，是属于“杀伤性武器”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：好的，OK。那我放弃这个想法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：你可以买一些很简单的，还有一些玩具类的，不需要太多的调试就可以飞的那些。那些还是可以做玩具的。它有一些小的飞行控制器，大概有手掌那么大吧。还是可以给小孩子玩玩的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：我觉得小孩子应该还是挺喜欢玩得。谢谢介绍。还有没有其他的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：没有了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：OK，那今天我的 picks 是一个软件。最近 Google 停止支持 Gmail Notifier 了。那我向大家推荐一个我朋友写的软件，叫 &lt;a href="http://ashchan.com/projects/gmail-notifr"&gt;Gmail Notifr&lt;/a&gt;，是一个 open source 的在 Mac 上的客户端。很多人的工作习惯都会例行处理邮件。有的时候，我们看到一个邮件提醒，让我们知道大概什么东西发过来了。但是我们不会想实时的去检查，而是每隔一小时两小时，让它自动去检查一下，然后告诉我邮箱里有邮件。所以说用一个 Gmail Notifr，会比较简单的一点，让你觉得工作的更加高效。所以我就推荐一下我朋友写的，我自己在用的不错的软件，叫做—— Gmail Notifr。在 Mac App Store 可以下载。大家可以来支持一下，尝试一下。当然他也是开源的，你可以免费下载。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：那不错，我记得在回国的时候，由于我很多的邮件都是在 Gmail 上，访问起来非常慢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：对。而且用 web 的话会更加慢，用客户端会好很多。IMAP 还好一点。OK，这就是我今天的 picks，最后非常感谢董京来到我们的 Teahour 做客，希望下一次有机会可以在跟你深入聊一下 Qubit 用到的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：可以啊。然后还要告诉大家一下，希望大家期待正在计划组织下一次 Hacker News Meetup。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：顺便说一说，因为你现在正在招人。你可以留个邮箱，让大家可以直接联系你。我相信会有很多人听了这期节目会对加入你们的团队有兴趣。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：好的。或者大家可以在微博上&lt;a href="http://www.weibo.com/u/2462586132"&gt;@我&lt;/a&gt;，我就会看到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：好，那就这样？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：好。谢谢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;叶玎玎&lt;/strong&gt;：88&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;董京&lt;/strong&gt;：88&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>YOU should write!</title>
    <link rel="alternate" href="/2014/04/29/you-should-write.html"/>
    <id>/2014/04/29/you-should-write.html</id>
    <published>2014-04-29T04:00:00Z</published>
    <updated>2014-04-29T04:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
    &lt;img alt="Writing" src="/images/you-should-write/writing.jpg?1398745718" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周的 &lt;a href="http://teahour.fm/2014/04/28/the-story-of-jianshu.html"&gt;Teahour.FM&lt;/a&gt; 迎来了两大内容平台的创业者做客，简书的创使人林立和 Logdown 的创始人 xdite。在节目中，林立和 xdite 分享了他们做内容平台的想法。最近五六年是社交网络的天下，各种社交应用的爆发同时也把人们带入了碎片化时代，尤其是 140 字的限制，使得人们在快速生产内容，快速消费内容，越来越少的人愿意沉下心思考，记录一些文字。我们的生活其实少了很多精彩，所以很高兴能看到这一年间内容平台重新兴起并且回归，&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;、&lt;a href="http://jianshu.io/"&gt;简书&lt;/a&gt;、&lt;a href="http://logdown.com/"&gt;Logdown&lt;/a&gt;、&lt;a href="http://ghost.org/"&gt;Ghost&lt;/a&gt; 等，每天去看看简书或者 Logdown 里面的推荐文章，我相信一定会有被感动的时候。&lt;/p&gt;

&lt;p&gt;节目中问了一下 xdite 一年的产出是多少，直接被吓到了。在做 Logdown 之前 xdite 已经达到了年写 400000 字，平均一天 1100 字，做 Logdown 之后是只多不少，对于一个创业者、技术开发人员而非作家来说，我必须得说是非常惊人的数字，当然在这个产出下，获得的回报也是惊人的，比起之前写的一篇文章就给 Logdown 带来了 30 万的 PV。&lt;/p&gt;

&lt;p&gt;37signals 曾在其畅销书 『Getting Real』 中提到，招聘时，永远选候选人中写得更好的，无论是设计师、程序员、运营人员、销售还是其他。写得好的人也必然同时更善于思考和沟通，所以也能更好的与代码和人打交道。&lt;/p&gt;

&lt;p&gt;程序员大多都很痛恨写文档，尤其是写那些认为没用的文档，继而懒得记录自己的思考和心得。我们在 teahour 也聊到这点，理解但非常推荐开发人员多写文字，坚持写作对个人成长带来的好处是你无法估量的。我自己在团队中，每一个功能发布，都是要求负责人直接去写发布博客，不但要会实现，还是能给用户讲明白前因后果。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
    &lt;img alt="Writing" src="/images/you-should-write/writing.jpg?1398745718" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周的 &lt;a href="http://teahour.fm/2014/04/28/the-story-of-jianshu.html"&gt;Teahour.FM&lt;/a&gt; 迎来了两大内容平台的创业者做客，简书的创使人林立和 Logdown 的创始人 xdite。在节目中，林立和 xdite 分享了他们做内容平台的想法。最近五六年是社交网络的天下，各种社交应用的爆发同时也把人们带入了碎片化时代，尤其是 140 字的限制，使得人们在快速生产内容，快速消费内容，越来越少的人愿意沉下心思考，记录一些文字。我们的生活其实少了很多精彩，所以很高兴能看到这一年间内容平台重新兴起并且回归，&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;、&lt;a href="http://jianshu.io/"&gt;简书&lt;/a&gt;、&lt;a href="http://logdown.com/"&gt;Logdown&lt;/a&gt;、&lt;a href="http://ghost.org/"&gt;Ghost&lt;/a&gt; 等，每天去看看简书或者 Logdown 里面的推荐文章，我相信一定会有被感动的时候。&lt;/p&gt;

&lt;p&gt;节目中问了一下 xdite 一年的产出是多少，直接被吓到了。在做 Logdown 之前 xdite 已经达到了年写 400000 字，平均一天 1100 字，做 Logdown 之后是只多不少，对于一个创业者、技术开发人员而非作家来说，我必须得说是非常惊人的数字，当然在这个产出下，获得的回报也是惊人的，比起之前写的一篇文章就给 Logdown 带来了 30 万的 PV。&lt;/p&gt;

&lt;p&gt;37signals 曾在其畅销书 『Getting Real』 中提到，招聘时，永远选候选人中写得更好的，无论是设计师、程序员、运营人员、销售还是其他。写得好的人也必然同时更善于思考和沟通，所以也能更好的与代码和人打交道。&lt;/p&gt;

&lt;p&gt;程序员大多都很痛恨写文档，尤其是写那些认为没用的文档，继而懒得记录自己的思考和心得。我们在 teahour 也聊到这点，理解但非常推荐开发人员多写文字，坚持写作对个人成长带来的好处是你无法估量的。我自己在团队中，每一个功能发布，都是要求负责人直接去写发布博客，不但要会实现，还是能给用户讲明白前因后果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;相信每个写作的人都曾有体会，当你提笔去解释一个东西的时候，你以为你知道的事情未必真正知道。写作并不只是简单的记录，而是需要让读者也能跟着你的思路，理解你想表达的东西。所以，要想非常清晰的表达你的观点，写作必然是一次知识体系的重新学习和思绪的梳理，这样才能帮助读者理解。而这个过程，才是你真正的收获。&lt;/p&gt;

&lt;p&gt;写作也是你个人品牌建立和传播的非常有效的方式。永远不要低估文字的影响力和传播力，总会有人因为你的文字而受益。当你分享越来越多的思考和知识，人们会了解到你的个性，了解到你的为人和处事方式。不管是否会有人因此讨厌你，请相信一定会有更多的人喜欢你，他们会因为你的内容继而了解你在做的事情，比如在写的一本书，在做的一个产品，等等。而这些东西会也因为你的品牌而具有同样独特的个性。&lt;/p&gt;

&lt;p&gt;程序员在开源的世界里以码会友，在思想的世界里以文会友。无论是 teahour 还是我的博客文章，在这一年多都给我带来了很多的好朋友，一些甚至在生活中都不可能有任何交集的朋友。人的成长就在于不停的扩大自己的圈子并对等的交流，接触到这么一群非常有思想的人，从这些朋友身上学习到很多东西，才是我最大的收获。&lt;/p&gt;

&lt;p&gt;在分享知识的同时，它可能也会节省你很多时间，比如也许你 Google 到的一个解决方案就是你之前写过的一篇文章。去年在 Teahour 时也问过 xdite 这么高产的背后是如何寻找到写作的主题的。xdite 解释说有很多是很多人重复在问她的问题，她觉得累了，不想花时间一一回答，就把它写了出来让提问者直接去阅读，这样既可以让读者更系统的了解，也能节省大把的时间。&lt;/p&gt;

&lt;p&gt;所以，YOU should write!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“我没时间写东西”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“我不知道写什么”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“我没什么有价值的好写的”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
    &lt;img alt="Writing Process" src="/images/you-should-write/mindnode.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;不要再给自己找借口了，放轻松点，我们不是作家要写一部小说，我们只是作者要写点东西，而如前面所言，写作能让我们梳理整个知识体系，这就够了。Medium 的 slogan 我觉得非常好，『Everyone&amp;rsquo;s stories and ideas』，我们每天都在接收新的信息和新的想法，为何不把它记录成字呢？不要一开始就苛求完美，永远记得&lt;strong&gt;坏的开始就等于成功的一半&lt;/strong&gt;。我觉得我写的每一篇初稿都很烂，但是每次修改都让我觉得比前一次好一点点。到最后发布时，看起来也还不错，至少自己挺满意。&lt;/p&gt;

&lt;p&gt;细细分析，写作的整个过程其实跟做产品还蛮像的。一篇文章的出炉，需要历经计划、调研、初稿、复审、修订和发布的过程。做计划时需要了解文章读者是谁，他们的期望是什么，确定主题思想。调研时比较同类文章，梳理整个思路。一般在这个阶段后，我已经基本有了一个脑图。初稿就严格按照脑图需求，迅速成文。之后听取朋友反馈，多次修订，最后发布。整就一个精益写作的过程。&lt;/p&gt;

&lt;p&gt;写作是一个非常值得培养的习惯。这个技能的练成，没有捷径，唯有不停的练习。时代在回归，人也要回归。千里之行，始于足下，YOU should get started!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test Your MVP, Seriously</title>
    <link rel="alternate" href="/2014/04/17/test-your-mvp-seriously.html"/>
    <id>/2014/04/17/test-your-mvp-seriously.html</id>
    <published>2014-04-17T07:00:00Z</published>
    <updated>2014-04-17T07:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Crossing the Chasm" src="/images/test-your-mvp-seriously/mvp.png?1397752296" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;最近 MetaLabs 既 Flow 之后正式对外发布了一款面向团队的新产品 &lt;a href="http://www.usepeak.com/"&gt;Peak&lt;/a&gt;，看着挺吸引人，所以准备去玩玩看。不过当我进入注册页面后，我犹豫了，相对冗长的信息填写，还要求信用卡信息，再回去看看定价方案，必须年费支付，思考了一会，最后打了退堂鼓。我们做产品的都会有一个共识，尽可能的降低用户的进入门槛，减少注册路径，让用户能尽快的了解产品的特色。而这里 Peak 是反其道而行之，我相信跟我一样因为犹豫最后放弃了的访问会不在少数。但是细细思考后，这种验证 MVP 的方法真好！&lt;/p&gt;

&lt;p&gt;精益创业的核心是以最低的成本做出最小可行产品（MVP），小步验证快速迭代。这里面很难的一点是，怎样才算『最小可行』产品，即使同一个团队每个人心中的答案可能都不太一样，所以最后只能由用户说话。Peak 和我现在在做的风车一样，都属于企业服务，所以最好的验证方式就是用户用&lt;strong&gt;真金白银&lt;/strong&gt;来实际支持你，变成了客户。只有这样，我们才能知道到底是不是在正确的道路上，我们提供的解决方式是否具有足够的价值。国外的企业服务在产品刚推出期间经常会用类似的进入方式，如 14-天免费试用、信用卡准入、年费支付、甚至还有预付等等。我很喜欢这种方式，商业社会从第一天开始，其本质和基础就是建立在价值交换上，你给我提供了价值，我付给你钱，就这么简单。所以，从一开始就开始以吸纳客户为目的的 MVP 验证方式在我看来非常正确，反观国内，不知从何时起，得屌丝者得天下之论甚行，大多创业者喜欢跑马圈地，先把用户圈起来，然后想着总有一天有机会来剪羊毛。然而，可惜的是，绝大多数的创业团队，都撑不到那一天。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Crossing the Chasm" src="/images/test-your-mvp-seriously/mvp.png?1397752296" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;最近 MetaLabs 既 Flow 之后正式对外发布了一款面向团队的新产品 &lt;a href="http://www.usepeak.com/"&gt;Peak&lt;/a&gt;，看着挺吸引人，所以准备去玩玩看。不过当我进入注册页面后，我犹豫了，相对冗长的信息填写，还要求信用卡信息，再回去看看定价方案，必须年费支付，思考了一会，最后打了退堂鼓。我们做产品的都会有一个共识，尽可能的降低用户的进入门槛，减少注册路径，让用户能尽快的了解产品的特色。而这里 Peak 是反其道而行之，我相信跟我一样因为犹豫最后放弃了的访问会不在少数。但是细细思考后，这种验证 MVP 的方法真好！&lt;/p&gt;

&lt;p&gt;精益创业的核心是以最低的成本做出最小可行产品（MVP），小步验证快速迭代。这里面很难的一点是，怎样才算『最小可行』产品，即使同一个团队每个人心中的答案可能都不太一样，所以最后只能由用户说话。Peak 和我现在在做的风车一样，都属于企业服务，所以最好的验证方式就是用户用&lt;strong&gt;真金白银&lt;/strong&gt;来实际支持你，变成了客户。只有这样，我们才能知道到底是不是在正确的道路上，我们提供的解决方式是否具有足够的价值。国外的企业服务在产品刚推出期间经常会用类似的进入方式，如 14-天免费试用、信用卡准入、年费支付、甚至还有预付等等。我很喜欢这种方式，商业社会从第一天开始，其本质和基础就是建立在价值交换上，你给我提供了价值，我付给你钱，就这么简单。所以，从一开始就开始以吸纳客户为目的的 MVP 验证方式在我看来非常正确，反观国内，不知从何时起，得屌丝者得天下之论甚行，大多创业者喜欢跑马圈地，先把用户圈起来，然后想着总有一天有机会来剪羊毛。然而，可惜的是，绝大多数的创业团队，都撑不到那一天。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="High-Tech Product Life-Cycle" src="/images/test-your-mvp-seriously/product-lifecycle.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Geoffrey A. Moore 在其经典著作 『&lt;a href="http://en.wikipedia.org/wiki/Crossing_the_Chasm"&gt;Crossing the Chasm&lt;/a&gt; 』 里，提出了技术产品的生命周期定律，在天使用户和早期大众用户之间有一条很难跨越的鸿沟。结合精益创业的思想，MVP 迭代的做法正是为了能尽可能的去跨过去，可以说，MVP 是给天使用户而做，验证想法修正迭代以期最后改进成适合早期大众用户的真正产品。所以，一定要非常严肃的对待 MVP，而其中关键又是从用户那里得到足够的反馈。然而，既然我们需要用户，需要反馈，那是不是甩开膀子，用免费的方式，有足够的眼球和吆喝就可以了呢？很不幸的是，绝大部分情况下，不是。大量的免费用户也意味着大量的噪音，你得从中找到真正的意见，找到真正用户愿意付钱的点和用户不关心的点。回到价值交换上，用户之所以愿意掏钱成为客户的原因是你的产品的某个价值，越早的了解这个价值并有针对性的去放大这个价值会越助于你跨越鸿沟。想想以下一些场景，是否感觉很熟悉？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有用户告诉你：&amp;quot;你的产品做的很棒，是我见过做得最好的。&amp;quot;&lt;/li&gt;
&lt;li&gt;有用户告诉你：&amp;quot;我一直都很想做一个这样的工具，现在你们做出来了，太好了。&amp;quot;&lt;/li&gt;
&lt;li&gt;有用户告诉你：&amp;quot;第一次使用感觉非常舒服，体验非常好，很适合我们。&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等等，这些是我在做『&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;』时从一些用户那里听到的，但是很不幸的是，说喜欢和花钱购买是两个天差地别的行为，好多这样友好的用户到最后都没有成为客户，也就只能让你在那个瞬间自我满足一下。更糟的是，有些用户可能还会给你一些混淆视听的意见，比如觉得如果有哪些哪些功能会更好。如果你好好的研究过用户，你会发现一件很好玩的事，就是用户和客户对应用的改进意见会有很大的不同。所以，最好的验证 MVP 方式不是看是否有足够大的用户量进来，而是有多少用户真正的需要你的产品并为之付费。一个产品从付费客户开始，会让你更好的了解你产品对于别人的价值，即使没有人愿意付费也是给你一个非常好的调整信号。所以，像 Peak 这种在产品推出之初，增加进入的门槛，让真正对 Peak 提供的解决方案感兴趣的潜在客户进来，在我看来是一种非常正确和值得学习的方式。&lt;/p&gt;

&lt;p&gt;不知为啥，每次我跟一些人介绍风车是收费的时候，整个气氛就会突然变尴尬，好像收费是非常可耻的行为是的。尤其是喜欢开源的技术人员，更会觉得谈钱比较伤感情，只要能做一个别人喜欢用的产品，而不在乎能不能有钱赚。可惜商业是残酷的，没什么好在意的，我反而觉得免费是最偷懒和最懦弱的做法。&amp;quot;Stop talking, take my money&amp;quot; 是很多产品人做产品梦想遇到的事情，但是却很多时候藏着掖着，最后为了如何从免费用户那里赚钱想尽办法，甚至于直接去卖用户了，违背了一开始做产品的初衷。所以，如果你做的产品是一个为别人提供价值的产品，比如企业工具类，请放心大胆的，从第一天开始，就慎重考虑是否免费。如果你连收费都不敢，凭什么让我相信你不是玩一下见势不对就跑路的态度，那时时间比起金钱对我来说才是更大的损失。 免费的模式固然有其很多好处，但是从收费开始会让你更好的了解你的客户，更好的了解你的产品，你也完全可以在后期调整商业模式，提供收费外的其他选择，比如免费增值，但是建立在真正足够了解用户为啥掏钱的原因的基础上。&lt;/p&gt;

&lt;p&gt;收费的另外一个好处是，你的支持成本在初期会降低很多，尤其在本来资源就紧缺的环境下。能提供很好的用户支持一般是创业公司相比较大公司能提供的优势，所以我们无法对一个用户说，因为你没付钱我们就不提供服务或者差一级的服务，每个愿意来花时间提意见的用户都应该得到我们的感谢，不管有多吹毛求疵。所以，这种时候商业模式的区别能帮你省很多力，让你去服务你更愿意服务的客户。&lt;/p&gt;

&lt;p&gt;所有的 MVP 验证行为都是市场行为，依托于大量的假设和验证。你可以通过分析获取隐藏在数据背后的事实，参考『&lt;a href="http://yedingding.com/2014/03/27/growth-from-analytics.html"&gt;创业成长，从分析开始&lt;/a&gt;』，也可以通过与用户交流或者采访来获得真实的反馈。所以，请一定要根据你的 MVP，找到对的人群，严肃的，测试提供的解决方案的价值。如果你认可一个产品给你带来的价值，获益远超过你的付出，也请好好考虑是否购买使用，这不仅仅是支持，也是双赢，更是对整个生态圈的改善。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>创业成长，从分析开始</title>
    <link rel="alternate" href="/2014/03/27/growth-from-analytics.html"/>
    <id>/2014/03/27/growth-from-analytics.html</id>
    <published>2014-03-27T12:00:00Z</published>
    <updated>2014-03-27T12:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Growth Hacker Definition" src="/images/growth-from-analytics/growth-hacker-definition.jpg?1395948474" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;最近一两年间，继 『Lean Startup』 之后，又有一个新的 &lt;em&gt;Buzz&lt;/em&gt; 名词在创业圈子里很火：『Growth Hacker』。Growth Hacker 专指那群既懂技术又懂运营，以技术的手段来驱动市场运营的人才。这里姑且不论这个名词到底是不是被玩坏了，但是其定义的背后，是很多非常好非常值得学习的实战经验，称之为 Growth Hacking。维基百科上对 『Growth Hacking』 的定义是技术创业型团队通过数据分析和量化指标来推广产品时所使用的一种市场运营技术，其中有两个非常重要的点，分析和指标。一切分析的目的都是为了更好的了解你的用户，更好的了解你的产品对于用户的价值，并以指标化数据来指导我们的下一步工作。&lt;/p&gt;

&lt;p&gt;对于创业者而言，每天我们的工作就是让产品能变得更好一点，让客户用得更舒服一点。但是，我们如何才能知道产品是在往好的方向走还是坏的方向走？当我们添加了一个功能后，我们如何知道用户是喜欢这个新功能还是讨厌之？我们又是否知道用户为什么喜欢我们的产品，亦或到底不喜欢哪些地方？我们每天都充满了这类的疑问，而回答这些疑问的最好方式莫过于寻找到那些隐藏在产品背后的真实数字，让数字说话，建立量化模型。只有这样，才能更好更快的成长。知易行难，我相信大部分创业者都知道数据驱动的价值，但是该如何去做去获取这些数据，又应该特别关心哪些数据却是知之甚少。下面就让我们围绕着『分析』这个中心，盘点一下优秀的统计分析工具及其背后的设计思想。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Growth Hacker Definition" src="/images/growth-from-analytics/growth-hacker-definition.jpg?1395948474" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;最近一两年间，继 『Lean Startup』 之后，又有一个新的 &lt;em&gt;Buzz&lt;/em&gt; 名词在创业圈子里很火：『Growth Hacker』。Growth Hacker 专指那群既懂技术又懂运营，以技术的手段来驱动市场运营的人才。这里姑且不论这个名词到底是不是被玩坏了，但是其定义的背后，是很多非常好非常值得学习的实战经验，称之为 Growth Hacking。维基百科上对 『Growth Hacking』 的定义是技术创业型团队通过数据分析和量化指标来推广产品时所使用的一种市场运营技术，其中有两个非常重要的点，分析和指标。一切分析的目的都是为了更好的了解你的用户，更好的了解你的产品对于用户的价值，并以指标化数据来指导我们的下一步工作。&lt;/p&gt;

&lt;p&gt;对于创业者而言，每天我们的工作就是让产品能变得更好一点，让客户用得更舒服一点。但是，我们如何才能知道产品是在往好的方向走还是坏的方向走？当我们添加了一个功能后，我们如何知道用户是喜欢这个新功能还是讨厌之？我们又是否知道用户为什么喜欢我们的产品，亦或到底不喜欢哪些地方？我们每天都充满了这类的疑问，而回答这些疑问的最好方式莫过于寻找到那些隐藏在产品背后的真实数字，让数字说话，建立量化模型。只有这样，才能更好更快的成长。知易行难，我相信大部分创业者都知道数据驱动的价值，但是该如何去做去获取这些数据，又应该特别关心哪些数据却是知之甚少。下面就让我们围绕着『分析』这个中心，盘点一下优秀的统计分析工具及其背后的设计思想。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://www.google.com/intl/zh-CN_ALL/analytics/index.html"&gt;Google Analytics&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Google Analytics" src="/images/growth-from-analytics/google_analytics.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;说起分析工具，估计 Google Analytics 是目前使用最广泛的，强大且免费。Google Analytics 主要给我们提供了几大关键指标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;页面浏览量（Page View）&lt;/strong&gt;：网站在某一段时间内的页面浏览量是多少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户浏览量（User View）&lt;/strong&gt;：网站在某一段时间内的用户浏览量是多少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;渠道来源（traffic sources）&lt;/strong&gt;：用户流量来源于哪些不同的渠道。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访客特征（User demographics）&lt;/strong&gt;：访问用户具有哪些特征值，用来做用户分类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问路径（Flow Report）&lt;/strong&gt;：用户在网站上的访问行为，各个页面的进入率和跳出率。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不难发现，整个 Google Analytics 的数据是以访问为中心的，可以很方便的了解网站的访问和渠道转化情况，可以说对于大部分的网站尤其是内容类网站来说已经足够。但是，对于像&lt;a href="https://fengcheco.com"&gt;『风车』&lt;/a&gt; 这样的客户驱动型 SaaS 产品类网站，Google Analytics 就显得不合适了。比如说，当我知道了风车首页每天的访问量达到了一千或者一万，来自于&lt;a href="http://36kr.com"&gt;36氪&lt;/a&gt;或者&lt;a href="http://yedingding.com"&gt;我的博客&lt;/a&gt;的比例分别是多少，页面之间的转化率和退出率是多少等等这些访问信息，我下一步该怎么办，我该如何改进？不知道！对我来说，关键的数据不在于这些数字化的访问量，而是用户本身，真正有价值的是用户从访问到注册、从注册到使用、从使用到订阅服务，分别是怎样的一个过程。&lt;/p&gt;

&lt;p&gt;所以，以访问为中心的分析工具并不足够，我需要的是以用户为中心的分析工具。目前，比较流行的两个选择是 Mixpanel 和 KissMetrics。&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://mixpanel.com"&gt;Mixpanel&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Mixpanel" src="/images/growth-from-analytics/mixpanel.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Mixpanel 从页面访问量数据的局限跳出来，转而以用户行为为驱动。Mixpanel 主要给我们提供了几大关键指标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户动态分析（Trends）&lt;/strong&gt;：你关心的用户行为发生了多少次，占总比例多少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行为漏斗模型（Funnels）&lt;/strong&gt;：某些关键行为是怎么发生了，每一步有多少的留存率和流失率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户活跃度（Cohorts）&lt;/strong&gt;：网站用户的活跃度如何，可以用来区分忠实用户和普通用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单用户行为分析（People）&lt;/strong&gt;：单个用户在网站上做了哪些操作，过程是如何的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的用户行为对应一个事件，你需要事先规划好你想跟踪哪些事件。比如以&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;的注册转化率为例，我们希望了解所有访问的用户中，有百分之几的比例注册了，首次访问注册的比例是多少，这些用户是怎么注册的，是通过顶部的注册快捷按钮，还是查看产品信息后注册的，亦或是查看了其他如用户教程页面后注册的。在我们的首页，有多少用户是查看了产品一览图后就注册的，有多少用户是查看了更多的信息后注册等等，都是我们预设的一个事件。有了这些信息后，我们在提高注册转化率这个目标上，就能更有针对性更有方向性的做实验，也能很直观的了解到底每个变化是带来了提升还是降低。&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.kissmetrics.com"&gt;KissMetrics&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="KissMetrics" src="/images/growth-from-analytics/KissMetrics.png?1395948474" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;KissMetrics 跟 Mixpanel 很类似，都是以用户行为为导向的分析工具，所提供的功能也基本一致。不过 KissMetrics 在针对用户的行为分析上做的更深入也更简单，能让你更加清楚地了解用户行为背后的各方数据。Mixpanel 也能做，就是需要更多的去学习它的功能。&lt;/p&gt;

&lt;p&gt;至于是选用 Mixpanel 还是 KissMetrics，总体上来说我觉得都是很不错的分析工具，都可以去试试。如果你有所犹豫不知道该选哪个的话，我的建议是抓阄，:) 开个玩笑，我不建议浪费时间在选择上，重要的是开始做了。但是如果你真想评测一下哪个更适合你的产品场景，推荐尝试一下 &lt;a href="https://segment.io"&gt;Segment.io&lt;/a&gt;，一个在各种统计分析工具前面的代理，可以同时使用 Mixpanel 和 KissMetrics，做结果比较，当然也就可以无缝地切换 Mixpanel 和 KissMetrics。&lt;/p&gt;

&lt;p&gt;到此为止，现在我们已经有用户数据了，也知道问题在哪里，那么我们该如何来解决这些问题吗？前面也介绍过了，分析的目的是为了指导下一步工作，让执行更有方向性和目的性。这时就需要更加专业化的进阶分析工具，如 UserCycle、Customer.io 和 Optimize.ly。&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://usercycle.com"&gt;UserCycle&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="UserCycle" src="/images/growth-from-analytics/usercycle.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;UserCycle 的卖点很简单，你并不需要大量的数据，你真正需要的是每次专注一个指标，获取能让你用来提升这个指标的目标数据，进而提供执行的辅助。如果说 Google Analytics、Mixpanel 和 KissMetrics 是纯粹的分析工具的话，UserCycle 则做得更多，从统计到用户分组、从分组到生命周期维护、从生命周期到分组实验测试，各方面了解用户行为，提升用户的价值。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统计分析（Trends） &amp;amp; 用户分组（Cohorts）&lt;/strong&gt;：跟前面的几类一样，以用户行为为中心，让数据说话。也根据用户对于产品的参与程度不同，划分成不同的群组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生命周期维护（Lifecycle Messaging）&lt;/strong&gt;：与用户不停的保持互动，既让客户更满意，也知道为何流失用户。基于之前的用户分组，方便根据用户的不同情况，采取不同的互动方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分组实验测试（Split-Test Experiments）&lt;/strong&gt;：当知道用户为什么喜欢你的产品或者讨厌你的产品的时候，你就可以有目的去改进产品了。在改进产品的时候可以多采用分组测试，看不同的变化带来的改进会有什么不同，寻找到最优解。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="http://customer.io/"&gt;Customer.io&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Customer.io" src="/images/growth-from-analytics/customer.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;Customer.io 做的事情比起来就简单多了，它也只做了整个分析过程中的某一点，&lt;strong&gt;生命周期邮件（Lifecycle Email）&lt;/strong&gt;。一个产品的成功与否，关键在于看有多少忠诚的客户，邮件互动就是为了制造忠诚的客户。而邮件互动的关键又在于如何在正确的时间给正确的用户发正确的内容来提高邮件打开率。同样以&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;为例，对于活跃的用户我需要跟用户互动的目标和跟一次性用户互动的目标显然会不同，所以也就不能给同样的邮件内容。所以，我必须了解用户之间的差异，基于用户的不同行为发送不同的邮件来互动，而这，就是 Customer.io 在解决的问题，专注在邮件互动这一块。&lt;/p&gt;

&lt;p&gt;同类的产品还有 &lt;a href="https://www.getvero.com/"&gt;Vero&lt;/a&gt;。不过风车目前没有在使用这些工具，一是因为 Cohorts 功能跟 Mixpanel 有所重复，二是因为邮件发送我们直接使用了 SendCloud，没必要再使用一套。但是这两个产品的创始人都是很好的 Growth Hacker，推荐订阅其产品的邮件列表。&lt;/p&gt;

&lt;h3&gt;&lt;a href="https://www.optimizely.com/"&gt;Optimize.ly&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Optimizely" src="/images/growth-from-analytics/optimizely.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;非常简单直接的标语，Optimize.ly 就是 A/B 测试的利器。A/B 测试对于现在的创业者来说已经不再陌生，但是如何去做以及怎么做对于很多人来说都略显陌生。当我们定义好我们想去尝试的实验，可以通过 Optimize.ly 非常简单的修改页面，然后剩下的就不用操心了，可以说即使是没有技术背景的市场人员也能很简单的学会如何做 A/B 测试。Optimize.ly 会根据用户行为的不同，给出不同的测试报告，让我们能真真切切的了解对于转化率的影响，持续的改进流程和页面来让产品变得更好。&lt;/p&gt;

&lt;p&gt;除了 Optimize.ly，&lt;a href="http://unbounce.com/"&gt;Unbouce&lt;/a&gt; 也是不错的 A/B 测试工具。或者你也可以不使用这类第三方工具，全部自己控制来做一些测试，只是相对会更耗时间，要权衡一下是否值得。&lt;/p&gt;

&lt;h2&gt;一切为了成长&lt;/h2&gt;

&lt;p&gt;了解和使用了上面所说的这么多工具，其实目的也非常明确，就是为了更好的成长。这正是 Growth Hacking 的核心目标。而成长，从分析开始。Dave McClure 曾对评估成长提出了一个很简单的 AARRR 指标模型：Acquisition（用户访问）、Activation（注册转化）、Retention（用户留存）、Referral（推荐分享）和 Revenue（客户转化）。所有的分析和执行正是为了提高这些数值。我们很幸运在现在这个时代，能有这么多人出来分享他们的经验，能看到有这么多优秀的应用能帮助我们更好的的成长。准备好了，以目标为导向，以数据为基础，善用第三方工具，不停的实验，不要害怕犯错，然后去享受这成长的过程吧。&lt;/p&gt;

&lt;h2&gt;广告时间&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fengcheco.com?utm_content=techstartup"&gt;风车&lt;/a&gt;是一款以任务管理为基础，最适合技术创业团队的高效项目管理工具。创业路上，统计分析工具帮助你在市场上更好的成长，而风车协作工具则帮助你的团队更好的成长。&lt;a href="https://fengcheco.com?utm_content=techstartup"&gt;现在就开始！&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
  It&amp;rsquo;s easier to teach an engineer business than it is to teach a business person engineering. - by Paul Graham
&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>『风车』技术架构介绍</title>
    <link rel="alternate" href="/2014/03/20/fengcheco-architecture.html"/>
    <id>/2014/03/20/fengcheco-architecture.html</id>
    <published>2014-03-20T02:00:00Z</published>
    <updated>2014-03-20T02:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车" alt="Fengche.co" src="/images/fengcheco-architecture/logo.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末，应邀在 &lt;a href="http://hnshanghai.com"&gt;Hacker News 上海聚会&lt;/a&gt;和 &lt;a href="http://shruby.github.io/"&gt;Ruby 上海活动&lt;/a&gt;上做了『风车』架构介绍的分享，在此感谢各位组织者和活动场地提供方。&lt;/p&gt;

&lt;p&gt;风车这个项目开始于 2011 年 11 月份，之前叫做 Pragmatic.ly。从第一天开始我们基本上就定了大致的框架结构，在今天回头看，基本上整个架构都没有什么变化，可以算是个很成熟和很适合时代的方案，☺。&lt;/p&gt;

&lt;p&gt;最近一两年，作为技术人员，我们都能很明显的感觉到前端技术的飞速发展，比如 HTML5 支持，移动端优先、响应式界面设计以及层出不穷的各种客户端框架。而所有这些，都是基于一点：浏览器的高速发展。Chrome、Firefox、Safari、Opera 甚至于 IE，最近几年发展的都很快，不夸张的说，这些浏览器已经不再是浏览器，而是成为开放平台，有各自的扩展插件机制。这些极大地改变了网站开发的方式，网站开始应用化。&lt;/p&gt;

&lt;p&gt;风车即是如此，设计得非常接近桌面应用，比如下面这些特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重客户端，所有的业务逻辑都在客户端，响应非常迅速&lt;/li&gt;
&lt;li&gt;单页系统，项目内操作不需要刷新页面，操作非常流畅&lt;/li&gt;
&lt;li&gt;三栏布局，左中右栏自左向右各司其职，信息非常清晰&lt;/li&gt;
&lt;li&gt;实时更新，项目内任何更新都会实时的同步到你的页面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而在这个设计的背后，就是其本身的技术栈。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车" alt="Fengche.co" src="/images/fengcheco-architecture/logo.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末，应邀在 &lt;a href="http://hnshanghai.com"&gt;Hacker News 上海聚会&lt;/a&gt;和 &lt;a href="http://shruby.github.io/"&gt;Ruby 上海活动&lt;/a&gt;上做了『风车』架构介绍的分享，在此感谢各位组织者和活动场地提供方。&lt;/p&gt;

&lt;p&gt;风车这个项目开始于 2011 年 11 月份，之前叫做 Pragmatic.ly。从第一天开始我们基本上就定了大致的框架结构，在今天回头看，基本上整个架构都没有什么变化，可以算是个很成熟和很适合时代的方案，☺。&lt;/p&gt;

&lt;p&gt;最近一两年，作为技术人员，我们都能很明显的感觉到前端技术的飞速发展，比如 HTML5 支持，移动端优先、响应式界面设计以及层出不穷的各种客户端框架。而所有这些，都是基于一点：浏览器的高速发展。Chrome、Firefox、Safari、Opera 甚至于 IE，最近几年发展的都很快，不夸张的说，这些浏览器已经不再是浏览器，而是成为开放平台，有各自的扩展插件机制。这些极大地改变了网站开发的方式，网站开始应用化。&lt;/p&gt;

&lt;p&gt;风车即是如此，设计得非常接近桌面应用，比如下面这些特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重客户端，所有的业务逻辑都在客户端，响应非常迅速&lt;/li&gt;
&lt;li&gt;单页系统，项目内操作不需要刷新页面，操作非常流畅&lt;/li&gt;
&lt;li&gt;三栏布局，左中右栏自左向右各司其职，信息非常清晰&lt;/li&gt;
&lt;li&gt;实时更新，项目内任何更新都会实时的同步到你的页面&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而在这个设计的背后，就是其本身的技术栈。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4&gt;总览&lt;/h4&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车架构" alt="Fengche.co Overview" src="/images/fengcheco-architecture/arch.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spinejs.com"&gt;Spine.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pusher.com"&gt;Pusher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;风车在客户端使用的是 Spine.JS，后端使用的是 Ruby on Rails。实时消息同步用的是 Pusher。(三个里面有两个因为莫名其妙的原因打不开&amp;hellip; -.-)&lt;/p&gt;

&lt;p&gt;Spine.js 是一个轻量级的 MVC JavaScript 库，由&lt;a href="http://shop.oreilly.com/product/0636920018421.do"&gt;《Javascript Web Applications》&lt;/a&gt;的作者 &lt;a href="http://alexmaccaw.com"&gt;Alex MacCaw&lt;/a&gt; 基于 Backbone.js 改良。Spine 库使用 CoffeeScript 编写，整体代码量仅一千行左右，比起 Angular.js, Ember.js 这些框架来说少的多，非常容易学习和上手。&lt;/p&gt;

&lt;p&gt;Rails 目前我们在使用的还是 3.2 版本，基本上是用来做 API 服务器，只管数据，不做逻辑。上周活动有些朋友也问到基本只做 API 服务器，为啥不选用更轻量的方案如 Sinatra，Grape 之类。一是从开发上来说，Rails 默认这一套用起来比较舒服，我们除了 API 之外还有一些第三方应用的集成和管理性功能，所以整体建站更方便。二是我们目前还没遇到大的性能上问题，所以没必要去更换。如果下一阶段真有需要了，会把 RESTful API 专门独立出来。&lt;/p&gt;

&lt;p&gt;Pusher 是一个基于 WebSocket 的实时消息推送服务，集成到应用中也非常方便。即使在不支持 WebSocket 的浏览器里（对，没错，说的就是 IE），也提供默认的备用方式，可选择 Flash Socket 或者 SockJS。整体体验来说，Pusher 算是一个很不错的解决方法，轻、快，给我们节省了大量开发时间，只需要关注产品的核心价值。不过如果你的应用对于实时性要求非常严格，比如交易系统，可能 Pusher 的稳定性还不够符合你要求，因为你懂的一些网络原因。&lt;/p&gt;

&lt;p&gt;当浏览器刷新页面的时候，会向服务端发起一个请求。服务端收到这个请求后，会返回一个不带数据的纯 HTML 空模板。然后客户端渲染模板后，再次通过 RESTful API 向服务端请求项目的真实数据（JSON 格式），再由客户端对数据做处理并呈现，得到用户真正看到的页面。之后，会跟 Pusher 服务器建立一条 WebSocket 的长连接，接收推送信息。当服务端有任何更新的时候，会发送消息到 Pusher 服务器，再由 Pusher 服务器传输到客户端浏览器，页面同时也得到更新。以上，就是一个简单的过程。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车前端架构" alt="Fengche.co Frontend Overview" src="/images/fengcheco-architecture/frontend.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h4&gt;客户端&lt;/h4&gt;

&lt;p&gt;上面也介绍过了，风车的前端用的是 Spine.JS 和 jQuery。在移动端稍微有点不同，是 Spine.JS Mobile 和 Zepto。在目前这个时候，我计算了一下，压缩后的 JS 和 CSS，包括所有第三方的库，已经将近 270 KB。这里感谢一下&lt;a href="http://www.qiniu.com"&gt;七牛云存储&lt;/a&gt;，风车的这些静态文件因他们的 CDN 服务，能很快的下载到用户端，加速页面的加载。&lt;/p&gt;

&lt;h5&gt;Spine.JS&lt;/h5&gt;

&lt;p&gt;Spine 上面已经介绍了不少，这里再介绍一个我很喜欢的特性：&lt;em&gt;Asynchronous interfaces&lt;/em&gt;。当我们决定把逻辑从服务端移到客户端的时候，就是要提高用户的整个使用体验，要能非常迅速的对用户行为做出响应。所以，当用户做了一个操作更新数据的时候，不要再显示个 loading spinner，让用户去等待数据更新完毕，而是应该立刻给出页面的变化。这就是异步 UI，通过解耦客户端 UI 交互跟服务端数据同步，保证了交互的流畅性。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="CoffeeScript" src="/images/fengcheco-architecture/dhh-coffee.png?1399041455" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;CoffeeScript + Eco&lt;/h5&gt;

&lt;p&gt;这里真的很佩服 DHH，当时力排众难固执地在 Rails 3 里面默认加入了 &lt;a href="http://coffeescript.org"&gt;CoffeeScript&lt;/a&gt;，让 CoffeeScript 迅速地流行起来。Coffee 是那种一用就能上瘾的东西，我们几乎所有的 JS 代码都是用 Coffee 写的，最后编译出来的纯 JS 代码也很具有可读性。即使是让人诟病的调试复杂度，对于熟悉代码结构和 Coffee 的人来说也从来不是问题，更不用说现在还提供了 &lt;a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;Source Maps&lt;/a&gt; 的支持。&lt;a href="https://github.com/sstephenson/eco"&gt;Eco&lt;/a&gt; 是 &amp;ldquo;Embedded CoffeeScript templates&amp;quot;，语法跟 ERB 很像，作为一个 Ruby 开发人员没法不喜欢，:)&lt;/p&gt;

&lt;h5&gt;Model-View-Controller&lt;/h5&gt;

&lt;p&gt;从 MVC 框架来说，Controller 层，主要负责接受请求并处理请求，对应到客户端，请求就是事件，所以 Controller 负责对 DOM 事件的处理和 Router 事件的处理。基于此，风车前端有两种类型的 Controller，一种是跟页面 DOM 打交道的，一种是跟路由打交道的。基于 DOM 的 Controller 是按照页面的结构设计，每个 Controller 对应于一个单独的 DOM 模块，比如风车里面的侧边栏对应一个 Controller，侧边栏里面的任务列表部分和团队成员部分又分别对应一个 Controller，等等。这些 DOM Controller 会监视 DOM 上事件的发生，以及 DOM 对应的数据的更新。而基于 Router 的 Controller 是按照 URL 来设计，用来监视页面 URL 的变化，比如每一项任务都对应于一个单独的 URL，那么点击行为会导致 URL 的变化，这个变化会被 Router Controller 捕捉到，执行相应的操作，整个过程跟 Dom 没有任何关系。&lt;/p&gt;

&lt;p&gt;Model 层，负责所有跟数据有关的处理。绝大多数时候，数据是 URL 对应，所以 Model 层绝大多数时间只需要跟 Router Controller 交互。Router Controller 从 Model 准备好数据后，会触发一个事件，交由 DOM Controller 去渲染相应的页面。&lt;/p&gt;

&lt;p&gt;除了 MVC 三层之外，风车在设计上还使用了很多 HTML5 的特性，除了之前介绍的 WebSocket 之外，还有 History、Web Notification、Drag &amp;amp; Drop 和 LocalStorage。&lt;/p&gt;

&lt;h5&gt;HTML5 History pushState&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://diveintohtml5.info/history.html"&gt;History&lt;/a&gt; 是 Router Controller 的实现基础。我们都已经很习惯了浏览器页面的前进后退来访问历史页面。而很多富客户端应用因为 URL 没有发生改变，就很难支持这点。HTML5 History 就是为了解决这个问题，而在 JavaScript 端提供的一个实现。当我们访问下一个页面的时候，会 push 这个 URL 到栈里，当我们按后退时，会 pop 出这个 URL。Router Controller 需要定义一系列要响应的 URL，这样一旦匹配，就会截获页面跳转，转而去执行相应的代码，渲染出对应数据。所以在风车里，每次页面的修改都是对应一个唯一的 URL，这样除了可以前进后退外，还有个额外的好处是刷新页面后，总是可以回到刷新前的 URL。当然，需要在客户端和服务端用同一套路由。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Web Notification" src="/images/fengcheco-architecture/feature-notification.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;HTML5 桌面通知&lt;/h5&gt;

&lt;p&gt;Web Notification 是桌面端的通知，当一个跟用户相关的事件发生时，比如团队里有人分配了一个任务给你，或有人在讨论里 @ 了你，就会收到一个通知。目前 Chrome 和 Safari 已经直接支持 Web Notification，Firefox 最新版已经支持，老版本需要安装一个插件支持，而 IE 在 10 以上才支持，而且必须加入 pinned site 列表里。具体的可以参考我之前在&lt;a href="https://fengcheco.com/blog/its-not-perfect-but-its-time-to-integrate-web"&gt;风车官方博客&lt;/a&gt;里面写的这篇详细介绍 HTML5 Web Notification 的文章。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Drag &amp;amp; Drop" src="/images/fengcheco-architecture/dnd.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;HTML5 拖放&lt;/h5&gt;

&lt;p&gt;Drag &amp;amp; Drop 之前已经有很多 JS 的实现了，比如 jQuery UI 里面就有 DnD 的支持，HTML5 在规范制定的时候，也把 DnD 加入了进来，做了标准化。风车里面是用的 HTML5 的规范，主要用于把任务拖到某个任务列表里，某个成员里和拖到同个列表不同的位置。&lt;/p&gt;

&lt;h5&gt;有限离线支持&lt;/h5&gt;

&lt;p&gt;上面也介绍了，Spine 里面有个特性是异步 UI，但是如果我们跟服务器之间的连接出现短暂的问题，比如网络断了，那么就会在客户端更新了，但是服务端却没有同步到，这样用户一刷新，就会发现丢数据了。我们针对这个情况，一般发现同步失败，就先把未同步的数据放到 &lt;a href="http://diveintohtml5.info/detect.html#storage"&gt;LocalStorage&lt;/a&gt; 里面，每隔一段时间重试一下，直到同步成功。所以，在页面加载后，即使离线情况下，短暂时间使用风车也不是问题。但是，因为我们目前实现的很有限，也没做版本控制系统，所以在极端情况下，比如团队里不同人对同一个任务做出了更新，后同步的数据会覆盖掉先同步的。因为这种情况很少发生，所以目前我们没花大时间去改进它。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img title="风车后端架构" alt="Fengche.co Backend Overview" src="/images/fengcheco-architecture/backend.png?1393869410" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h4&gt;服务端&lt;/h4&gt;

&lt;p&gt;风车的整个服务端是基于 Ruby on Rails，前面也已经给了一些介绍。我在之前的&lt;a href="http://yedingding.com/2013/03/04/steps-to-refactor-controller-and-models-in-rails-projects.html"&gt;重构 Rails 项目之最佳实践&lt;/a&gt;介绍了一些可以用来写出更好的代码结构的方法。在风车中，我们也在标准的 MVC 三层之外，加了 Service 层和 Presenter 层。&lt;/p&gt;

&lt;h5&gt;Service Layer&lt;/h5&gt;

&lt;p&gt;为了保持 Controller 结构的尽可能简单，对于一些复杂的又不仅属于某个 Model 的请求处理逻辑，我们在 Controller 和 Model 之间引入了新的一层：Service 层。举个例子，风车目前集成了 GitHub、GitLab 和 BitBucket 的 hook。当用户向远端推送提交的时候，GitHub/BitBucket 会向风车的服务器发起一个请求，包含这些提交的信息。在风车这边收到这些请求的时候，首先需要去做特征判断，查明是来自于哪一个服务。然后分析判断推送消息，是否绑定到具体的任务。最后根据消息，判断是否要更新状态和创建讨论。整个处理的逻辑比较复杂又相对独立，涉及多个 Model 并且有多种不同的策略，非常适合抽象成一个 Service。另外的一些场景比如 Analytics Service，Password Service，Email Handler Service 等。&lt;/p&gt;

&lt;h5&gt;Presenter Layer&lt;/h5&gt;

&lt;p&gt;熟悉 Rails 开发的朋友一般都知道，View 层应该仅仅是用来显示数据，我们应该避免在 View 里面有逻辑。但是，很多时候会不可避免的会有一些很难维护的 View。去年 RubyConf China 2013，来自台湾的讲师 xdite 就介绍了如何写出可维护的 View，详见&lt;a href="https://leanpub.com/rails-view-book"&gt;这里&lt;/a&gt;。不过对于风车而言，大量的 View 是在客户端，服务端很少，只是提供了一些数据准备，所以没用多少技巧。只是因为数据准备涉及到了多个 Model 的数据以及来自于 Redis 数据库里面的数据，所以我们独立出了 Presenter Object，用来管理这些逻辑，而不是放在 View 里面。&lt;/p&gt;

&lt;h5&gt;Observer&lt;/h5&gt;

&lt;p&gt;Observer 一般而言是监控数据的，当数据创建、更新或者删除时，可以执行一些相应的操作，比如用户注册后可以发送注册邮件。但是风车里面的 Observer 有些许不同，除了监控数据以外，我们还监控 Controller，来了解数据变化相对应的请求信息，比如操作用户是谁。这里主要借鉴了 Rails 自带的 Caching Sweeper，后面我们会专门写一篇文章来介绍。&lt;/p&gt;

&lt;h5&gt;Sidekiq&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://sidekiq.org"&gt;Sidekiq&lt;/a&gt; 是一个简单强大的消息队列系统，目前可以说是 Ruby 世界里后台处理的首选。同类的选择还有 resque、delayed_job 等，但是 Sidekiq 之所以能迅速成为首选是基于两个特点，一是基于 Actor 模式的并行处理机制，二是基于 Redis 的 pubsub 模型，所以能用更少的内存资源来获得一样的处理能力。在风车里只要是能延迟的操作我们就会全放到后台执行，比如发送通知、数据统计、创建初始数据等等。这样子，我们就能让每个请求在最短的时间内完成，提高整个系统的吞吐量。Sidekiq 在收到消息后会在后台处理，即使失败了也会重试，更加可靠。&lt;/p&gt;

&lt;h5&gt;Percona&lt;/h5&gt;

&lt;p&gt;风车的主数据库还是使用了关系数据库 &lt;a href="http://www.percona.com"&gt;Percona&lt;/a&gt;，是基于 MySQL 的一个分支，但是因为使用了 Percona 公司自己研发的 XtraDB 存储引擎，具有更好的性能。另外一点好处是 Percona 号称是最接近官方 MySQL Enterprise 发行版的版本，可以完全与 MySQL 兼容，我可以很方便的做切换而不用修改代码。&lt;/p&gt;

&lt;h5&gt;Redis&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; 在风车里面主要是两个用途：1. 用作 Caching Store，存储 View Cache 和 Record Cache 2. 加速数据访问，在内存中存储一些会频繁读写的数据，减少对 Percona 数据库的访问，比如 UID 映射表、统计信息之类。使用 Redis 而不是 Memcached 的原因是首先 Redis 的数据是持久的，不会因为重启而丢失，因为我们有一些无法立刻重建的数据，比如用户的在线状态，第二点是 Redis 可以用来存储一些复杂数据结构，比如 List 和 Set，对于统计信息来说非常合适。今年 Redis 3.0 有望正式发布，到时有 Redis Cluster 的支持，可以期待带来更好的性能。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Fengche.co Current Server" src="/images/fengcheco-architecture/current-server.png?1394601591" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h4&gt;扩展性&lt;/h4&gt;

&lt;p&gt;以上但是风车整体的技术架构，不复杂，但是非常实用。目前我们只使用了 Linode 上的单台机器，因为业务逻辑主要在前端，后端以 API 为主，所以性能问题并不突出。但是还是得承认健壮性有所缺乏，一旦后台某点发生故障，比如数据库或者 Redis，都会影响到服务的正常运行。下面来谈谈后台架构的一些可扩展性，来源于我之前的工作，但并没有上风车实践。&lt;/p&gt;

&lt;h5&gt;Rails&lt;/h5&gt;

&lt;p&gt;Rails 一直被人诟病的是其的性能，最近也经常能看到不少类似 XX 应用从 Rails 迁移到 Node.js 后获得 YY 倍的性能之类的报道。上期 &lt;a href="http://teahour.fm/2014/02/24/first-nodejs.html"&gt;Teahour&lt;/a&gt; 跟朴灵也聊到，Node.js 是从框架上用事件驱动和非阻塞来保证高性能，减少程序员犯错。同样的效果，Ruby 也能做到，但是对程序员本身的要求会更高。几种可能的扩展方式。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Fengche.co Current Server" src="/images/fengcheco-architecture/server-goal1.png?1394601590" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rails 应用本身很好水平扩展，我们目前用 Unicorn 作为应用服务器，使用 Nginx 作为前端服务器。Unicorn 是一个基于 Rack 的高性能 HTTP 服务器，Nginx 作为反向代理，通过 Unix Socket 或者 TCP 协议跟 Unicorn 通讯。所以，如果短期内流量增多，扩充机器性能是一个办法，也可以通过增加机器，在前端加负载均衡，后端加 Unicorn 进程数来提高系统吞吐量和处理能力。&lt;/li&gt;
&lt;li&gt;从 Rails 应用中抽取 API 部分为独立的应用，因为前端和后端之间基本只有 API 通讯。API 部分可以使用更高性能的方案，比如 Ruby 世界里有 &lt;a href="http://postrank-labs.github.io/goliath/"&gt;Goliath&lt;/a&gt; + &lt;a href="https://github.com/intridea/grape‎"&gt;Grape&lt;/a&gt;。Goliath 跟 Node.js 的概念一样，都是异步非阻塞的高性能 HTTP 服务器。而 Grape 是非常轻量级的 API 框架。&lt;/li&gt;
&lt;li&gt;当然也可以考虑用 JRuby 或者 Node.js 或者 Go，:p&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Fengche.co Current Server" src="/images/fengcheco-architecture/server-goal2.png?1394601590" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;h5&gt;Percona&lt;/h5&gt;

&lt;p&gt;目前在数据库方便的优化不多，我们也只是在优化索引和尽量避免连表查询。不过风车这个应用性质决定了不会是大数据，尤其是我们有些数据还不通过 Percona 存储。惭愧的是目前风车只是做到了数据的备份，但是还没有做 Cluster、主从、读写分离这些，不过都是会在遇到瓶颈时去尝试的。跳出关系型数据库，也许可以尝试一些文档数据库如 Mongo，应该也蛮合适的。&lt;/p&gt;

&lt;h5&gt;Redis&lt;/h5&gt;

&lt;p&gt;Redis 对于风车最大的作用是用来存储分析数据，节省掉数据库的访问和运算。因为 Redis 在 2.X 版本的时候没有 Cluster 实现，目前要做扩展只能在上层通过一致性哈希来获得有限的支持。3.0 目前已经发布 beta 版，内建的 Cluster 功能还在测试中，值得期待。另外对于 Redis 的主从复制，针对不同的应用场景会有不同的问题，比如 Redis 持久化策略、主从间同步策略等。在百万级别以上的数据上，Redis 就必须要调优了，同时，每次重启的时候也很痛苦，重建库要花不少时间。所以，有可能的话，对数据进行分片，尽量只让新鲜数据或者常用数据留在内存里，陈旧数据可以存储到磁盘上。&lt;/p&gt;

&lt;h5&gt;Sidekiq&lt;/h5&gt;

&lt;p&gt;Sidekiq 本身是基于线程的单进程运行模式，使用 Redis 做为消息队列。所以，Sidekiq 的并行能力很容易提升，只要多起几个进程就可以了，前提是数据库和 Redis 都扛得住，当然还有内存这些硬件资源。&lt;/p&gt;

&lt;h5&gt;Pusher&lt;/h5&gt;

&lt;p&gt;这个就是使用在线服务的好处，花点钱把性能问题留给他们吧，价格也算合理，:)&lt;/p&gt;

&lt;h4&gt;结语&lt;/h4&gt;

&lt;p&gt;目前来说，我相信这套架构还能让我们撑不少时间，也可以很方便的做水平扩展。对于一个技术驱动型团队，这是我们的优势，也是对待事情应有的态度。感谢所有风车使用到的开源软件和在线服务，才能让我们这么&amp;quot;小&amp;quot;的一个团队，能有更好的时间专注在产品的核心价值上，节省时间去做&amp;quot;大&amp;quot;事。作为一个团队协作工具，风车也想帮助你们更好的工作。如果你懂得时间的价值，那么你应该使用风车来管理你的项目。风车，让协作更简单，让协作更高效。&lt;/p&gt;

&lt;p&gt;有想法吗？&lt;a href="https://fengcheco.com"&gt;现在就试试吧&lt;/a&gt;！&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
欢迎交流！我可以针对一些常见的问题我来写 (二)，(三) 等。
&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bootstrapping Your Startup idea</title>
    <link rel="alternate" href="/2014/03/12/bootstrapping-your-startup-idea.html"/>
    <id>/2014/03/12/bootstrapping-your-startup-idea.html</id>
    <published>2014-03-12T04:00:00Z</published>
    <updated>2014-03-12T04:00:00Z</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;img alt="Bootstrapping" src="/images/bootstrapping-your-startup-idea/bootstrapping.jpg?1394601591" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;自从在博客上放了 Skype 账号，聊过不少有意思的人，大多都是有创业的想法，也有不错的项目想法，但是犹豫着要不要做，认为没有投资的话不太可行，不太敢启动项目。每次我都会说，只要你开始了，即使使用自有资金，只要合理的使用和合理的做事，其实并没你想的那么困难，足够能给项目开启一个很好的头和到达一定的阶段了。&lt;/p&gt;

&lt;p&gt;我们在一开始准备自己做&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;的时候，其实也没太多考虑，很大程度是受到我们非常喜欢的两家公司的影响，&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; 和 &lt;a href="https://37signals.com"&gt;37Signals&lt;/a&gt;，我们也希望能按照我们自己的想法去打磨一款用户喜欢的产品，所以没有想太多，决定先把项目做好。我们有很多的理由去寻找资本，比如降低创业风险、获取更多的资源、人才对接等等。但是这两年走过来，回想起来，感觉挺不错。我也觉得，对于技术驱动型团队，Bootstrap 是一个更合适的启动项目方式。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;相比非技术人员，技术团队创业的时候有一个天然的优势，可以自己来编写代码实现产品想法。即便只有一个人，也能把事情先做起来。&lt;/li&gt;
&lt;li&gt;在产品开发初期，其实成本不高，主要还是时间付出。而在产品出来的时候，你也有很多低成本的推广方式。&lt;/li&gt;
&lt;li&gt;在产品开发初期，因为是自有资金的原因，相比会更节俭，一分钱扳两份花，同时花钱会更有目的性，这样即使后面资本进来，这段经历会让我们更加懂得如何花钱。&lt;/li&gt;
&lt;li&gt;创业是一个想法不停修正的过程，而这个修正来源于跟用户的大量沟通交流，尤其是在初期，所以会让你把精力放在用户和产品本身，而不用浪费在寻找资本上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，如果有心尝试，与其犹豫不决、畏头畏脚，不如勇敢的迈出去，绝对另有一番天地，:) 但是作为一个技术型团队，有下面几点需要特别注意。有些是我们犯过的错误，有些是身边的朋友犯过的错误。&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside-block"&gt;
  &lt;img alt="Bootstrapping" src="/images/bootstrapping-your-startup-idea/bootstrapping.jpg?1394601591" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;自从在博客上放了 Skype 账号，聊过不少有意思的人，大多都是有创业的想法，也有不错的项目想法，但是犹豫着要不要做，认为没有投资的话不太可行，不太敢启动项目。每次我都会说，只要你开始了，即使使用自有资金，只要合理的使用和合理的做事，其实并没你想的那么困难，足够能给项目开启一个很好的头和到达一定的阶段了。&lt;/p&gt;

&lt;p&gt;我们在一开始准备自己做&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;的时候，其实也没太多考虑，很大程度是受到我们非常喜欢的两家公司的影响，&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; 和 &lt;a href="https://37signals.com"&gt;37Signals&lt;/a&gt;，我们也希望能按照我们自己的想法去打磨一款用户喜欢的产品，所以没有想太多，决定先把项目做好。我们有很多的理由去寻找资本，比如降低创业风险、获取更多的资源、人才对接等等。但是这两年走过来，回想起来，感觉挺不错。我也觉得，对于技术驱动型团队，Bootstrap 是一个更合适的启动项目方式。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;相比非技术人员，技术团队创业的时候有一个天然的优势，可以自己来编写代码实现产品想法。即便只有一个人，也能把事情先做起来。&lt;/li&gt;
&lt;li&gt;在产品开发初期，其实成本不高，主要还是时间付出。而在产品出来的时候，你也有很多低成本的推广方式。&lt;/li&gt;
&lt;li&gt;在产品开发初期，因为是自有资金的原因，相比会更节俭，一分钱扳两份花，同时花钱会更有目的性，这样即使后面资本进来，这段经历会让我们更加懂得如何花钱。&lt;/li&gt;
&lt;li&gt;创业是一个想法不停修正的过程，而这个修正来源于跟用户的大量沟通交流，尤其是在初期，所以会让你把精力放在用户和产品本身，而不用浪费在寻找资本上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，如果有心尝试，与其犹豫不决、畏头畏脚，不如勇敢的迈出去，绝对另有一番天地，:) 但是作为一个技术型团队，有下面几点需要特别注意。有些是我们犯过的错误，有些是身边的朋友犯过的错误。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4&gt;足够的思考，严肃的思考&lt;/h4&gt;

&lt;p&gt;一个优秀的工程师实现功能的时候，不是一上来就敲代码，而是理清需求，做好设计，最后才是编码。一个优秀的作家，在写文章的时候，也不是直接落笔，而是确定主题，组织结构，最后才是撰写。项目也是如此。在正式启动前一定要有足够的思考，多角度的思考，各种假设论证，合理规划，最后才是执行。出来混，总是要还的。所以不要担心花了很多时间思考而没有行动，缜密的思考绝对是有益的，最怕的想到什么就直接做了，轻易开始，草草结束。&lt;/p&gt;

&lt;h4&gt;专注核心价值&lt;/h4&gt;

&lt;p&gt;草根团队，没钱没资源，怎么破？尤其是当你使用自有资金的时候，做决策的事情一定要谨记，这是否是我们的产品核心价值，是否是最紧急的任务，如果不是的就放放。这也会让我们能更加有效的利用资源和更加高效的执行。同时，如果事情不涉及核心价值，尽量去拥抱云，尝试一些好的第三方服务，宁愿花一点钱来换时间。比如在&lt;a href="https://fengcheco.com"&gt;风车&lt;/a&gt;里，我们使用了 &lt;a href="http://linode.com"&gt;Linode&lt;/a&gt; 作为应用服务器，&lt;a href="http://aws.amazon.com/cn/s3/‎"&gt;Amazon S3&lt;/a&gt; 作为文件存储，&lt;a href="http://qiniu.com"&gt;七牛&lt;/a&gt;作为静态文件 CDN，&lt;a href="http://pusher.com"&gt;Pusher&lt;/a&gt; 作为实时消息推送系统，&lt;a href="https://www.olark.com"&gt;Olark&lt;/a&gt; 作为在线客服系统，&lt;a href="http://www.fastspring.com/"&gt;FastSpring&lt;/a&gt; 作为付费订阅系统，&lt;a href="http://sendcloud.sohu.com"&gt;SendCloud&lt;/a&gt; 和 &lt;a href="http://aws.amazon.com/cn/ses/"&gt;SES&lt;/a&gt; 作为邮件发送服务商，而我们自己，只花时间在提高团队协作这个核心价值上。&lt;/p&gt;

&lt;h4&gt;用最熟悉的技术&lt;/h4&gt;

&lt;p&gt;在技术世界里，每天都会产生非常多的名词，每天都能看到很多新鲜的东西出来，很让人兴奋。所以，我们不自觉的就想找个项目去实践一番。今天这个选型，明天那个选型，着实令人着迷。作为一个技术人，对技术的热衷是一个好事，然而，请一定要记住，你最应该去挑战的不是这些新技术，而是产品的成功。所以，请千万克制住尝试新技术的欲望，用你可能都已经觉得枯燥的最熟悉的最简单的技术栈，去快速实现，推出市场，持续改进。我们常说，&amp;quot;Quick and dirty&amp;quot;，但真要做到这点对技术人员来说还是很有难度的，尤其是像我这样的有洁癖的人。但是，创业过程中，检验你的价值已经不再只是技术架构，代码结构等技术层面的事情，所以必须得妥协，一切以产品的成功为准则。&lt;/p&gt;

&lt;h4&gt;不追新不优化&lt;/h4&gt;

&lt;p&gt;”我在这个项目里使用了 XX 和 XX 技术，花了多少时间来优化，现在能同时支撑多少用户，比起之前同类网站靠谱得多，不怕用户突然爆发性增长“ 是否觉得很熟悉？这是不少技术团队很喜欢说的桥段。但是，可惜的是很多时候这些产品可能到关掉都见不到这么多用户。套用 Donald Knuth 的一句话，&amp;quot;&lt;a href="http://c2.com/cgi/wiki?PrematureOptimization"&gt;过早优化是万恶之源&lt;/a&gt;&amp;ldquo;，同时适用，千万不要为了数字上的满足感浪费时间去优化。同时，也不要盲目的去更新使用的一些框架和库，除非你真正觉得带来的收益会大于时间付出。所以风车到现在都没有更新到 Ruby 2.0 和 Rails 4.0，因为这些在目前来说根本不重要&lt;/p&gt;

&lt;h4&gt;Ship It&lt;/h4&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;去年在 &lt;a href="http://rubyconfchina.org"&gt;RubyConf China&lt;/a&gt; 上，&lt;a href="http://zachholman.com"&gt;Zach Holman&lt;/a&gt; 介绍到 GitHub 公司里用的最多的表情符号是 &lt;img src="/images/bootstrapping-your-startup-idea/shipit.png" alt="ship it" width="30px" style="margin:0"/&gt;(:shipit:)，发布是 GitHub 的核心文化之一。而这却是绝大多数创业者最容易犯的错误。我们每天都能给自己找很多理由说发布时机未到，比如产品不够完美需要再改进，比如怕给用户的第一印象不好，
比如如果有某些新功能会更好，比如还需要再多测试一会，尤其是当资金暂时充足时。请放弃这些想法，ship it，ship it，不要怕。我们知道它的确还不够完美，但是也知道发布并不是终点，我们仍然都会每天去改进它，越早的发布，就能越早的去检验想法，就能越早的获得用户反馈。在风车里面，我们坚持持续发布，让我们觉得一个功能或者一个修改已经准备好了后（并不是完美后），我们会选择直接发布，然后观察用户的反应。&lt;/p&gt;

&lt;h4&gt;When to Stop&lt;/h4&gt;

&lt;p&gt;这是一个我经常思考的问题，也可能是你在思考的问题，什么时候我该停止 Bootstrap 而去寻找资本的支持了？一般来说资本带来的是催化作用，所以最合适的时机是在成长期。当我们意识到每天有很多重要的事情要去做，但是现在因为缺少时间和资源去做这些事，同样的时间成本获得的回报在变小的话，那么就是一个很明显的信号需要寻找外部的支持了。&lt;/p&gt;

&lt;p&gt;Bootstrap 听上去很难，但是其实并没有那么难，反而能让你更专注创业的两大核心：产品和客户。如果你的想法的确是需要资本的支持的话，对于草根团队而言，Bootstrap 阶段同时又是一个很好的自证阶段，证明你们是认真的在对待这件事和认真的做着这件事。所以，如果你有创业之心并且内心觉得自己准备好了，那就放下恐惧之心，勇敢的去做吧。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
  &lt;small&gt;本文图片 &amp;copy; &lt;a href="http://www.inc.com/elle-kaplan/three-reasons-bootstrapping-has-been-crucial-to-my-business.html"&gt;Inc.com&lt;/a&gt;&lt;/small&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
