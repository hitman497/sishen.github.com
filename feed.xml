<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Voice of Dingding Ye</title>
  <subtitle>Share Fun, Life and Thoughts in Pragmatic.ly</subtitle>
  <id>http://yedingding.com</id>
  <link href="http://yedingding.com/"/>
  <link href="http://yedingding.com/feed.xml" rel="self"/>
  <updated>2013-05-14T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>记 5 月 11 号 Ruby 开发者沙龙</title>
    <link rel="alternate" href="/2013/05/14/ruby-event-5-11.html"/>
    <id>/2013/05/14/ruby-event-5-11.html</id>
    <published>2013-05-14T00:00:00Z</published>
    <updated>2013-05-14T00:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Hangzhou Ruby Event May 11th" src="/images/ruby-event-5-11/event.jpg?1368509827" /&gt;&lt;/p&gt;

&lt;p&gt;上周六我们在杭州举行了面对长三角的小型 Ruby 爱好者沙龙，5 个小时，6 位分享嘉宾，70多位参与者，很好很强大。&lt;/p&gt;

&lt;p&gt;我个人很喜欢 Daniel 之前在上海搞的季度 ShanghaiOnRails 线下活动，给长三角的 Rubyists 提供了交流学习的时间和平台，每次参加都感觉收获不浅。可惜随着 Daniel 的退隐江湖，这个活动也就搁置了一段时间。上个月我和杭州 Ruby 社区的朋友聊了一下，决定在杭州也搞一期，希望未来有上海的朋友苏州的朋友也能牵头搞这件事，促进城际间的交流。其实对于活动本身，只要搞定了场地问题，其他都不是问题了，时间选个周末，讲师大家一期安排。在这里感谢一下我所在 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队的另外两位创始人 &lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt; 允许我用工作时间来做这件事，感谢淘宝提供场地设备和茶歇点心，感谢 &lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 提供会议报名组织支持，感谢杭州 Ruby 社区的李建业 (&lt;a href="https://twitter.com/fswordlee"&gt;@fswordlee&lt;/a&gt;)，李华顺 (&lt;a href="https://twitter.com/huacnlee"&gt;@huacnlee&lt;/a&gt;)，武鑫 (&lt;a href="https://twitter.com/SaitoWu"&gt;@SaitoWu&lt;/a&gt;)和吕戈 (&lt;a href="https://twitter.com/night_song"&gt;@night_song&lt;/a&gt;) 一起组织活动。&lt;/p&gt;

&lt;p&gt;这次沙龙分享嘉宾阵容非常强大，分享主题非常有料，很有幸能得到他们的支持，特别是远道而来的曹力 (&lt;a href="https://twitter.com/shiningray"&gt;@ShiningRay&lt;/a&gt;) 和黄志敏 (&lt;a href="https://twitter.com/flyerhzm"&gt;@flyerhzm&lt;/a&gt;)。6 场演讲场场精彩，我这里小记一下。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Hangzhou Ruby Event May 11th" src="/images/ruby-event-5-11/event.jpg?1368509827" /&gt;&lt;/p&gt;

&lt;p&gt;上周六我们在杭州举行了面对长三角的小型 Ruby 爱好者沙龙，5 个小时，6 位分享嘉宾，70多位参与者，很好很强大。&lt;/p&gt;

&lt;p&gt;我个人很喜欢 Daniel 之前在上海搞的季度 ShanghaiOnRails 线下活动，给长三角的 Rubyists 提供了交流学习的时间和平台，每次参加都感觉收获不浅。可惜随着 Daniel 的退隐江湖，这个活动也就搁置了一段时间。上个月我和杭州 Ruby 社区的朋友聊了一下，决定在杭州也搞一期，希望未来有上海的朋友苏州的朋友也能牵头搞这件事，促进城际间的交流。其实对于活动本身，只要搞定了场地问题，其他都不是问题了，时间选个周末，讲师大家一期安排。在这里感谢一下我所在 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队的另外两位创始人 &lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://beenhero.com"&gt;Ben&lt;/a&gt; 允许我用工作时间来做这件事，感谢淘宝提供场地设备和茶歇点心，感谢 &lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 提供会议报名组织支持，感谢杭州 Ruby 社区的李建业 (&lt;a href="https://twitter.com/fswordlee"&gt;@fswordlee&lt;/a&gt;)，李华顺 (&lt;a href="https://twitter.com/huacnlee"&gt;@huacnlee&lt;/a&gt;)，武鑫 (&lt;a href="https://twitter.com/SaitoWu"&gt;@SaitoWu&lt;/a&gt;)和吕戈 (&lt;a href="https://twitter.com/night_song"&gt;@night_song&lt;/a&gt;) 一起组织活动。&lt;/p&gt;

&lt;p&gt;这次沙龙分享嘉宾阵容非常强大，分享主题非常有料，很有幸能得到他们的支持，特别是远道而来的曹力 (&lt;a href="https://twitter.com/shiningray"&gt;@ShiningRay&lt;/a&gt;) 和黄志敏 (&lt;a href="https://twitter.com/flyerhzm"&gt;@flyerhzm&lt;/a&gt;)。6 场演讲场场精彩，我这里小记一下。&lt;/p&gt;

&lt;h5&gt;单兵如何打造日PV百万的网站架构&lt;/h5&gt;

&lt;p&gt;来自南京的曹力是现&lt;a href="http://baozoumanhua.com"&gt;暴走漫画&lt;/a&gt;的 CTO 和原&lt;a href="http://qiushibaike.com"&gt;糗事百科&lt;/a&gt;的联合创始人。暴走漫画目前日均 PV 过千万，可以想像对网站架构和性能优化带来的挑战。曹力介绍了几次主要的架构变迁，单机，百万 PV 时的挑战，千万 PV 下又是如何转变，演讲风趣生动，很有暴走之风。大家可以在这里查看 &lt;a href="http://vdisk.weibo.com/s/B5vle"&gt;PPT&lt;/a&gt;。因地制宜，善用 Cache，量化分析，摆事实，讲道理。会后跟曹力也交流了很多创业的想法，受益匪浅。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="4e6be5309da501308e951a9333edbc11" data-ratio="1.41436464088398" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;与 Obj-C 结婚，与 RubyMotion 恋爱&lt;/h5&gt;

&lt;p&gt;&lt;a href="http://rubymotion.com"&gt;RubyMotion&lt;/a&gt; 绝对是目前 Ruby 界的超新星。随着越来越多的 Ruby 界知名公司如 &lt;a href="http://37signals.com/"&gt;37signals&lt;/a&gt;，&lt;a href="http://thoughtbot.com"&gt;ThoughtBot&lt;/a&gt; 用 RubyMotion 开发 iOS 产品，RubyMotion 博得了越来越多的眼球。而前几天发布的 v2.0 宣布了对 OSX 的支持，将把这把火持续的更旺盛的烧下去。来自阿里巴巴 Mac 实验室的李龑分享了他使用 RubyMotion 的经验和一些坑。值得关注的是，他整个 PPT 就是用 RubyMotion 做的一个应用。想知道 RubyMotion 到底有哪些魔力才能让一个文科出生的纪实摄影师转行成为一个 Mac 开发者的，请看这里。整个 PPT 的代码在 &lt;a href="https://github.com/eyeplum/motion-affair"&gt;https://github.com/eyeplum/motion-affair&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;video controls="controls" src="http://screencasts.b0.upaiyun.com/assets/episodes/video/rubymotion.mov"&gt;
&lt;/video&gt;&lt;/p&gt;

&lt;h5&gt;构建异步 API 服务&lt;/h5&gt;

&lt;p&gt;黄志敏是我们的老朋友了，基本以前每次这种线下活动都会给大家带来分享，也是目前国内在国际上知名的开源贡献者。黄志敏曾负责 OpenFeint 平台的基础设施，平台架构和服务器调优。在这次分享里，Richard 通过一个 demo 应用程序，比较了进程模型，线程模型，进程+线程模型，事件驱动模型和进程+事件驱动模型的实现差异和性能差别，也就很容易看出为什么要用异步方式构建 API 服务了。如果你对 Rails 的性能不满，那么这个分享会给你带来很多其他的选择。正如 Richard 而言，Ruby 可以做到性能好、并发高、开发效率高、维护性好，关键是你要用对东西。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="988c07e09d3501309d4f6e9dd498db92" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;Ruby 2.1 Walk Through&lt;/h5&gt;

&lt;p&gt;Ruby 大家都会用，但是却很少人会关心 Ruby 是怎么实现的，Ruby 的语言演进是如何的。这个主题的分享者吕戈却是个反例。在我看来，吕戈是科学家多于开发者，算是活在 Ruby trunk 上的人。他向我们介绍了 Ruby 2.0/2.1 的主要新特性和一些实现细节，当然也经常跑题&amp;hellip;. -.-  我们尊封吕戈为杭州 Ruby 社区的首席吐槽师不是没有道理的。话说回来，吕戈在这次主题分享中让我感受到了什么叫做知识渊博。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="7658f3109c6f0130377462ecddd7671a" data-ratio="1.2994923857868" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;实践中的 CI&lt;/h5&gt;

&lt;p&gt;分布式系统中如何实现 CI，尤其是对于一淘这种级别的大应用？如何保证多人协作过程中，CI 仍然能正确的执行？如何构建一个正确稳定的自动化分布式 CI 环境？这些问题，来自淘宝的李建业向我们介绍了他们在实践中的 CI 系统。最后那个讨论我尤其感兴趣，在 CI 系统中单元测试和集成测试所处的位置和的关系，单元测试是否是集成测试的必要条件。如果大家对详细内容感兴趣，可以看这里 &lt;a href="http://fsword.github.io/slide/ci_con/index.html"&gt;http://fsword.github.io/slide/ci_con/index.html&lt;/a&gt;。&lt;/p&gt;

&lt;h5&gt;中大型前端应用开发工具链&lt;/h5&gt;

&lt;p&gt;中大型前端应用开发应该如何做？这个主题的分享者武鑫最近半年多一直在做重前端应用，他分享了一些他的心得体会。在他看来，前端应用规模上去后，会有七方面的问题：JS 加载、命名空间污染、文件依赖关系、模块化、测试、Build、UX。武鑫介绍了解决这些问题可以使用的方法并给出了一个 demo，信息量很大，完全可以做成一个大主题演讲。有个观点很好，现在对于每个问题的解决方法都有很多种方案，我们是该选哪一种呢？这并不重要，重要的是你去解决了这个问题。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="c74b17309c6f0130246f226fb1014015" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;h5&gt;One More Thing&lt;/h5&gt;

&lt;p&gt;这次活动我们是有录像的，还需要花时间剪辑，之后会把视频放出来，敬请期待！感谢这次活动各位讲师的精彩演讲，希望活动能持续的办下去！会后我们也进行了亲切的会晤，气氛异常的热烈。&lt;/p&gt;

&lt;p&gt;&lt;img alt="After Event" src="/images/ruby-event-5-11/after-event.jpg?1368509827" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 初学者指南</title>
    <link rel="alternate" href="/2013/04/22/rails-for-beginners.html"/>
    <id>/2013/04/22/rails-for-beginners.html</id>
    <published>2013-04-22T09:42:00Z</published>
    <updated>2013-04-22T09:42:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="DHH Talks About Rails And Beginner" src="/images/rails-for-beginners/dhh-talks-about-rails-and-beginners.png?1366647275" /&gt;&lt;/p&gt;

&lt;p&gt;今年 2 月初，我 和 &lt;a href="http://lvguoning.com"&gt;Daniel&lt;/a&gt;，&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt;，&lt;a href="http://knwang.com"&gt;Kevin&lt;/a&gt; 在 &lt;a href="http://teahour.fm"&gt;Teahour.FM&lt;/a&gt; 上聊了一期 Ruby 与 Rails 的学习经历和对初学者的学习建议 &lt;a href="http://teahour.fm/2013/02/03/learning-ruby-and-rails.html"&gt;How to Learn Ruby and Rails&lt;/a&gt;。而这竟然成为了目前 Teahour 这么多期里面最受欢迎的一期。Rails 4 发布在即，看上去 Rails 已经越来越不适合初学者学习。所以对于初学者而言，了解正确的学习方式无痛上路显得就格外重要。&lt;/p&gt;

&lt;p&gt;我在 06 年底开始接触 Rails 的时候，Rails 版本还是 1.2，Ruby 版本 1.8.6。那时我主要是一个后端开发程序员，不懂 Web 开发，不会 HTML，CSS，JS。但是那时的 Rails 学习起来比较简单，特别是搭配着 &lt;a href="http://pragprog.com/book/rails4/agile-web-development-with-rails"&gt;Agile Web Development With Rails (2nd Edition)&lt;/a&gt;，跟着例子走基本就了解了 Rails 的方方面面。再跟自己的已知的知识体系做结合，也算非常平滑的学习曲线。&lt;/p&gt;

&lt;p&gt;而如今，你在学习 Rails 的时候，你会发现很多额外的东西，比如 CoffeeScript，Asset Pipeline。而 Rails 4 很多新特性如 Cache Digest (Russion-Doll caching), TuoboLinks，前端倾斜更是会让新手直接晕掉。我们现在已经听到越来越多的新手抱怨 Rails 难学了。DHH 曾经发过一篇很有名的博文 &lt;a href="http://david.heinemeierhansson.com/2012/rails-is-omakase.html"&gt;Rails is omakase&lt;/a&gt;，中文翻译版见&lt;a href="http://ruby-china.org/topics/7791"&gt;这里&lt;/a&gt;。在 DHH 和 Rails Core Team 眼里，Rails 框架希望提供的是他们认为的 Web 开发的最佳实践，而这个最佳实践，必然跟他们过去这么多年的开发经历相关。在我看来，基本上 Rails 的框架演变过程跟 Web 开发技术的演变过程是一致的。但是对于初学者而言，在没有经历过足够的痛的前提下，要理解很多&lt;strong&gt;改进&lt;/strong&gt;就成了一件不容易的事情。特别是当目前 Web 开发开始向前端倾斜的时候，对开发人员的素质要求越来越高，全能化，全栈化，摆在初学者面前的是个极大的挑战。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="DHH Talks About Rails And Beginner" src="/images/rails-for-beginners/dhh-talks-about-rails-and-beginners.png?1366647275" /&gt;&lt;/p&gt;

&lt;p&gt;今年 2 月初，我 和 &lt;a href="http://lvguoning.com"&gt;Daniel&lt;/a&gt;，&lt;a href="http://terrytai.com"&gt;Terry&lt;/a&gt;，&lt;a href="http://knwang.com"&gt;Kevin&lt;/a&gt; 在 &lt;a href="http://teahour.fm"&gt;Teahour.FM&lt;/a&gt; 上聊了一期 Ruby 与 Rails 的学习经历和对初学者的学习建议 &lt;a href="http://teahour.fm/2013/02/03/learning-ruby-and-rails.html"&gt;How to Learn Ruby and Rails&lt;/a&gt;。而这竟然成为了目前 Teahour 这么多期里面最受欢迎的一期。Rails 4 发布在即，看上去 Rails 已经越来越不适合初学者学习。所以对于初学者而言，了解正确的学习方式无痛上路显得就格外重要。&lt;/p&gt;

&lt;p&gt;我在 06 年底开始接触 Rails 的时候，Rails 版本还是 1.2，Ruby 版本 1.8.6。那时我主要是一个后端开发程序员，不懂 Web 开发，不会 HTML，CSS，JS。但是那时的 Rails 学习起来比较简单，特别是搭配着 &lt;a href="http://pragprog.com/book/rails4/agile-web-development-with-rails"&gt;Agile Web Development With Rails (2nd Edition)&lt;/a&gt;，跟着例子走基本就了解了 Rails 的方方面面。再跟自己的已知的知识体系做结合，也算非常平滑的学习曲线。&lt;/p&gt;

&lt;p&gt;而如今，你在学习 Rails 的时候，你会发现很多额外的东西，比如 CoffeeScript，Asset Pipeline。而 Rails 4 很多新特性如 Cache Digest (Russion-Doll caching), TuoboLinks，前端倾斜更是会让新手直接晕掉。我们现在已经听到越来越多的新手抱怨 Rails 难学了。DHH 曾经发过一篇很有名的博文 &lt;a href="http://david.heinemeierhansson.com/2012/rails-is-omakase.html"&gt;Rails is omakase&lt;/a&gt;，中文翻译版见&lt;a href="http://ruby-china.org/topics/7791"&gt;这里&lt;/a&gt;。在 DHH 和 Rails Core Team 眼里，Rails 框架希望提供的是他们认为的 Web 开发的最佳实践，而这个最佳实践，必然跟他们过去这么多年的开发经历相关。在我看来，基本上 Rails 的框架演变过程跟 Web 开发技术的演变过程是一致的。但是对于初学者而言，在没有经历过足够的痛的前提下，要理解很多&lt;strong&gt;改进&lt;/strong&gt;就成了一件不容易的事情。特别是当目前 Web 开发开始向前端倾斜的时候，对开发人员的素质要求越来越高，全能化，全栈化，摆在初学者面前的是个极大的挑战。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是，我还是认为，Rails 是一个适合初学者学习的 Web 开发框架，只是在学习方法上需要有所改变。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;越思考这个问题，我越同意 Kevin 在第二期介绍的温室培养模式。他尽量会让初学者在温室环境中成长，也就是让他们了解最朴素的东西，而不用过多追求一些细节，以最快速度看到一个站点的建造过程。甚至 Ruby 语言的很多细节，元编程之类，都不需要在一开始了解。Rails 之于其他框架更适合初学者的原因在于它尽管代表着目前 Web 开发的先进浪潮，但是都提供了一个默认值。而这个默认值非常关键，它能让初学者免于选择也不用关心细节，几分钟就可以开始上手练习。这种方式会把一些开发上的痛延缓到了后期发生，也就是一些初学者在向中级水平发展时会经历的一段痛苦时光，但是这点恰恰在我认为是对初学者友好的。&lt;/p&gt;

&lt;p&gt;从我自己的经历而言，我在键盘上敲点东西然后最后在浏览器里面看到真实效果，获得的成就感是最大的，也会让我自己更有动力去学习。这也是我认为 Agile Web Development With Rails (AWDWR) 这本书特别适合初学者学习 Rails 的原因，因为它让你关注如何去构建一个站点，其次让你关注如何用 Rails 去构建，内容循序渐进，很多 Rails 中相对高级的特性都放到了最后去介绍，而这些特性当你有了一定基础以后其实也就并不是那么的难了。美中不足的是，AWDWR 这本书中文版只出到第 2 版，跟最新的 Rails 版本脱节太久，而啃英文书对大多数初学者来说都不是一件容易的事情。虽然学好英语对于学好 Rails 是一个基本条件，但是我还是希望初学者能在一开始学习的时候少因为语言问题而多碰壁。这个问题目前来看并没有很好的解，不过希望 Terry 和我能在未来改善一下现状。如果时间上允许的话，我们很希望能原创一本面向初学者的中文书，当然，收费，XD&lt;/p&gt;

&lt;p&gt;偷偷的说一下，这里有一段我未经 Terry 许可偷偷录的一段关于初学者应该如何学习 Rails 的讨论，非常值得大家收听，:)&lt;/p&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;
  &lt;source src="http://screencasts.b0.upaiyun.com/podcasts/rails_for_beginner.m4a" type="audio/mpeg"&gt;
&lt;/audio&gt;&lt;/p&gt;

&lt;h4&gt;书籍推荐&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初学者&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pragprog.com/book/rails4/agile-web-development-with-rails"&gt;Agile Web Development With Rails&lt;/a&gt; - 通过一个实例教会你如何使用 Rails 制作网站。举手投足之间，其实教会了读者很多有趣的实践和思想。非常生动且有趣。这本书的第二版是最为经典的。并且也有中文版，翻译也算不错。但是的确第二版对于现在的 Rails 版本已经太老，不适合新手阅读了。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pragprog.com/book/ruby3/programming-ruby-1-9"&gt;Programming Ruby&lt;/a&gt; - 很多人说学 Rails 你得先啃这本 Ruby 宝典，再去学 Rails。其实我觉得不然，这本书可以作为阅读 Agile Web Development With Rails 时的工具书，随时查阅不懂的 Ruby 小知识。当那本书看完后，可以选择再细读此书，这样很多知识由于先得到了运用，所以掌握会更加牢固。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进阶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pragprog.com/book/rr2/rails-recipes"&gt;Rails Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pragprog.com/book/jvrails/crafting-rails-applications"&gt;Crafting Rails Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby"&gt;Metaprogramming Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高级&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://railsantipatterns.com"&gt;Rails Antipatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://designpatternsinruby.com"&gt;Design Patterns in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eloquentruby.com"&gt;Eloquent Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;其他资源&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ruby-china.org"&gt;Ruby China&lt;/a&gt;  不说了，我们的大本营!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt;  专业程序员问答社区，如果大家有 Ruby/Rails 方面的问题，这里是最纯粹的问答地方，大家也可以站内邀请我 (yedingding) 回答。&lt;/li&gt;
&lt;li&gt;QQ 群，群号 &lt;strong&gt;231618869&lt;/strong&gt;。Terry 以前建的一个 Ruby/Rails 学习俱乐部，如果有学习上的问题也可以来这里交流。&lt;/li&gt;
&lt;li&gt;新浪微群 &lt;a href="http://q.weibo.com/1686875"&gt;Ruby/Rails 学习俱乐部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ashchan.com/archive/2011/08/21/learn-ruby-on-rails/"&gt;Learn Ruby on Rails&lt;/a&gt; Ash 写的一篇学习 Rails 的书籍推荐。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后我要强调的是，学习编程最好的方法永远是 Code！Code！Code！。敲代码永远比只看书来的效果好，勤加练习才是王道。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>关爱程序员之 Herman Miller Embody 体验报告</title>
    <link rel="alternate" href="/2013/04/16/care-yourself-first-programmers.html"/>
    <id>/2013/04/16/care-yourself-first-programmers.html</id>
    <published>2013-04-16T12:00:00Z</published>
    <updated>2013-04-16T12:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Herman Miller Emboy" src="/images/care-yourself-first-programmers/embody.png?1366131396" /&gt;&lt;/p&gt;

&lt;p&gt;上周入了梦想已久的 &lt;a href="http://www.hermanmiller.cn/Product/Embody-Chairs"&gt;Herman Miller Embody&lt;/a&gt; 椅子，这几天也有不少朋友在问体验报告，想知道花这么多钱买一把椅子是否值得。在这我说说我的感受。&lt;/p&gt;

&lt;p&gt;对于程序员而言，久坐是工作的一部分，我自己平均每天花在电脑前的时间是 8 到 10 小时，已经能感到腰部不适。我之前的椅子是一把人体工学椅，如果只是坐一两个小时还好，但是时间一久就感觉腰酸背疼。这一周用了 Embody 以后，基本四五个小时没有任何感觉，Embody 的设计是模拟人体脊椎，所以跟我的背部很贴服，可以说坐下去的感觉就是你意识不到你是坐在椅子上，不愧是顶级人体工学办公椅。另外一个让我觉得很舒服的是扶手，放上去很舒服，同时又可以横向左右调节，我把它调整到刚好可以自然的搭着打键盘，不需要任何发力，打字非常舒服，算是额外的一个收获。&lt;/p&gt;

&lt;p&gt;除了腰部以外，颈部也是职业病之一。去年体检的时候，已经被告知颈部有点退行性变，建议适度运动。所以当发现 Herman Miller 的椅子都没有头枕的时候，让人觉得有点奇怪。据经销商介绍是为了约束坐姿，目前体验下来没有头枕也没发现问题，还是因为 Embody 极好的包裹性让后背非常放松。其实仔细想想你一般什么时候需要头枕，也就是在仰躺着休息的时候，需要靠头。不过话说回来，对于程序员而言，这种时候难道不应该屁股离开座位，站起来走会活动一下颈部吗？&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Herman Miller Emboy" src="/images/care-yourself-first-programmers/embody.png?1366131396" /&gt;&lt;/p&gt;

&lt;p&gt;上周入了梦想已久的 &lt;a href="http://www.hermanmiller.cn/Product/Embody-Chairs"&gt;Herman Miller Embody&lt;/a&gt; 椅子，这几天也有不少朋友在问体验报告，想知道花这么多钱买一把椅子是否值得。在这我说说我的感受。&lt;/p&gt;

&lt;p&gt;对于程序员而言，久坐是工作的一部分，我自己平均每天花在电脑前的时间是 8 到 10 小时，已经能感到腰部不适。我之前的椅子是一把人体工学椅，如果只是坐一两个小时还好，但是时间一久就感觉腰酸背疼。这一周用了 Embody 以后，基本四五个小时没有任何感觉，Embody 的设计是模拟人体脊椎，所以跟我的背部很贴服，可以说坐下去的感觉就是你意识不到你是坐在椅子上，不愧是顶级人体工学办公椅。另外一个让我觉得很舒服的是扶手，放上去很舒服，同时又可以横向左右调节，我把它调整到刚好可以自然的搭着打键盘，不需要任何发力，打字非常舒服，算是额外的一个收获。&lt;/p&gt;

&lt;p&gt;除了腰部以外，颈部也是职业病之一。去年体检的时候，已经被告知颈部有点退行性变，建议适度运动。所以当发现 Herman Miller 的椅子都没有头枕的时候，让人觉得有点奇怪。据经销商介绍是为了约束坐姿，目前体验下来没有头枕也没发现问题，还是因为 Embody 极好的包裹性让后背非常放松。其实仔细想想你一般什么时候需要头枕，也就是在仰躺着休息的时候，需要靠头。不过话说回来，对于程序员而言，这种时候难道不应该屁股离开座位，站起来走会活动一下颈部吗？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;如果你还在犹豫是否购买一把好椅子，我觉得可以思考一下你有多少时间是坐在椅子上。健康是无价的，很多人愿意花钱去买更好的车，但是我觉得椅子更值得投资，你花在椅子上的时间比车子要多多了，而且是一把至少可以坐上 15 年的椅子。如果想购买 Herman Miller，我建议大家走经销商渠道，价格比海淘或者淘宝都给力，因为目前零售主要是为了推广品牌，基本不赚钱，同时经销商渠道可以享受 12 年质保。这些信息是我购买的那家经销商告诉你，至于你信不信，反正我是信了，:)&lt;/p&gt;

&lt;p&gt;&lt;img alt="Herman Miller Aeron" src="/images/care-yourself-first-programmers/aeron.png?1366172052" /&gt;&lt;/p&gt;

&lt;p&gt;除了 Embody 以外，Herman Miller 家的还可以考虑 &lt;a href="http://www.hermanmiller.cn/Product/Aeron-Chairs"&gt;Herman Miller Aeron&lt;/a&gt;。我这里介绍一下我个人对 Embody 和 Aeron 的感受，我也是体验了一下午最后做出决定要购买 Embody。Aeron 是 Embody 的上一代产品，一直牢牢占据着地球上最舒适安全座椅的称号，只到 Embody 的出现。Aeron 相比 Embody 而言更像传统的办公椅，它不像 Embody，无论怎么坐都感觉非常贴腰，而是你需要自己去调节到最适合你的位置。但是一旦你找到了那个位置，其实也是非常的舒适。Aeron 有两种不同的腰靠，经典型的是一字腰靠，新型的是 Y 字腰靠，我个人体验更加喜欢 Y 字腰靠。在 Aeron 和 Embody 之间，因为我个人更偏好自由的坐姿和被 Embody 的时尚外形打动，最后还是选择了 Embody。不过，有一点 Embody 比不上 Aeron 的是散热，Aeron 的网椅设计决定了它的散热性更好。&lt;/p&gt;

&lt;p&gt;至于 Embody 官方介绍的“是首款有益身体健康的座椅。它非常先进，实际上会降低您的心率，并减轻压力。在您就座的同时，通过刺激血液和氧气流动，让您保持集中精力，并放松身体”，暂时还没有体会到&amp;hellip;.&lt;/p&gt;

&lt;p&gt;除了 Herman Miller，也有不少好的选择，比如 lifehacker 就在去年列出了 5 把最好的办公椅，详见 &lt;a href="http://lifehacker.com/5941523/five-best-office-chairs"&gt;Five Best Office Chairs&lt;/a&gt;。另外 &lt;a href="http://www.okamura.jp/en_eu/products/seating/contessa/index.html"&gt;Contessa&lt;/a&gt; 我在有限的几次体验中都有非常好的印象，不过不太确定久坐效果如何。&lt;/p&gt;

&lt;p&gt;我时常跟朋友开玩笑说“当我们拼不过智商的时候，我们就拼身体”。没有任何投资可以跟身体相比。关爱自己的身体，善待自己，才能更好的工作。所以我们在 Teahour.FM 第 5 期的时候，特地讨论了能给程序员带来帮助的设备和如何锻炼和保护自己的身体，有兴趣的朋友可以在&lt;a href="http://teahour.fm/2013/03/05/hardware-for-developers.html"&gt;这里&lt;/a&gt;收听。&lt;/p&gt;

&lt;p&gt;我目前坐在 Embody 上开发的产品是一个适合小团队使用的项目管理工具和在线协作工具 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt;，希望它能帮忙我更好的改进这个产品，:)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Teahour.fm, Static Site by Middleman</title>
    <link rel="alternate" href="/2013/04/09/teahourfm-with-middleman.html"/>
    <id>/2013/04/09/teahourfm-with-middleman.html</id>
    <published>2013-04-09T02:00:00Z</published>
    <updated>2013-04-09T02:00:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img title="Teahour.fm Logo" alt="TeahourFM" src="/images/teahourfm-with-middleman/logo.png?1365745346" /&gt;
&lt;br/&gt;
&lt;a href="http://teahour.fm"&gt;Teahour.fm&lt;/a&gt; 是是由四位程序员 &lt;a href="http://terrytai.com"&gt;Terry Tai&lt;/a&gt;，&lt;a href="http://lgn21st.com"&gt;Daniel Lv&lt;/a&gt;，&lt;a href="http://knwang.com"&gt;Kevin Wang&lt;/a&gt; 和我创立的聊天类节目，我们四人轮流担任主持人，每期节目自定话题并邀请对该话题深有研究的嘉宾，与大家一起分享话题背后的故事。Teahour 今年 一月十九号第一期，一周一期，到现在已经出了十一期，总共邀请了六位嘉宾，有超过一万次收听，内容涵盖 Ruby，Rails，JavaScript，Mobile，Git，个人成长，敏捷思想和开源文化多个方面。如果你是程序员但是还没听过 Teahour.fm，那赶紧听起来，不然就 old man 了，XD&lt;/p&gt;

&lt;p&gt;这周团队在北京活动，顺便参加了 &lt;a href="http://www.bjrubyist.org/"&gt;Beijing Rubyist&lt;/a&gt; 线下活动，分享了一些 &lt;a href="http://teahour.fm"&gt;teahour.fm&lt;/a&gt; 网站设计和开发的一些思考。具体 slides 可以参考 &lt;a href="https://speakerdeck.com/sishen/teahour-dot-fm"&gt;speakerdeck&lt;/a&gt;。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="724c59a081d00130b28222000a8e86c4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;我们最终选择的是 &lt;a title="Hand-crafted frontend development" href="http://middlemanapp.com"&gt;MiddleMan&lt;/a&gt;，一个静态网站生成器。对于 teahour.fm，目前使用静态网站相对于动态网站来说是利大于弊。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img title="Teahour.fm Logo" alt="TeahourFM" src="/images/teahourfm-with-middleman/logo.png?1365745346" /&gt;
&lt;br/&gt;
&lt;a href="http://teahour.fm"&gt;Teahour.fm&lt;/a&gt; 是是由四位程序员 &lt;a href="http://terrytai.com"&gt;Terry Tai&lt;/a&gt;，&lt;a href="http://lgn21st.com"&gt;Daniel Lv&lt;/a&gt;，&lt;a href="http://knwang.com"&gt;Kevin Wang&lt;/a&gt; 和我创立的聊天类节目，我们四人轮流担任主持人，每期节目自定话题并邀请对该话题深有研究的嘉宾，与大家一起分享话题背后的故事。Teahour 今年 一月十九号第一期，一周一期，到现在已经出了十一期，总共邀请了六位嘉宾，有超过一万次收听，内容涵盖 Ruby，Rails，JavaScript，Mobile，Git，个人成长，敏捷思想和开源文化多个方面。如果你是程序员但是还没听过 Teahour.fm，那赶紧听起来，不然就 old man 了，XD&lt;/p&gt;

&lt;p&gt;这周团队在北京活动，顺便参加了 &lt;a href="http://www.bjrubyist.org/"&gt;Beijing Rubyist&lt;/a&gt; 线下活动，分享了一些 &lt;a href="http://teahour.fm"&gt;teahour.fm&lt;/a&gt; 网站设计和开发的一些思考。具体 slides 可以参考 &lt;a href="https://speakerdeck.com/sishen/teahour-dot-fm"&gt;speakerdeck&lt;/a&gt;。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="724c59a081d00130b28222000a8e86c4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;我们最终选择的是 &lt;a title="Hand-crafted frontend development" href="http://middlemanapp.com"&gt;MiddleMan&lt;/a&gt;，一个静态网站生成器。对于 teahour.fm，目前使用静态网站相对于动态网站来说是利大于弊。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不依赖数据库，不依赖解释器，只需要支持 HTML 就可以了&lt;/li&gt;
&lt;li&gt;Hosting 方便，目前是直接部署在 github pages，而不需要一个 VPS。&lt;/li&gt;
&lt;li&gt;速度快，HTML 永远是最快的，前端也可以随便用 Apache，Nginx 这些高性能服务器。&lt;/li&gt;
&lt;li&gt;写作方便，基本所有的静态网站生成器都是用 &lt;em&gt;Markdown&lt;/em&gt;, &lt;em&gt;Textile&lt;/em&gt; 这些模板语言，相对简单，可以本地编辑。&lt;/li&gt;
&lt;li&gt;没迁移成本，不需要数据导入导出。&lt;/li&gt;
&lt;li&gt;所有文件都有版本控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，选择了静态网站也就失去了动态性。目前 teahour.fm 比较缺乏这三个功能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;切换 episodes 的时候不能走动画方式，而是整页刷新&lt;/li&gt;
&lt;li&gt;不能做站内搜索，只能加 google 站内搜索&lt;/li&gt;
&lt;li&gt;不能做站内评论，需要依托 disqus 这些评论解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;MiddleMan&lt;/h3&gt;

&lt;p&gt;MiddleMan 做的取巧的地方是这个框架用的所有的东西都是你平时接触的东西，基本上你不需要去学习新的东西就可以直接上手使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可以直接用 ERB, HAML, SCSS, LESS 等&lt;/li&gt;
&lt;li&gt;页面构成利用 Layouts 和 Partials&lt;/li&gt;
&lt;li&gt;有很多 view helpers，比如 link&lt;em&gt;to, image&lt;/em&gt;tag&lt;/li&gt;
&lt;li&gt;使用 assets pipeline，基于 sprockets&lt;/li&gt;
&lt;li&gt;用 markdown 写文章&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多信息可以看 &lt;a title="Hand-crafted frontend development" href="http://middlemanapp.com"&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;How It Works&lt;/h3&gt;

&lt;p&gt;&lt;img alt="Teahour Workflow" src="/images/teahourfm-with-middleman/workflow.png?1365745375" /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;开始一篇新文章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;middleman&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;teahourfm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;middleman&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑 Markdown 文件。我们使用的编辑器有 MacVim，TextMate 和 Aquamacs，:)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建整站 HTML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;middleman&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
$ &lt;span class="n"&gt;middleman&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果你对 MiddleMan 项目组织方式感兴趣，可以查看 teahour.fm 源代码，目前我已经做了三个项目，包括本站，都是开源的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pragmaticly/teahour.fm"&gt;Teahour.fm Sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pragmaticly/blog.pragmatic.ly"&gt;Pragmatic.ly Blog Sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sishen/sishen.github.com"&gt;Blog Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Other Choices&lt;/h3&gt;

&lt;p&gt;简单说一下我们当时还看过的其他构站方式。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordpress.org"&gt;WordPress&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;说 WordPress 是目前最流行的构站方式都不为过。只是对于我们而言，做一个 WordPress theme 是事倍功半，不熟悉 PHP，要修改代码增删功能也不太方便。另外，我们不喜欢用 WordPress 的可见即可得编辑器。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://rubyonrails.org"&gt;Rails&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;对于我们而言，用 Rails 搭一个 teahour.fm 应用是很简单的，但是问题是这么简单的应用有没有必要上 Rails 这个巨无霸套餐，数据库，后台，速度，等等是我们是我们直接跳过 Rails 的原因。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://www.padrinorb.com/"&gt;Podrino&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Podrino 号称是轻量级 ruby web 框架，最主要的特点是在 Sinatra 的基础上构建，而不依赖于 ActionPack。形象点说，Podrina 就是 Rails 1.*，那时只有些必须的功能，不像现在 Rails 给你提供了很多你可能不需要的特性。用 Podrino 是个不错的选择，比如 &lt;a href="http://robbinfan.com"&gt;robbin的自言自语&lt;/a&gt; 就是用 Podrino 开发的。不过，我们还是不想走 Router，写 Controller，同时，直接写 View 或者存数据库都觉得缺乏写作乐趣。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://nestacms.com/"&gt;NestaCMS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Podrino 相比 Rails 轻是因为他使用了 Sinatra 而非 ActionPack，但是因为它是一个通用 Web 框架，而非内容构建框架，所以我们觉得不方便。而 NestaCMS 就是一个专门的内容构建框架，也是基于 Sinatra，改进了我们所有放弃用 Podrino 的原因，不需要数据库，直接用 Markdown 或者 Textile 编写，甚至可以生成静态网站。而基于 Rack 的部署方式可以直接放到 &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt; 上。&lt;a href="https://peepcode.com/blog"&gt;PeepCode Blog&lt;/a&gt; 就是 NestaCMS 的最好代言。说实话，我找不出不能用 NestaCMS 的原因，也许也就是不能放到 Gtihub Pages 和定制 theme 需要了解 NestaCMS 这个框架本身。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;JekyII 是 GitHub Pages 的默认静态网站生成器，可以说目前很多新的静态网站生成器都是依托于 Jekyll 或者鉴戒了 Jekyll。Jekyll 为 Blog 而生，不太适合非 Blog 网站，比如 teahour。同时，复杂的 plugins 机制和 theme 定制都是伤心之处。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;你是否觉得所有的 Octopress blog 长得一个德性？我是这么觉得的，直接 pass。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://nanoc.ws/"&gt;Nanoc&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Nanoc 是个好东西，满足我的所有要求，功能强大，甚至比我们选择的 MiddleMan 更强大，可惜学习曲线比较高，入门难，不利于和其他人协作。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>重构 Rails 项目之最佳实践</title>
    <link rel="alternate" href="/2013/03/04/steps-to-refactor-controller-and-models-in-rails-projects.html"/>
    <id>/2013/03/04/steps-to-refactor-controller-and-models-in-rails-projects.html</id>
    <published>2013-03-04T05:52:00Z</published>
    <updated>2013-03-04T05:52:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;春节前受 &lt;a title="Terry Tai's Blog" href="http://terrytai.com"&gt;Terry&lt;/a&gt; 邀请帮助国内的一个公益项目 &lt;a title="开放课堂, 设计和实践综合实践课的平台" href="https://newclass.org"&gt;Re-education&lt;/a&gt; 做代码重构。开放课堂项目是由&lt;a title="教育大发现" href="http://sociallearnlab.org/"&gt;教育大发现社区&lt;/a&gt;发起，成都 ThoughtWorks，成都彩程设计公司，成都超有爱教育科技有限公司等一起合作开发和运营的教育公益网站，是一个提供给小学3-6年级师生设计和开展综合实践课的教育开放平台。项目代码放在 &lt;a href="https://github.com/twers/re-education"&gt;GitHub&lt;/a&gt;，采用 Ruby on Rails 作为开发框架。&lt;/p&gt;

&lt;p&gt;很高兴我们 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队能参与到这个公益项目的开发中，我相信这是个对社会很有价值的事情。征得发起方的同意，我把这次重构工作做成了一次在线秀，也正是因为这次这样的形式，和很多朋友直接在 &lt;a title="Free Screen Sharing and Online Meetings" href="https://join.me"&gt;Join.me&lt;/a&gt; 上交流了很多 Rails 项目重构方面的想法。通俗点说，重构就是对内要通过修改代码结构等方法让代码变得更美，提高可阅读性和可维护性，而&lt;strong&gt;对外不改变&lt;/strong&gt;原来的行为，不做任何功能的修改。所以我们做重构要做好两点: 1) 一次只做一件事情，不能修改了多个地方后再做验证 2) 小步增量前进，路是一步一步走出来的。同时，为了保证重构的正确性，必须要测试保护，每一次小步修改都必须要保证集成测试仍然通过。之所以要保护集成测试而非单元测试，正是因为重构只改变内部结构，而不改变外部行为，所以，单元测试是可能失败的(其实概率也不高)，而集成测试是不允许失败的。基于 Re-education 的代码，这次重构主要涉及了 Controllers 和 Models 两个方面。有兴趣的朋友可以去 &lt;a title="#036 Refactor openclass by Dingding Ye" href="http://railscasts-china.com/episodes/refactor-openclass-by-dingding"&gt;RailsCasts China&lt;/a&gt; 观看视频。&lt;/p&gt;

&lt;p&gt;Rails 做为一个 Web 开发框架，几个哲学一直影响着它的发展，比如 &lt;a title="Convention over Congiuration" href="http://en.wikipedia.org/wiki/Convention_over_Configuration"&gt;CoC&lt;/a&gt;, &lt;a title="Don't Repeat Yourself" href="http://en.wikipedia.org/wiki/Don%27t_Repeat_Yourself"&gt;DRY&lt;/a&gt;。而代码组织方式，则是按照 &lt;a title="Model–view–controller" href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt; 模式，推崇 &amp;ldquo;Skinny Controller, Fat Model&amp;quot;，把应用逻辑尽可能的放在 Models 中。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;春节前受 &lt;a title="Terry Tai's Blog" href="http://terrytai.com"&gt;Terry&lt;/a&gt; 邀请帮助国内的一个公益项目 &lt;a title="开放课堂, 设计和实践综合实践课的平台" href="https://newclass.org"&gt;Re-education&lt;/a&gt; 做代码重构。开放课堂项目是由&lt;a title="教育大发现" href="http://sociallearnlab.org/"&gt;教育大发现社区&lt;/a&gt;发起，成都 ThoughtWorks，成都彩程设计公司，成都超有爱教育科技有限公司等一起合作开发和运营的教育公益网站，是一个提供给小学3-6年级师生设计和开展综合实践课的教育开放平台。项目代码放在 &lt;a href="https://github.com/twers/re-education"&gt;GitHub&lt;/a&gt;，采用 Ruby on Rails 作为开发框架。&lt;/p&gt;

&lt;p&gt;很高兴我们 &lt;a href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 团队能参与到这个公益项目的开发中，我相信这是个对社会很有价值的事情。征得发起方的同意，我把这次重构工作做成了一次在线秀，也正是因为这次这样的形式，和很多朋友直接在 &lt;a title="Free Screen Sharing and Online Meetings" href="https://join.me"&gt;Join.me&lt;/a&gt; 上交流了很多 Rails 项目重构方面的想法。通俗点说，重构就是对内要通过修改代码结构等方法让代码变得更美，提高可阅读性和可维护性，而&lt;strong&gt;对外不改变&lt;/strong&gt;原来的行为，不做任何功能的修改。所以我们做重构要做好两点: 1) 一次只做一件事情，不能修改了多个地方后再做验证 2) 小步增量前进，路是一步一步走出来的。同时，为了保证重构的正确性，必须要测试保护，每一次小步修改都必须要保证集成测试仍然通过。之所以要保护集成测试而非单元测试，正是因为重构只改变内部结构，而不改变外部行为，所以，单元测试是可能失败的(其实概率也不高)，而集成测试是不允许失败的。基于 Re-education 的代码，这次重构主要涉及了 Controllers 和 Models 两个方面。有兴趣的朋友可以去 &lt;a title="#036 Refactor openclass by Dingding Ye" href="http://railscasts-china.com/episodes/refactor-openclass-by-dingding"&gt;RailsCasts China&lt;/a&gt; 观看视频。&lt;/p&gt;

&lt;p&gt;Rails 做为一个 Web 开发框架，几个哲学一直影响着它的发展，比如 &lt;a title="Convention over Congiuration" href="http://en.wikipedia.org/wiki/Convention_over_Configuration"&gt;CoC&lt;/a&gt;, &lt;a title="Don't Repeat Yourself" href="http://en.wikipedia.org/wiki/Don%27t_Repeat_Yourself"&gt;DRY&lt;/a&gt;。而代码组织方式，则是按照 &lt;a title="Model–view–controller" href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt; 模式，推崇 &amp;ldquo;Skinny Controller, Fat Model&amp;quot;，把应用逻辑尽可能的放在 Models 中。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Skinny Controller, Fat Model&lt;/h3&gt;

&lt;p&gt;让我们来看最实际的例子，来自 Re-education 的代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PublishersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:publisher&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# trigger validation&lt;/span&gt;
    &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valid?&lt;/span&gt;

    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;simple_captcha_valid?&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:validation_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;验证码有误&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password_copy&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;eql?&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;两次密码输入不一致&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty?&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

      &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:MD5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
      &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save!&lt;/span&gt;

      &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;publisher_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:layout&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照 &amp;quot;Skinny Controller, Fat Model&amp;rdquo; 的标准，这段代码有这么几个问题:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;action 代码量过长&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有很多 @publisher 相关的逻辑判断&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从权责而言，Controller 负责的是接收 HTTP Request，并返回 HTTP Response。而具体如何处理和返回什么数据，则应该交由其他模块比如 Model/View 去完成，Controller 只需要当好控制器即可。所以，从这点上讲，如果一个 action 行数超过 10 行，那绝对已经构成了重构点。如果一个 action 对一个 model 变量引用了超过 3 次，也应该构成了重构点。下面是我重构后的代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PublishersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:publisher&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_with_captcha&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@publisher&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;publisher_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@publisher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Publisher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;apply_simple_captcha&lt;/span&gt; &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;验证码有误&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:presence&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;密码为必填写项&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="ss"&gt;:confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;两次密码输入不一致&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password_digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blank?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encrypt_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:MD5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的重构中，我主要遵循了两个方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把应该属于 Model 的逻辑从 Controller 移除，放入了 Model。&lt;/li&gt;
&lt;li&gt;利用虚拟属性 password, password_confirmation 处理了本不属于 Publisher Schema 的逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于简化 Controller，多利用 Model 方面的重构方法，&lt;a href="http://rails-bestpractices.com/"&gt;Rails Best Practices&lt;/a&gt; 有不少不错的例子，也可以参考。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://rails-bestpractices.com/posts/25-move-code-into-model"&gt;Move code into model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rails-bestpractices.com/posts/4-add-model-virtual-attribute"&gt;Add model virtual attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rails-bestpractices.com/posts/1-move-finder-to-named_scope"&gt;Move finder to scope&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Beyond Fat Model&lt;/h3&gt;

&lt;p&gt;对于项目初期而言，做好这两个基本就够了。但是，随着逻辑的增多，代码量不断增加，我们会发现 Models 开始变得臃肿，整体维护性开始降低。如果一个 Model 对象有效代码行超过了 100 行，我个人认为因为引起警觉了，要思考一下有没有重构点。一般而言，我们有下面几种方法。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Concern_(computer_science"&gt;Concern&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Concern 其实也就是我们通常说的 Shared Mixin Module，也就是把 Controllers/Models 里面一些通用的应用逻辑抽象到一个 Module 里面做封装，我们约定叫它 Concern。而 Rails 4 已经内建支持 Concern, 也就是在创建新 Rails 项目的同时，会创建 app/models/concerns 和 app/controllers/concerns。大家可以看看 DHH 写的这篇博客 &lt;a href="http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns"&gt;Put chubby models on a diet with concerns&lt;/a&gt; 和 Rails 4 的相关 &lt;a href="https://github.com/rails/rails/commit/f6bbc3f582bfc16da3acc152c702b04102fcab81"&gt;commit&lt;/a&gt;。具体使用可以参照上面的博客和下面我们在 &lt;a title="Lean Collaborative Project Management Tool" href="https://pragmatic.ly"&gt;Pragmatic.ly&lt;/a&gt; 里的实际例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Membershipable&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="ss"&gt;ActiveSupport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:memberships&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:membershipable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;
    &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;through&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:memberships&lt;/span&gt;
    &lt;span class="n"&gt;after_create&lt;/span&gt; &lt;span class="ss"&gt;:create_owner_membership&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Membership&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;membershipable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;memberships&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_user_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_owner_membership&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;after_create_owner_membership&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_create_owner_membership&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Membershipable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Membershipable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面的例子，可以看到 Project 和 Account 都可以拥有很多个用户，所以 Membershipable 是公共逻辑，可以抽象成 Concern 并在需要的类里面 include，达到了 DRY 的目的。&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://en.wikipedia.org/wiki/Delegation_pattern"&gt;Delegation Pattern&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Delegation Pattern 是另外一种重构 Models 的利器。所谓委托模式，也就是我们把一些本跟 Model 数据结构浅耦合的东西抽象成一个对象，然后把相关方法委托给这个对象，同样看看具体例子。&lt;/p&gt;

&lt;p&gt;未重构前:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:user_profile&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;birthday&lt;/span&gt;
    &lt;span class="n"&gt;user_profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:birthday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timezone&lt;/span&gt;
    &lt;span class="n"&gt;user_profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:timezone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hometown&lt;/span&gt;
    &lt;span class="n"&gt;user_profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hometown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们需要调用的 user_profile 属性越来越多的时候，会发现方法会不断增加。这个时候，通过 delegate, 我们可以把代码变得更加的简单。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:user_profile&lt;/span&gt;

  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:birthday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tomezone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hometown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:profile&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profile&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_profile&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="no"&gt;UserProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;birthday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;hometown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于更多的如何在 Rails 里使用 delegate 的方法，参考官方文档 &lt;a href="http://apidock.com/rails/Module/delegate"&gt;delegate module&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Acts As XXX&lt;/h4&gt;

&lt;p&gt;相信大家对 acts-as-list，acts-as-tree 这些插件都不陌生，acts-as-xxx 系列其实跟 Concern 差不多，只是它有时不单单是一个 Module，而是一个拥有更多丰富功能的插件。这个方式在重构 Models 时也是非常的有用。还是举个例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ActiveRecord&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Acts&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Cache&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ClassMethods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;acts_as_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:class_name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Cache&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constantize&lt;/span&gt;
          &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:delegate&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;

          &lt;span class="nb"&gt;class_eval&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;EOV&lt;/span&gt;
&lt;span class="sh"&gt;            def acts_as_cache_class&lt;/span&gt;
&lt;span class="sh"&gt;              ::#{klass}&lt;/span&gt;
&lt;span class="sh"&gt;            end&lt;/span&gt;

&lt;span class="sh"&gt;            after_commit :create_cache, :if =&amp;gt; :persisted?&lt;/span&gt;
&lt;span class="sh"&gt;            after_commit :destroy_cache, on: :destroy&lt;/span&gt;

&lt;span class="sh"&gt;            if #{options[:delegate]}.any?&lt;/span&gt;
&lt;span class="sh"&gt;              delegate *#{options[:delegate]}, to: :cache&lt;/span&gt;
&lt;span class="sh"&gt;            end&lt;/span&gt;

&lt;span class="sh"&gt;            include ::ActiveRecord::Acts::Cache::InstanceMethods&lt;/span&gt;
&lt;span class="no"&gt;          EOV&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;InstanceMethods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_cache&lt;/span&gt;
          &lt;span class="n"&gt;acts_as_cache_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy_cache&lt;/span&gt;
          &lt;span class="n"&gt;acts_as_cache_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;
          &lt;span class="n"&gt;acts_as_cache_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_or_create_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;acts_as_cache&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActiveRecord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;acts_as_cache&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Beyond MVC&lt;/h3&gt;

&lt;p&gt;如果你在使用了这些方式重构后还是不喜欢代码结构，那么我觉得可能仅仅 MVC 三层就不能满足你需求了，我们需要更多的抽象，比如 Java 世界广而告之的 Service 层或者 Presenter 层。这个更多是个人习惯的问题，比如有些人认为应用逻辑(业务逻辑)不应该放在数据层(Model)，或者一个 Model 只应该管好他自己的事情，多个 Model 的融合需要另外的类来做代理。关于这些的争论已经属于意识形态的范畴，个人的观点是视需要而定，没必要一上来就进入 Service 或者 Presenter，保持代码的简单性，毕竟减少项目 Bugs 的永恒不变法就是没有代码。但是，一旦达到可适用范围，该引入时就引入。这里也给大家介绍一些我们在用的方法。&lt;/p&gt;

&lt;h4&gt;Service&lt;/h4&gt;

&lt;p&gt;之前已经提到 Controller 层应该只接受 HTTP Request，返回 HTTP Response，中间的处理部分应该交由其他部分。我们可以优先把这部分逻辑放在 Model 层处理。但是，Model 层本身从定义而言应该是只和数据打交道，而不应该过多涉及业务逻辑。这个时候我们就需要用到 Service 层。继续例子!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProjectHookService&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:data&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;
    &lt;span class="no"&gt;Prly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hook_services&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseable?&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseable?&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HooksController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ProjectHookService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseable?&lt;/span&gt;
      &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Faled to parse the payload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果大家仔细分析这段代码的话，会发现用 Service 是最好的方案，既不应该放在 Controller，又不适合放在 Model。如果你需要大量使用这种模式，可以考虑一下看看 &lt;a href="https://github.com/karmajunkie/imperator"&gt;Imperator&lt;/a&gt; 这个 Gem，算是 Rails 世界里对 Service Layer 实现比较好的库了。&lt;/p&gt;

&lt;h4&gt;Presenter&lt;/h4&gt;

&lt;p&gt;关于 Presenter，不得不提的是一个 Gem &lt;a href="https://github.com/jamesgolick/active_presenter"&gt;ActivePresenter&lt;/a&gt;，基本跟 ActiveRecord 的使用方法一样，如果项目到了一定规模比如有了非常多的 Models，那么可以关注一下 Presenter 模式，会是一个很不错的补充。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SignupPresenter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;ActivePresenter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Base&lt;/span&gt;
  &lt;span class="n"&gt;presents&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:account&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;SignupPresenter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user_login&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dingding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="ss"&gt;:user_password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="ss"&gt;:user_password_confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="ss"&gt;:account_subdomain&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pragmaticly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;We&amp;#39;re good now&lt;/h3&gt;

&lt;p&gt;基本上上面是我在一个 Rails 项目里重构 Controller 和 Model 时会使用的几种方法，希望对你有用。Terry Tai 上周在他的博客里分享了&lt;a href="http://terrytai.com/2013/02/15/refactor-session-for-re-education-in-thought-works.html"&gt;他在重构方面的一些想法&lt;/a&gt;，也很有价值，推荐阅读。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Missing Chinese Podcast About Tech</title>
    <link rel="alternate" href="/2013/01/22/the-nil-podcast-with-terry-and-daniel.html"/>
    <id>/2013/01/22/the-nil-podcast-with-terry-and-daniel.html</id>
    <published>2013-01-22T07:39:00Z</published>
    <updated>2013-01-22T07:39:00Z</updated>
    <author>
      <name>Dingding Ye</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img title="Terry, Daniel and Me" alt="Terry, Daniel and me" src="/images/the-nil-podcast-with-terry-and-daniel/nil-podcast.png?1365745413" /&gt;&lt;/p&gt;

&lt;p&gt;一个月前在一次 Book Club 里 &lt;a title="Terry Tai's Blog" href="http://terrytai.com/"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://www.knwang.com/"&gt;Kevin&lt;/a&gt; 聊起比较缺乏一个 Web 开发类的中文 Podcast，而 Terry 在做的 &lt;a title="RailsCasts China" href="http://railscasts-china.com"&gt;RailsCasts-China&lt;/a&gt; 做为视频类节目，略显不同。于是，便与 &lt;a title="Daniel Lv's weblog" href="http://lvguoning.com/"&gt;Daniel&lt;/a&gt; 沟通了一下，很快便达成共识要启动这个计划。&lt;/p&gt;

&lt;p&gt;对于 Podcast，我个人并不是重度用户，以前在学英语的时候听过 &lt;a href="http://www.eslpod.com"&gt;English As A Second Language&lt;/a&gt;，现在也偶尔听一下 &lt;a href="http://mixergy.com"&gt;Mixergy&lt;/a&gt; 和 &lt;a href="http://5by5.tv"&gt;5by5&lt;/a&gt;，不过因为个人习惯喜欢在工作时候听音乐，所以 podcast 也只能在路上或者健身的时候偶尔听听。但是对于这种技术聊天的形式，反而是一点都不陌生。之前在 Intridea 的时候，我组织了公司内部每周五的 TeaHour，每周一次坚持了一年多，而目前和 Kevin, Terry 还有 Ben 基本每一两周都有 Book Club, 技术，创业，商业，生活，各种都聊，每次都很有收获。希望这个 Podcast 也能给听众带来同样的收获，对着起大家的时间。&lt;/p&gt;

&lt;p&gt;目前第一期的 Podcast 已出, &lt;a href="http://screencasts.b0.upaiyun.com/podcasts/nil_podcast_1.m4a"&gt;下载地址&lt;/a&gt; 和 &lt;a href="http://ruby-china.org/topics/8229"&gt;讨论地址&lt;/a&gt;。这一期主要聊了下列内容：&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;img title="Terry, Daniel and Me" alt="Terry, Daniel and me" src="/images/the-nil-podcast-with-terry-and-daniel/nil-podcast.png?1365745413" /&gt;&lt;/p&gt;

&lt;p&gt;一个月前在一次 Book Club 里 &lt;a title="Terry Tai's Blog" href="http://terrytai.com/"&gt;Terry&lt;/a&gt; 和 &lt;a href="http://www.knwang.com/"&gt;Kevin&lt;/a&gt; 聊起比较缺乏一个 Web 开发类的中文 Podcast，而 Terry 在做的 &lt;a title="RailsCasts China" href="http://railscasts-china.com"&gt;RailsCasts-China&lt;/a&gt; 做为视频类节目，略显不同。于是，便与 &lt;a title="Daniel Lv's weblog" href="http://lvguoning.com/"&gt;Daniel&lt;/a&gt; 沟通了一下，很快便达成共识要启动这个计划。&lt;/p&gt;

&lt;p&gt;对于 Podcast，我个人并不是重度用户，以前在学英语的时候听过 &lt;a href="http://www.eslpod.com"&gt;English As A Second Language&lt;/a&gt;，现在也偶尔听一下 &lt;a href="http://mixergy.com"&gt;Mixergy&lt;/a&gt; 和 &lt;a href="http://5by5.tv"&gt;5by5&lt;/a&gt;，不过因为个人习惯喜欢在工作时候听音乐，所以 podcast 也只能在路上或者健身的时候偶尔听听。但是对于这种技术聊天的形式，反而是一点都不陌生。之前在 Intridea 的时候，我组织了公司内部每周五的 TeaHour，每周一次坚持了一年多，而目前和 Kevin, Terry 还有 Ben 基本每一两周都有 Book Club, 技术，创业，商业，生活，各种都聊，每次都很有收获。希望这个 Podcast 也能给听众带来同样的收获，对着起大家的时间。&lt;/p&gt;

&lt;p&gt;目前第一期的 Podcast 已出, &lt;a href="http://screencasts.b0.upaiyun.com/podcasts/nil_podcast_1.m4a"&gt;下载地址&lt;/a&gt; 和 &lt;a href="http://ruby-china.org/topics/8229"&gt;讨论地址&lt;/a&gt;。这一期主要聊了下列内容：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Podcasts 推荐&lt;/li&gt;
&lt;li&gt;关于 Railscasts-china, RubyChina 的一些讨论&lt;/li&gt;
&lt;li&gt;对于 remote 工作和时间管理上的看法&lt;/li&gt;
&lt;li&gt;关于 Javascript MVC 框架的讨论&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;
  &lt;source src="http://screencasts.b0.upaiyun.com/podcasts/nil_podcast_1.m4a" type="audio/mpeg"&gt;
&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;对于 Podcast 的内容，我们的想法是包括访谈型和聊天型，希望每期都能有 3 到 4 个人一起，内容只要是程序员感兴趣的话题，都可以聊。如果你有感兴趣的话题或者愿意做嘉宾，欢迎联系我们，:)&lt;/p&gt;

&lt;p&gt;因为目前刚开始，我们希望能先多做几期，所以 iTunes 链接，网站都没有开始着手，会尽快跟上。另外，名字也在征集中，希望大家能多出主意!&lt;/p&gt;
</content>
  </entry>
</feed>
