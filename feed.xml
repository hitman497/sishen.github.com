<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Do Great Things - 叶玎玎</title>
  <subtitle> 叶玎玎在技术、创业、团队协作和项目管理上的思考和分享</subtitle>
  <id>http://yedingding.com</id>
  <link href="http://yedingding.com/"/>
  <link href="http://yedingding.com/feed.xml" rel="self"/>
  <updated>2014-10-22T18:00:00+08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>采访达峰 - I've shipped the Code. What's next?</title>
    <link rel="alternate" href="/2014/10/22/rcc2014-dafeng.html"/>
    <id>/2014/10/22/rcc2014-dafeng.html</id>
    <published>2014-10-22T18:00:00+08:00</published>
    <updated>2014-10-22T18:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Data Measure" src="/images/rcc2014-dafeng/data-measure.jpg?1413974934"&gt;&lt;/p&gt;

&lt;p&gt;本文是 Teahour 第 65 期的录音文本，音频版本请访问这里 &lt;a href="http://localhost:4568/2014/10/22/work-after-ship-code-with-dafeng.html"&gt;http://localhost:4568/2014/10/22/work-after-ship-code-with-dafeng.html&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;
  &lt;source src="http://screencasts.b0.upaiyun.com/podcasts/teahour_episode_65.m4a" type="audio/mpeg"&gt;
&lt;/source&gt;&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：大家好。今天是我们第二场的中国 Ruby 大会的会前采访，来做客 Teahour 的是 Strikingly 的联合创始人和 CTO 郭达峰。熟悉 Teahour 的听众对达峰应该不会陌生，去年我们曾经采访过达峰，那是第 28 期，达峰向我们介绍了 Strikingly 的创业故事。你好，达峰。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：你好！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：虽然上过节目，还是按照惯例，给大家打个招呼和做下简单的自我介绍吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：大家好，我是郭达峰，是第一家进入 YC 孵化器的华人团队 Strikingly 的联合创始人。在 Strikingly 主要负责技术这一块。我从14岁开始编程，创建 Strikingly 之前我也写过几款超过 2000 万用户的 Facebook 应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：达峰身上其实有非常多的标签：第一支 YC 的团队、投行背景、工程师等等。我们今天的这个采访是关于 Ruby 大会的采访，我们更关注工程师这个标签。达峰你在本次大会要分享的这个题目，在我看来很有标题党的感觉：『I’ve shipped the Code. What’s next?』我第一次看到题目的时候也不确定这个是要讲啥。你能解释一下吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：好的好的。要讲一下这个内容是什么，可能要先讲一下选这个题目的原因。我相信这次大会上有很多团队都是在创业，或者在创业团队工作的人。作为创业团队为什么选 Ruby ，就是因为 Ruby 可以快速开发，这一点对创业公司非常重要。&lt;/p&gt;

&lt;p&gt;我自己参加过不同的讲座和不同的技术分享，发现国内这种分析很多都是专注在技术上，比如：...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Data Measure" src="http://yedingding.com/images/rcc2014-dafeng/data-measure.jpg?1413974934" /&gt;&lt;/p&gt;

&lt;p&gt;本文是 Teahour 第 65 期的录音文本，音频版本请访问这里 &lt;a href="http://localhost:4568/2014/10/22/work-after-ship-code-with-dafeng.html"&gt;http://localhost:4568/2014/10/22/work-after-ship-code-with-dafeng.html&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;audio controls name="media"&gt;
  &lt;source src="http://screencasts.b0.upaiyun.com/podcasts/teahour_episode_65.m4a" type="audio/mpeg"&gt;
&lt;/audio&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：大家好。今天是我们第二场的中国 Ruby 大会的会前采访，来做客 Teahour 的是 Strikingly 的联合创始人和 CTO 郭达峰。熟悉 Teahour 的听众对达峰应该不会陌生，去年我们曾经采访过达峰，那是第 28 期，达峰向我们介绍了 Strikingly 的创业故事。你好，达峰。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：你好！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：虽然上过节目，还是按照惯例，给大家打个招呼和做下简单的自我介绍吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：大家好，我是郭达峰，是第一家进入 YC 孵化器的华人团队 Strikingly 的联合创始人。在 Strikingly 主要负责技术这一块。我从14岁开始编程，创建 Strikingly 之前我也写过几款超过 2000 万用户的 Facebook 应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：达峰身上其实有非常多的标签：第一支 YC 的团队、投行背景、工程师等等。我们今天的这个采访是关于 Ruby 大会的采访，我们更关注工程师这个标签。达峰你在本次大会要分享的这个题目，在我看来很有标题党的感觉：『I&amp;rsquo;ve shipped the Code. What&amp;rsquo;s next?』我第一次看到题目的时候也不确定这个是要讲啥。你能解释一下吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：好的好的。要讲一下这个内容是什么，可能要先讲一下选这个题目的原因。我相信这次大会上有很多团队都是在创业，或者在创业团队工作的人。作为创业团队为什么选 Ruby ，就是因为 Ruby 可以快速开发，这一点对创业公司非常重要。&lt;/p&gt;

&lt;p&gt;我自己参加过不同的讲座和不同的技术分享，发现国内这种分析很多都是专注在技术上，比如：测试应该怎么做，性能应该怎么优化，或者在架构方面的技术。听完很多这样的分享之后，我觉得对于创业公司来讲 ，在追求技术的时候，有时候却忽略了创业的初衷。我们的初衷是：&lt;strong&gt;Want to make something people want!&lt;/strong&gt; 我们想做成一款大家会喜爱的产品，大家会用的产品。你可能可以有 100% 的测试覆盖率，性能非常优化，有完美的架构，但是如果没有用户用你的产品的话，&lt;strong&gt;What does it even matter?&lt;/strong&gt; 根本就不重要！我发现作为技术人，我们常常把上线当成是终点。上线了，搞定了，就以为用户自己就会来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：我曾经也犯过同样的错误！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：产品完成、上线是我们比较擅长的，我们做技术的，这个是我们的专长之一。这是我们的特长专业。其实从上线的产品到用户热爱的产品还有很长的一段路。我发现很多人都在讲技术，都在讲怎么把产品做上线，越快上线，或者上线之后技术上的维护。很少有人讲，上线之后改善产品。我今天想分享的这个就是技术人员，怎样利用技术去做上线之后改善产品的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：其实改善产品在我看来有很多种方向，那你在这支大会上是从哪个角度改善产品的？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：我着重去做的就是怎么样把产品做到 Make something people want! 我用一个框架讲这个内容：如果你不去测量的话，你不确定产品有没有在改进（&lt;strong&gt;You can&amp;rsquo;t improve if you don&amp;rsquo;t measure&lt;/strong&gt;）。如果你不去测量一个新功能对产品的影响，你没有办法有力的说明产品在改善。我讲的内容会通过数据分为三步：&lt;/p&gt;

&lt;p&gt;1、一开始上线，创业初级的时候，你没有数据的时候，你应该用什么方式去改善产品；
2、有一些数据时，应该怎么做；
3、做到完全的有数据驱动的产品改善的流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：我开始有点明白了。其实整一套像比较火的概念：Growth Hacker ，专注于 User Growth 。就像你说从 User Growth 分成几个阶段：从没有用户怎么做，有了一定用户怎么做，有大批用户怎么做。是讲这块对吧？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：目的当然是要更多用户来用我们的产品，但是你要拿到更多的用户，你可以有很多方法，你可以去做市场，上广告。这也是增加用户的方法。我想讲的是，怎么去改善产品，从产品本身去改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：可以稍微不要卖这么多关子啊，举个例子啊。比如说，我一开始没有用户的时候嘛，然后我产品上去了，这个时候你觉得要怎么做呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：没有数据的时候你根本没法 measure 东西。其实在没有数据的时候，YC 讲过一句话是，我认为在初期最优化的：一开始的时候只做 2.5 件事。我上次分享的时候也讲过：第一件事情，make product；第二件事情，是 talk to users；第 0.5 件事情，是 exercise。&lt;/p&gt;

&lt;p&gt;实际上第二件事情是当你没有数据的时候你最应该做的。这个时候，你应该想尽不同的方法跟你的用户沟通，他们的需求是什么，这是我会分享的。你总不可能每次都给你的用户打电话吧？第一次你会不好意思，第二次你会觉得这么奇怪啊，每天都打电话给我。我会给出几个方法，让流程更自然一点，也能更有效的帮助你去跟用户沟通，反馈你整个的开发流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：我都有点不想把这个当成一个会前采访了，想直接来跟你讲下去了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：我们采访完之后我们可以分享下~~~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：我们刚刚讲的是没有数据的时候。没有数据的时候做法肯定会和有数据的时候不太一样啦。当我第一阶段已经顺利迈过去之后，有数据之后，会遇到一个问题：噪音很多。这个时候有什么奇技淫巧可以用吗？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：这个要讲一下。我相信很多团队也遇到一个问题：用户有很多声音。他想要这个，想要那个，我到底要去听哪一个声音呢？团队里面也有一些纠纷。A 觉得那个对，B 觉得另外一个对，那到底应该用什么样的框架来做决策呢？实际上就是数据。当有些数据的时候，你可以综合数据和判断去做决策。比如说，做一些 A / B 测试，或者开发完之后这功能是可以提高某方面的数据的。那我们可以做一个测试。先把这个功能发布给某些用户，结果如何。如果结果好的话，我们再去花更多的时间把功能做好。如果我们效果很差的话，我们再专注在另外的事情上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：这个有点像最近被吐槽很多的：微博的 V6 版本，你可以手动升级，是这样子么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：这个倒不一定。我觉得 V6 的这个概念比较跨越性，很难说 V6 失败，就把它 rollback 到 V5。这种跨越性的进展，我认为很多时候从用户沟通完之后，你也可以做测试，但是并没有办法做到这么大规模的，我将的更多的是小的 feature。像它这么大的功能肯定也不是每天发生的。但是在一些小功能的话，我们可能每个星期都有很多这种测试同时进行中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：这点好像我在去年的大会还跟 Github 的 Zach Holman 聊过怎么做。Github 那边好像也是类似这种。他们 Github 在发布新的 UI 也介绍过：在发布前他们只在内部和 shipped 了几个 clients 用并且用了很久了。他们那边自己用了很久才会正式的给所有用户。包括 Facebook 那边，上次不知道是不是听你介绍的，每个正式发布的功能都有人已经用了半年以上了~~~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：Facebook 那边是叫 Dark Release 。Github 用的这方法，我记得在几个星期之前 Holman 也写过一篇文章：&lt;strong&gt;Move fast, break nothing!&lt;/strong&gt; 实际上它也讲了很多从 process 本身，engineering process 本身去做一些事情。我讲跟他这个不是同一种方法，是类似的这种方法。Github 数据更多，同时 run 的 campaign 也会更多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：这个真的很精彩，是我非常非常想去学习的东西。正好你们这边有非常多的实战经验，所以，这次大会我一定要非常仔细的向你请教。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：我想做这个分享，也是因为我们经历过这一轮：我们从第一步没有数据的时候，到有些数据；在第二步的时候你的数据量或者你跟踪的所有的行为还不完整的时候，你从主观的看哪些功能比较好，到开始引入一些数据的分析之后；到现在第三步，有很多数据的时候，这个时候我们怎么把主观的这些东西客观化，用数据启动。我想做这样一个分享。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：非常精彩~~~ 但是我有一点想了解：你刚刚说的这些有些是工程学上的，有些是产品学上的。我们毕竟是一个技术的分享大会，所以工程学上，你会着重哪一点呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：在 Strikingly ，并不是我一个人把这些事情都想透的。作为一个 CTO ，技术负责人，我是把公司发展、开始用数据驱动这些决定的时候，我作为技术人，我 improve 哪些东西，我开发了哪些东西，去帮助整个公司慢慢往这个方向走——这是我想讲的。所以我会分享一些我们用的工具，我们用了哪些方法，一些很实战的东西！如果你是创业的，你回家以后马上就可以开始直接应用到的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：其实我觉得你带来了一个很大的东西，目前在国内圈子里很少分享的一点：工程师更应该去了解它的用户，而且是通过 measure 的方式了解他的用户。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：我为什么很强调数据这一点，为什么框架都是数据这一点：数据不是假的！我作为一个技术人，我跟另外一个团队成员，我可能真的是只是说，这个功能好不好，我认为好，他认为不好。到最后，这样的纠纷没有实际的意义：所有的东西都很主观，以至于到最后都不知道该做什么。这时候有数据的话，这个就是很客观的事实。你说这个功能好，我们推出一个 MVP，试一试能不能实际上改变这个数据。如果改变不到的话，要不说明这个功能不对，或者我们可以再改进一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：从另外一个角度，我不确定：这个可以来了解一下你们的实战经历。从你们目前的经历来说，你要做这些东西，在开发上花额外的时间，你们从开发上多花的成本和结果来说，你来怎么评估和衡量这两点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：这个时候我会去讲，在你没有数据，你肯定是跟用户沟通来决定的。这个第一阶段你可以走很远很远，我个人认为不是说我有多少用户，公司成立多久了来决定的——这个是根据公司情况。你跟用户沟通完之后，你会真的发现，很多东西很难做决定的时候。你先把第一阶段用到尽，很难再用主观的方式来判断哪一些功能是要开发的时候，我们再进入下一个阶段。这个时候你才能够 justify 么。如果你第一步没有数据，通过跟用户沟通的时候，你都可以做的很好的话，你就没有必要进入下一步。这是我个人的看法。这意思我的分享会非常着重在第一步和第二步。在你没有数据，或者只有一点点数据的时候你应该做什么。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dingding&lt;/strong&gt;：Ok，这真的是非常实战的一些经验。好了，今天到此为止了，我真的是非常期待你的 Talk 。感谢你今天抽出时间来录节目，我们在 Ruby 大会上见。我一定要把你抓来好好聊一下。如果大家做一个好产品感兴趣，对如何把产品上线之后继续做好产品，这一场大家一定不要错过。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;达峰&lt;/strong&gt;：好，大家大会上见~~~&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RubyConf China 2014</title>
    <link rel="alternate" href="/2014/10/21/rubyconf-china-2014.html"/>
    <id>/2014/10/21/rubyconf-china-2014.html</id>
    <published>2014-10-21T08:00:00+08:00</published>
    <updated>2014-10-21T08:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="RubyConf China 2014" src="/images/rubyconf-china-2014/RubyConfChina-2014.png?1413871483"&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;倒计时 10 天。第六届中国 Ruby 大会即将于十一月一号二号在北京举行。&lt;/p&gt;

&lt;p&gt;去年，我们尝试了多种改变，第一次跑到上海之外的城市，第一次邀请了如此多的国外著名讲师，第一次尝试官方 After Party，第一次等，获得了参会者的众多好评，也留下了非常美好的回忆。而今年的 RubyConf China，看似没有去年的阵容豪华，看似没有去年的气氛喧闹，但是我们还是很乐观的相信今年会是非常特别的一年，今年我们也在创造很多第一次。&lt;/p&gt;

&lt;p&gt;今年的大会筹办其实蛮早就开始，但是作为一个纯志愿者组织的大会，尤其三位主办人姜军、吕国宁和我都是在创业，时间超级不够用，整体办会经历可以说是跌宕起伏，所幸大多有惊无险。姜军数次跟我谈起想今年尝试不同的方式，想跳出往年固定的主题演讲式，给参会者带来更多不同的体验和更多的参与感和情感互动。所以，我们今年放弃了从海外邀请嘉宾，专注在形式上做突破，为明年的大会做好基础，也就有了你今天看到的大会行程。&lt;/p&gt;

&lt;p&gt;今年，我们依旧邀请了来自国内 Ruby 圈子第一线的顶尖工程师和创业者，给大家带来了 8 场精彩的主题演讲，内容涵盖 Ruby 语言、智能硬件之 MRuby、iOS 开发之 RubyMotion、Ruby 在实时聊天和视频直播上的实战分享、日PV亿级 Ruby 应用的挑战和征服历程、上线之后的产品养成之路、近来流行的 MicroService 框架介绍和阿里内部的持续集成云服务介绍。第二天，我们将变个花样，带来众多不一样的活动。女性朋友可以参加旨在为女性提供开发入门的 RailsGirls 活动，听了前一天的 RubyMotion 分享手痒可以来参加 RubyMotion Workshop 实操，ThoughtWorks 带来的半天 TDD Workshop，Rails 源码分析之 ActiveRecord 以及由我支持的两场 Ruby 职场...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="RubyConf China 2014" src="http://yedingding.com/images/rubyconf-china-2014/RubyConfChina-2014.png?1413871483" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;倒计时 10 天。第六届中国 Ruby 大会即将于十一月一号二号在北京举行。&lt;/p&gt;

&lt;p&gt;去年，我们尝试了多种改变，第一次跑到上海之外的城市，第一次邀请了如此多的国外著名讲师，第一次尝试官方 After Party，第一次等，获得了参会者的众多好评，也留下了非常美好的回忆。而今年的 RubyConf China，看似没有去年的阵容豪华，看似没有去年的气氛喧闹，但是我们还是很乐观的相信今年会是非常特别的一年，今年我们也在创造很多第一次。&lt;/p&gt;

&lt;p&gt;今年的大会筹办其实蛮早就开始，但是作为一个纯志愿者组织的大会，尤其三位主办人姜军、吕国宁和我都是在创业，时间超级不够用，整体办会经历可以说是跌宕起伏，所幸大多有惊无险。姜军数次跟我谈起想今年尝试不同的方式，想跳出往年固定的主题演讲式，给参会者带来更多不同的体验和更多的参与感和情感互动。所以，我们今年放弃了从海外邀请嘉宾，专注在形式上做突破，为明年的大会做好基础，也就有了你今天看到的大会行程。&lt;/p&gt;

&lt;p&gt;今年，我们依旧邀请了来自国内 Ruby 圈子第一线的顶尖工程师和创业者，给大家带来了 8 场精彩的主题演讲，内容涵盖 Ruby 语言、智能硬件之 MRuby、iOS 开发之 RubyMotion、Ruby 在实时聊天和视频直播上的实战分享、日PV亿级 Ruby 应用的挑战和征服历程、上线之后的产品养成之路、近来流行的 MicroService 框架介绍和阿里内部的持续集成云服务介绍。第二天，我们将变个花样，带来众多不一样的活动。女性朋友可以参加旨在为女性提供开发入门的 RailsGirls 活动，听了前一天的 RubyMotion 分享手痒可以来参加 RubyMotion Workshop 实操，ThoughtWorks 带来的半天 TDD Workshop，Rails 源码分析之 ActiveRecord 以及由我支持的两场 Ruby 职场相关的圆桌讨论。除此之外，当然还有必不可少的 After Party，供大家进行亲切热烈的交流。&lt;/p&gt;

&lt;p&gt;在此，感谢 &lt;a href="https://shou.tv/"&gt;Shou.tv&lt;/a&gt;、&lt;a href="http://gitcafe.com/"&gt;GitCafe&lt;/a&gt;、&lt;a href="http://upyun.com"&gt;又拍云服务&lt;/a&gt;、&lt;a href="http://www.ucloud.cn"&gt;UCloud&lt;/a&gt;、&lt;a href="http://www.qiniu.com"&gt;七牛云存储&lt;/a&gt; 等众多赞助商的支持，煽情的说，没有你们，就没有这次的大会，感谢！&lt;/p&gt;

&lt;p&gt;同时，感谢 &lt;a href="http://36kr.com"&gt;36Kr&lt;/a&gt;、&lt;a href="http://www.3wcoffee.com"&gt;3W 咖啡&lt;/a&gt;、&lt;a href="http://www.ingchuang.com/explore/"&gt;硬创帮&lt;/a&gt;、&lt;a href="http://segmentfault.com"&gt;SegmentFault&lt;/a&gt; 等对本次大会的场地和媒体支持。&lt;/p&gt;

&lt;p&gt;随贴附赠 10 个不去 RubyConf China 的理由。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;主办方太业余&lt;/li&gt;
&lt;li&gt;中文演讲太多&lt;/li&gt;
&lt;li&gt;票价太便宜&lt;/li&gt;
&lt;li&gt;内容太干&lt;/li&gt;
&lt;li&gt;游戏性太强&lt;/li&gt;
&lt;li&gt;社区太多元&lt;/li&gt;
&lt;li&gt;妹子太多&lt;/li&gt;
&lt;li&gt;周末太忙&lt;/li&gt;
&lt;li&gt;雾霾太严重&lt;/li&gt;
&lt;li&gt;北京太远&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是我们只需要 1 个去 RubyConf China 的理由。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我爱 Ruby&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大会官网见这里 &lt;a href="http://rubyconfchina.org"&gt;http://rubyconfchina.org&lt;/a&gt;，报名热线点这里&lt;a href="http://19wu.com/rubyconfchina"&gt;http://19wu.com/rubyconfchina&lt;/a&gt;。11 月 1 号早上 8 点，北京大学中关新园 2 号楼，到时候见！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Excel，熟悉又不熟悉的项目管理工具</title>
    <link rel="alternate" href="/2014/08/13/use-excel-for-project-management.html"/>
    <id>/2014/08/13/use-excel-for-project-management.html</id>
    <published>2014-08-13T10:00:00+08:00</published>
    <updated>2014-08-13T10:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href="https://fengcheco.com/blog/use-excel-for-project-management/"&gt;风车官方博客&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果有人在市场上做个调查，目前使用最广泛的项目管理工具是啥，我估计结果不是  Microsoft Project，不是 Jira，不是 Redmine，而是 Excel。在做风车的过程中，接触到不少团队，包括一些跟互联网很近的技术创业公司，都在使用 Excel 管理项目，也有一些用户问我们如何能从 Excel 管理平滑地迁移过来。所以，风车在首页特别跟 Excel 做了对比，我们也的确有不少客户是从 Excel 管理转到风车。这篇文章就来谈谈用 Excel 做项目管理的利与弊。&lt;/p&gt;

&lt;p&gt;要了解 Excel 管理项目的利与弊，得先了解如何用 Excel 来管理项目，Excel 能做什么，怎么做。项目管理，从本质上就是两件事情，计划安排和进度跟踪。计划安排包括计划和安排。计划是确定要做什么事情，并分解成一个个任务，比如在 Excel 里面按照 &lt;a href="http://www.baike.com/wiki/WBS"&gt;WBS&lt;/a&gt; 来做计划。而安排就是根据分解任务确定谁做什么事情以及什么时候做什么事情，比如在 Excel 里面制作&lt;a href="http://baike.baidu.com/view/1653.htm"&gt;甘特图&lt;/a&gt;来做安排。进度跟踪包括进度和跟踪。进度是了解项目的进展，哪些已经完成，哪些有待完成，比如可以在 Excel 里面绘制&lt;a href="http://baike.baidu.com/view/3798770.htm"&gt;燃尽图&lt;/a&gt;来展现进度。跟踪是及时了解团队每个人的状态，某个任务完成度如何了，这里更多的是通过沟通来更新到 Excel 中。&lt;/p&gt;

&lt;p&gt;关于具体可以怎么用 Excel 来做项目管理，我做了一个例子，在&lt;a href="https://fengcheco.com/blog/downloads/Excel-Project-Management.xlsx"&gt;这里&lt;/a&gt;下载，有兴趣可以参考，基本上涵盖了我上面提到的这些事情。&lt;/p&gt;

&lt;p&gt;Excel 不是专业的项目管理工具，但是 Excel 又无所不能。在我心目中，Windows 并不是微软最成功的软件，Office 才是。使用 Excel，有下面这几点好处。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;普及，群众基础扎实&lt;/strong&gt;。可以说，Office 在很多人眼里就等于电脑，你去外面配个电脑装个机都能在系统之外附赠一个 Office。这也带来了 Excel 基本上可...&lt;/li&gt;
&lt;/ol&gt;</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href="https://fengcheco.com/blog/use-excel-for-project-management/"&gt;风车官方博客&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果有人在市场上做个调查，目前使用最广泛的项目管理工具是啥，我估计结果不是  Microsoft Project，不是 Jira，不是 Redmine，而是 Excel。在做风车的过程中，接触到不少团队，包括一些跟互联网很近的技术创业公司，都在使用 Excel 管理项目，也有一些用户问我们如何能从 Excel 管理平滑地迁移过来。所以，风车在首页特别跟 Excel 做了对比，我们也的确有不少客户是从 Excel 管理转到风车。这篇文章就来谈谈用 Excel 做项目管理的利与弊。&lt;/p&gt;

&lt;p&gt;要了解 Excel 管理项目的利与弊，得先了解如何用 Excel 来管理项目，Excel 能做什么，怎么做。项目管理，从本质上就是两件事情，计划安排和进度跟踪。计划安排包括计划和安排。计划是确定要做什么事情，并分解成一个个任务，比如在 Excel 里面按照 &lt;a href="http://www.baike.com/wiki/WBS"&gt;WBS&lt;/a&gt; 来做计划。而安排就是根据分解任务确定谁做什么事情以及什么时候做什么事情，比如在 Excel 里面制作&lt;a href="http://baike.baidu.com/view/1653.htm"&gt;甘特图&lt;/a&gt;来做安排。进度跟踪包括进度和跟踪。进度是了解项目的进展，哪些已经完成，哪些有待完成，比如可以在 Excel 里面绘制&lt;a href="http://baike.baidu.com/view/3798770.htm"&gt;燃尽图&lt;/a&gt;来展现进度。跟踪是及时了解团队每个人的状态，某个任务完成度如何了，这里更多的是通过沟通来更新到 Excel 中。&lt;/p&gt;

&lt;p&gt;关于具体可以怎么用 Excel 来做项目管理，我做了一个例子，在&lt;a href="https://fengcheco.com/blog/downloads/Excel-Project-Management.xlsx"&gt;这里&lt;/a&gt;下载，有兴趣可以参考，基本上涵盖了我上面提到的这些事情。&lt;/p&gt;

&lt;p&gt;Excel 不是专业的项目管理工具，但是 Excel 又无所不能。在我心目中，Windows 并不是微软最成功的软件，Office 才是。使用 Excel，有下面这几点好处。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;普及，群众基础扎实&lt;/strong&gt;。可以说，Office 在很多人眼里就等于电脑，你去外面配个电脑装个机都能在系统之外附赠一个 Office。这也带来了 Excel 基本上可以捻手即来，不需要安装任何软件就可以使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定制性强&lt;/strong&gt;。基于表格的任务属性，粒度可粗可细，根据团队的方法不同可任意调整，可说是 Excel 的最大优点。这也是很多团队喜欢 Excel 的最大原因，完全做到量身定制，不受到任何限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制性强&lt;/strong&gt;。定制性强带来了一部分的控制性，但是控制性更多的体现在流程上。团队内部流程不需要任何调整就可以直接应用到 Excel 中，而且调整也非常容易，做到了管理者的真正掌控。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能丰富&lt;/strong&gt;。宏、函数、筛选、排序、作图等，Excel 的数据处理能力非常强大。Excel 的基本操作撑死也就 Excel 10% 的功能，大多数人只是学会了点皮毛，浪费了如此”好”的一款软件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，用 Excel 管理项目的缺点也非常明显。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;复杂，非常复杂&lt;/strong&gt;。没有人能学会 Excel 所有的功能，只学会百分之二三十的功能就可以称为高手了。以前开过玩笑，微软开发 Excel 的团队也不会用 Excel。Excel 的学习成本是非常高的，见见世面上有多少 Excel/Office 的实用书籍就知道了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护非常耗时，自动化程度低&lt;/strong&gt;。即使你使用了宏和函数，还是需要很多人工的操作，比如任务拆分、甘特图的制作，都需要重排很多数据。现在很多用 Excel 管理项目的团队，会有专门一个助理来做这个事情，每天的工作就是维护 Excel。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进度跟踪不及时&lt;/strong&gt;。Excel 缺乏实时的信息更新，所以一般做法是每天开会确定一下昨天的进度，专人记录更新到 Excel 里面。这样子，有些问题就会被隐藏下去，无法及时发现，无法在正确的时间让正确的人去做正确的事。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信息呈现单一，可用性不高&lt;/strong&gt;。Excel 毕竟只是表单数据处理软件，不是专业的项目管理软件，所以在呈现上没有信息架构可言，缺乏重点，用户体验差。同时，无法在上面做一些任务的沟通，项目管理过程被割裂成一块一块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员间同步麻烦&lt;/strong&gt;。沟通的好坏，能否保证所有成员在一个节奏上，直接影响到项目的成败。然而用 Excel 管理项目的话，只能把文件传来传去，也不知道到底这个版本和上个版本有了哪些变化。高级点的会使用 Google Spreadsheet，但是有&lt;del&gt;伟大的墙&lt;/del&gt;的存在，还是诸多不爽。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然项目管理中工具并不是最主要的，但是一个好的工具绝对能让事半功倍。如果说过往用 Excel 管理项目是因为专业的项目管理软件很昂贵，学习成本也很高，在此相比而言下 Excel 是一个尚且不错的选择的话，那么现在这个时代，已经有很多轻量级的项目管理工具可以使用，而且价格也非常合适。所以不妨跳出思维，去拥抱新的变化，体验技术创新带来的变革。&lt;/p&gt;

&lt;p&gt;如果你是 Excel 的老用户，可以非常简单的把 Excel 的概念映射到风车里面，比如 Excel 里面的每个工作表对应风车中的一个任务列表，工作表中的每一行数据代表风车里的一个任务，每一列数据对应风车中任务的某一个属性。对于列举的 Excel 的每个缺点，风车也做了相应的解决方案，并且会自动的提供项目报表和成员统计，项目管理从来没有这么轻松，并且不失专业。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另外，作为一家有节操的公司，坚决抵制用数据绑架用户。所以你随时可以把风车项目内的数据导出成 Excel 保存，也会提供 API 让你随时读取数据。&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;你还在用 Excel 管理项目吗？是时候，使用风车保证所有信息的正确同步了！&lt;/strong&gt;&lt;br/&gt;
风车提供了清晰的任务管理体验，分配任务、进度跟踪一目了然。一处编辑、多处实时更新，保持团队成员步调一致，从而使任务管理轻松有序。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>What you should know before starting node-webkit</title>
    <link rel="alternate" href="/2014/08/01/node-webkit-intro-en.html"/>
    <id>/2014/08/01/node-webkit-intro-en.html</id>
    <published>2014-08-01T09:00:00+08:00</published>
    <updated>2014-08-01T09:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="node-webkit" src="http://yedingding.com/images/node-webkit-intro/nw.jpg"&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;blockquote&gt;
  This article is translated by &lt;a href="http://www.linkedin.com/in/yicunwu"&gt;Wendy&lt;/a&gt; of my article &lt;a href="http://yedingding.com/2014/07/28/node-webkit-intro.html"&gt;开始 NODE-WEBKIT 前，你应该知道的&lt;/a&gt;. &lt;a href="http://www.linkedin.com/in/yicunwu"&gt;Wendy&lt;/a&gt; now lives in Toronto, Canada and is looking to join a startup in US or Canada as backend developer to build innovative products that make people’s lives easier and more efficient. Her skills include Node.js, PHP, Python and C++. If you’re interested, why not &lt;a href="mailto:yicun.wu@uwaterloo.ca"&gt;drop her an email&lt;/a&gt;?
&lt;/blockquote&gt;

&lt;p&gt;Last weekend, &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour&lt;/a&gt; invited &lt;a href="https://twitter.com/wwr"&gt;Roger Wang&lt;/a&gt;, the creator of node-webkit to talk about the stories behind node-webkit and the use of HTML5 in desktop app development. Various web-based desktop app frameworks such as node-webkit, Chrome Apps, Titanium, TideSDK and Atom Shell have been developed over recent years and node-webkit remains one of the best.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/rogerwang/node-webkit"&gt;node-webkit&lt;/a&gt; project was started in 2011. It is an app runtime that allows...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="node-webkit" src="http://yedingding.com/images/node-webkit-intro/nw.jpg" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;blockquote&gt;
  This article is translated by &lt;a href="http://www.linkedin.com/in/yicunwu"&gt;Wendy&lt;/a&gt; of my article &lt;a href="http://yedingding.com/2014/07/28/node-webkit-intro.html"&gt;开始 NODE-WEBKIT 前，你应该知道的&lt;/a&gt;. &lt;a href="http://www.linkedin.com/in/yicunwu"&gt;Wendy&lt;/a&gt; now lives in Toronto, Canada and is looking to join a startup in US or Canada as backend developer to build innovative products that make people&amp;rsquo;s lives easier and more efficient. Her skills include Node.js, PHP, Python and C++. If you&amp;rsquo;re interested, why not &lt;a href="mailto:yicun.wu@uwaterloo.ca"&gt;drop her an email&lt;/a&gt;?
&lt;/blockquote&gt;

&lt;p&gt;Last weekend, &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour&lt;/a&gt; invited &lt;a href="https://twitter.com/wwr"&gt;Roger Wang&lt;/a&gt;, the creator of node-webkit to talk about the stories behind node-webkit and the use of HTML5 in desktop app development. Various web-based desktop app frameworks such as node-webkit, Chrome Apps, Titanium, TideSDK and Atom Shell have been developed over recent years and node-webkit remains one of the best.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/rogerwang/node-webkit"&gt;node-webkit&lt;/a&gt; project was started in 2011. It is an app runtime that allows developers to use Web technologies (i.e. HTML5, CSS and JavaScript) to develop native apps. As developers, we only need to maintain one codebase which can be compiled to Windows, Mac and Linux native apps. The node-webkit project currently has almost 15000 Stars and over 1600 Forks on GitHub and it&amp;rsquo;s a very popular open source project built by a Chinese developer. In the episode, Roger introduced the following common categories of apps using node-webkit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desktop IDEs such as &lt;a href="http://www.lighttable.com/"&gt;Light Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Games such as &lt;a href="http://www.brandonmustdie.com/"&gt;Brandon Must Die!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Media apps such as &lt;a href="http://popcorntime.io/"&gt;Popcorn Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tools such as &lt;a href="http://pad.haroopress.com/"&gt;Haroopod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enterprise apps such as metrics apps&lt;/li&gt;
&lt;li&gt;Terminals such as POS terminals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We could see that the apps are diverse and there&amp;rsquo;s no lack of elegant apps. The full of imagination can be attributed to hardware performance improvements, developments of Web, animations, graphics, audios, videos, 2D, 3D, WebGl, etc.&lt;/p&gt;

&lt;p&gt;Essentially, node-webkit is only a web app runtime. When we talk about desktop apps, we think of GUI, responses to user actions and system-level interactions, so how did node-webkit manage to do that? In order to learn more about that, we need to first learn about Node and WebKit.&lt;/p&gt;

&lt;p&gt;Node is a lightweight JavaScript runtime based on the Google Chrome V8 engine. Node is written in C++ and lives in the operating-system application layer where it supports a lot of OS APIs such as file system and network operations therefore it can be used to build system and server-side apps.&lt;/p&gt;

&lt;p&gt;WebKit is a web browser engine. Let&amp;rsquo;s take a web page as an example: it&amp;rsquo;s built with HTML, CSS and JavaScript. After the page is loaded, it will be parsed into a tree and handed off to WebKit for rendering hence forming the page we see in a browser. Node-webkit is based on Blink, which is a rendering engine forked from WebKit and whose JavsScript engine is V8, which is also used in Node.&lt;/p&gt;

&lt;p&gt;The browser security model prevents WebKit from issuing system calls, which is a must-have for desktop applications; since Node itself has system-level APIs but lacks rendering support, Roger had the idea in 2011 to create node-webkit, combining system-level operations and user interactions. After some trials with WebKitGTK and Node, he started using Chromium in 2012, basing the project entirely on Chromium from the initial Chromium Embedded Framework (CEF).&lt;/p&gt;

&lt;p&gt;Following the fast development of Node and Chromium, node-webkit is at version 0.10 today. We&amp;rsquo;ll dive into the details of how node-webkit works.&lt;/p&gt;

&lt;p&gt;Node is an event-driven framework with message processing based on libuv. The JS engine of WebKit is based on MessagePump of Chrome, which is also event-driven. Event-driven can be explained as when an event happens, for example, user input comes in, the corresponding code is executed to process the event. Node-webkit combines the event-processing of Node and WebKit into a single message loop.&lt;/p&gt;

&lt;p&gt;We still have another challenge after combining event processing: we need to find a way for Node and WebKit to access the context of each other. There are two contexts in node-webkit: the Node context and the WebKit context. Accessing the context of each other means accessing the objects of each other, so during the initialization of node-webkit, the Node context will be injected into WebKit so that the WebKit context will have access to the Node context.&lt;/p&gt;

&lt;p&gt;Node-webkit has made changes to the security model of WebKit as well. In node-webkit, there are two kinds of frames: Node frames and normal frames&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. If you&amp;rsquo;re familiar with Web development, you probably know that issuing a cross-domain AJAX request will result in errors imposed by &lt;a href="http://en.wikipedia.org/wiki/Same_origin_policy"&gt;same-origin policy&lt;/a&gt;. The same restriction is imposed on normal frames of node-webkit as in a browser. However, there is no such restriction on Node frames: the same security token is shared in all Node frames, including the Node&amp;rsquo;s context and the WebKit&amp;rsquo;s Context, and cross-domain access are allowed and objects in the Node&amp;rsquo;s context are accessible too. Therefore, app developers must take precaution with untrusted user input to prevent destructive actions or put them into a normal frame.&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Chromium Layers" src="http://yedingding.com/images/node-webkit-intro/chromium-layers.jpg" /&gt;
  &lt;small&gt;Chromium Conceptual Application Layers&lt;/small&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;It is worth noting that even though Chrome supports HTML5 pretty well, some features are implemented on the Browser layer (see the graph above) and the WebKit in node-webkit inherits up to the Contents layer (i.e. the WebContents layer on the above image) as node-webkit itself is the implementation of the Browser layer. Therefore, some HTML5 features such as Web Notification&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; are not supported in node-webkit. Nevertheless, the Chromium team is moving these HTML5 features onto the Content layer, which is definitely good news for node-webkit.&lt;/p&gt;

&lt;p&gt;If you look at the above graph carefully, you will find there is also UI rendering in the Browser layer. Node-webkit implements UI rendering in the same way: it has native UI component APIs such as Menu, System Tray, Clipboard etc. The implementation is inspired from the cross-platform UI of Chromium.&lt;/p&gt;

&lt;p&gt;The current version of node-webkit is 0.10.0, based on Node v0.11.13 and Chromium v35.0.1916.113. Node-webkit bases its major updates on Chromium versions, hence the 10 in 0.10.0. The version change corresponding to Node or node-webkit itself is the third part of the version number, e.g. the last 0 in 0.10.0.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about node-webkit, you can listen to our &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour Episode&lt;/a&gt;. If you are tempted to develop a cross-platform desktop app, then the official &lt;a href="https://github.com/rogerwang/node-webkit/wiki"&gt;Wiki&lt;/a&gt; would definitely be a good place to start.&lt;/p&gt;

&lt;p&gt;&lt;span class="footnotes"&gt;
  Thank you again for the translation, Wendy. If anyone is interested, check out her &lt;a href="http://www.linkedin.com/in/yicunwu"&gt;linkedin&lt;/a&gt;. Wish you all the best in the job hunting.
&lt;/span&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Please refer to &lt;a href="https://github.com/rogerwang/node-webkit/wiki/Security"&gt;https://github.com/rogerwang/node-webkit/wiki/Security&lt;/a&gt; to learn more about the node-webkit security model and and how to use these two kinds of frames.&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;Notification has been implemented by &lt;a href="https://github.com/rogerwang/node-webkit/pull/1951"&gt;PR&lt;/a&gt; and it&amp;rsquo;s already included in latest release 0.10.1.&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>开始 node-webkit 前，你应该知道的</title>
    <link rel="alternate" href="/2014/07/28/node-webkit-intro.html"/>
    <id>/2014/07/28/node-webkit-intro.html</id>
    <published>2014-07-28T12:00:00+08:00</published>
    <updated>2014-07-28T12:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="node-webkit" src="/images/node-webkit-intro/nw.jpg?1406554637"&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末在 &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour&lt;/a&gt; 邀请到了 node-webkit 的作者&lt;a href="https://twitter.com/wwr"&gt;王文睿&lt;/a&gt;来做客，聊了一下 node-webkit 的故事和 HTML5 技术在应用程序开发领域的发展，很有收获。最近几年，用 Web 技术来开发应用程序的框架层出不穷，如 node-webkit, Chrome Apps, Titanium, TideSDK, Atom Shell，而 node-webkit 正是这些框架中的一个佼佼者。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;node-webkit&lt;/a&gt; 这个项目开始于 2011 年，是一个让开发者可以用 Web 技术，也就是 HTML5、CSS 和 JavaScript 来编写桌面程序的应用框架。作为开发者，我们只需要写一份代码，就能编译成跑在 Windows、Mac 和 Linux 下的应用程序。目前在 github 上，node-webkit 有将近 15000 个 Star，1600 个 Fork，可以说是由国人开发的一个非常流行的开源软件。在本期节目中，文睿介绍了目前使用 node-webkit 开发的一些典型应用，大致可以分成这么几类，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;桌面开发 IDE，比如 &lt;a href="http://www.lighttable.com/"&gt;Light Table&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;游戏，比如 &lt;a href="http://www.brandonmustdie.com/"&gt;Brandon Must Die!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;媒体类应用，比如 &lt;a href="http://popcorntime.io/"&gt;Popcorn Time&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;工具软件，比如 &lt;a href="http://pad.haroopress.com/"&gt;Haroopod&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;企业内部应用，比如数据显示应用&lt;/li&gt;
&lt;li&gt;终端应用，比如 POS 机。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出，领域非常丰富，其中也不乏一些设计精良体验优美的应用。可以说，很大程度上，这得益于目前硬件的性能提升和 Web 的发展，动画、图形、音频、视频、2D、3D、WebGL 等等，都让基于 HTML5 的应用开发充满了想象力。&lt;/p&gt;

&lt;p&gt;从本质上来说，node-webkit 只是一个 web 应用的桌面运行环境。当我们说到桌面应用的时候，我们会想到需要有呈现给用户的界面，也需要能响应用户行为，跟系统打交道...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="node-webkit" src="http://yedingding.com/images/node-webkit-intro/nw.jpg?1406554637" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上周末在 &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour&lt;/a&gt; 邀请到了 node-webkit 的作者&lt;a href="https://twitter.com/wwr"&gt;王文睿&lt;/a&gt;来做客，聊了一下 node-webkit 的故事和 HTML5 技术在应用程序开发领域的发展，很有收获。最近几年，用 Web 技术来开发应用程序的框架层出不穷，如 node-webkit, Chrome Apps, Titanium, TideSDK, Atom Shell，而 node-webkit 正是这些框架中的一个佼佼者。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;node-webkit&lt;/a&gt; 这个项目开始于 2011 年，是一个让开发者可以用 Web 技术，也就是 HTML5、CSS 和 JavaScript 来编写桌面程序的应用框架。作为开发者，我们只需要写一份代码，就能编译成跑在 Windows、Mac 和 Linux 下的应用程序。目前在 github 上，node-webkit 有将近 15000 个 Star，1600 个 Fork，可以说是由国人开发的一个非常流行的开源软件。在本期节目中，文睿介绍了目前使用 node-webkit 开发的一些典型应用，大致可以分成这么几类，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;桌面开发 IDE，比如 &lt;a href="http://www.lighttable.com/"&gt;Light Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;游戏，比如 &lt;a href="http://www.brandonmustdie.com/"&gt;Brandon Must Die!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;媒体类应用，比如 &lt;a href="http://popcorntime.io/"&gt;Popcorn Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;工具软件，比如 &lt;a href="http://pad.haroopress.com/"&gt;Haroopod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;企业内部应用，比如数据显示应用&lt;/li&gt;
&lt;li&gt;终端应用，比如 POS 机。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出，领域非常丰富，其中也不乏一些设计精良体验优美的应用。可以说，很大程度上，这得益于目前硬件的性能提升和 Web 的发展，动画、图形、音频、视频、2D、3D、WebGL 等等，都让基于 HTML5 的应用开发充满了想象力。&lt;/p&gt;

&lt;p&gt;从本质上来说，node-webkit 只是一个 web 应用的桌面运行环境。当我们说到桌面应用的时候，我们会想到需要有呈现给用户的界面，也需要能响应用户行为，跟系统打交道。那么，node-webkit 是怎么做到这点的。要了解这个，必须得先了解 node 和 webkit。&lt;/p&gt;

&lt;p&gt;Node 是一个基于 Google Chrome V8 引擎的轻量级 Javascript 运行平台。Node 采用 C++ 编写，直接在操作系统的应用层上，支持很多系统级的 API，如文件操作、网络编程等，所以可以用来编写系统级应用或者服务端应用等。&lt;/p&gt;

&lt;p&gt;Webkit 是 Web 内容的渲染引擎。举个例子，一个网页由 HTML、CSS 和 JavaScript 组成，页面加载后会被语法分析器解析成树，然后交由 Webkit 做渲染，这样才得到一个我们看到的页面。在 node-webkit 里，选择了是基于 Webkit 二次开发的 Blink 引擎，正好其 JavaScript 解析引擎也是 node 所采用的 V8 引擎。&lt;/p&gt;

&lt;p&gt;由于浏览器安全模型的缘故，Webkit 并不能访问到系统调用，而这却是桌面应用的必须。Node 本身支持系统级的 API，但是缺乏对于渲染的支持，所以文睿在 2011 就有了做 node-webkit 的想法，把两者揉合在一起，既能对接操作系统，又能提供用户交互。在做简单尝试用 webkit-gtk 和 node 来做实验后，在 2012 年开始转向 Chromium，从一开始使用的 Chromium Embeded Framework（CEF）到后面完全基于 Chromium。&lt;/p&gt;

&lt;p&gt;得益于 Node 和 Chromium 自身的蓬勃发展，node-webkit 也发展的很快，到今天已经发布到了 0.10 版本。下面来讲讲 node-webkit 的一些主要实现细节。&lt;/p&gt;

&lt;p&gt;Node 是一个事件驱动的框架，消息处理基于 libuv 实现。Webkit 的 JS 引擎也是事件驱动的，是 Chrome 自己实现的 MessagePump。所谓事件驱动，简单说就是当某个事件发生的时候，比如有用户输入进来，去执行对应的处理代码。 所以，node-webkit 统一了 node 和 webkit 中的事件处理方式，在一个消息循环中去处理 node 里和 webkit 里的不同事件。&lt;/p&gt;

&lt;p&gt;解决了事件处理统一的问题后，node 和 webkit 的揉合还需要互相能访问。node-webkit 里面存在着两个 context，node context 和 webkit context，互相访问也就是 Context 能互通，访问各自的对象。所以在 node-webkit 初始化的时候，node context 会被注入到 WebKit 里面。之后，Webkit context 就可以访问到 node context 了。&lt;/p&gt;

&lt;p&gt;同时，node-webkit 对 Webkit 的安全模型也做了一些修改。在 node-webkit 中，有两种不同的 frames，node frame 和 normal frame&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;。熟悉 Web 开发的朋友应该知道，对不同的站点发起一个 AJAX 请求会返回跨域错误，也就是 &lt;a href="http://en.wikipedia.org/wiki/Same_origin_policy"&gt;Same-origin Policy&lt;/a&gt;。node-webkit 中的 normal frame，跟浏览器中的一样，仍然有这个限制。但是在 node frame 中，将不再有这个限制，所有的 node frame 中共享同一个 security token，包括 node context
和 webkit context，跨域访问被允许，也就能访问到 node context 中的对象。所以作为应用开发者，对于不受信任的用户行为输入一定要做保护，防止因为这个造成一些破坏性行为，或者放入 normal frame 中。&lt;/p&gt;

&lt;p&gt;&lt;aside class="aside"&gt;
  &lt;img alt="Chromium Layers" src="http://yedingding.com/images/node-webkit-intro/chromium-layers.jpg?1406554637" /&gt;
  &lt;small&gt;Chromium Conceptual Application Layers&lt;/small&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;值得注意的是，尽管 Chrome 本身对于 HTML5 的支持已经比较完备了，但是有些特性是在浏览器层即上图的 Browser 实现，而 node-webkit 中 webkit 只到了 Content Layer 即上图的 WebContent，node-webkit 本身的实现等于浏览器层。所以，node-webkit 对于一些 HTML5 特性还缺乏支持，比如 Web Notification&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。不过，目前 Chromium 团队正在把这些 HTML5 特性的支持解耦移动到 Content Layer，这个对于 node-webkit 来说绝对是个非常好的消息。&lt;/p&gt;

&lt;p&gt;如果你细心的看上图的话，你会发现浏览器层还有 UI 绘制部分。node-webkit 也是一样，实现了直接绘制原生 UI 控件的 API，比如菜单、系统托盘、剪贴板等。这部分实现，的确也是主要参考了 Chromium 的跨平台 UI 实现。&lt;/p&gt;

&lt;p&gt;目前 node-webkit 的正式版是 0.10.0，基于 Node v0.11.13 和 Chromium 35.0.1916.113。node-webkit 的大版本更新策略是跟着 Chromium 的版本升级而升级，比如 0.10.0 中的 10。如果 node-webkit 本身有更新或者 node 版本有更新，对应升级的是第三个数字，也就是 0.10.0 中的最后一个 0。&lt;/p&gt;

&lt;p&gt;如果你想了解最多 node-webkit 的信息，可以听听我们这期 &lt;a href="http://teahour.fm/2014/07/22/node-webkit-with-rogerwang.html"&gt;Teahour 节目&lt;/a&gt;。如果你想开发跨平台的桌面应用，那么官方的 &lt;a href="https://github.com/rogerwang/node-webkit/wiki"&gt;Wiki&lt;/a&gt; 绝对是个很好的开始。&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;对于 node-webkit 的安全模型，具体可以参考 &lt;a href="https://github.com/rogerwang/node-webkit/wiki/Security"&gt;https://github.com/rogerwang/node-webkit/wiki/Security&lt;/a&gt;, 了解如何使用这两种不同的 Frame。&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;目前已经有 &lt;a href="https://github.com/rogerwang/node-webkit/pull/1951"&gt;PR&lt;/a&gt; 实现了 Notification，相信不久会在 node-webkit 正式版中被支持。&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Deliver Better Product (I)</title>
    <link rel="alternate" href="/2014/07/09/deliver-better-product-i.html"/>
    <id>/2014/07/09/deliver-better-product-i.html</id>
    <published>2014-07-09T12:00:00+08:00</published>
    <updated>2014-07-09T12:00:00+08:00</updated>
    <author>
      <name>叶玎玎</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Most Products Fail!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，大多数的产品都会死掉，一个黑暗的事实。就如很多人认为现在团队协作工具出来这么多，很不看好风车一样。但是就如风车诞生的初衷一样，我们希望风车能够帮助创业团队更好的成长，更快地发布更好的产品，很欣慰现在风车真的帮助到了不少产品团队，让我能更有动力去改进产品和提供更好的服务。之所以我相信风车能真正帮到用户发布更好的产品，是因为我坚信对于一个创业团队来说，采用正确的做事方式和合适的工具能大大降低失败几率。&lt;/p&gt;

&lt;p&gt;一个产品的成功，也许需要天时地利人和&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;，但是要做到不失败相对就容易的多了。我想分享一些我们做事的方式，希望能帮助到你。这里没有互联网思维，这里没有成功学，有的只是真正的工作实践心得，甚至有些也许都是很笨的，但是希望这些分享能给你带来一点点的启发，并且还能付诸于实践。&lt;/p&gt;

&lt;p&gt;&lt;aside class="“aside”"&gt;
  &lt;img alt="Scrum Roles" src="/images/deliver-better-product-i/KnibergRoles.jpg?1404985052"&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上图是对 Scrum 敏捷方法不同角色的职责的很好诠释，即使是对于不采用 Scrum 的团队来说，我们也应该这样去做产品。做正确的事情，正确的做事情，并且快速的做事情，这样一个团队，最佳情况就是总是能在正确的时间用正确的方法做正确的事，非常完美。对于这个系列的计划，我希望能涵盖产品的整个生命线。本文开篇，主要介绍如何做产品远景和形态探索，后面的文章会涉及如何做用户角色分析，如何做用户故事、如何做计划评估、如果做迭代计划、如何协作执行、如何做回顾测试、如何做用户访谈等&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Great Product starts with Vision&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正如我在&lt;a href="http://yedingding.com/2014/06/17/know-your-consumers.html"&gt;「你是否关注过消费者心理？」&lt;/a&gt; 所写，优秀的市场营销者，会先去传递产品的使命，然后才是与使命匹配的具体需求实现。对外如此，对内同样需要如此，不然团队事情会做的很茫然。为什么我们要做这个功能，为什么我们不做那个功能？为什么我们现在需要做这个，而不是那个？回忆一下，曾经你有没有问过自己这些问题，为什么会...&lt;/p&gt;</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Most Products Fail!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，大多数的产品都会死掉，一个黑暗的事实。就如很多人认为现在团队协作工具出来这么多，很不看好风车一样。但是就如风车诞生的初衷一样，我们希望风车能够帮助创业团队更好的成长，更快地发布更好的产品，很欣慰现在风车真的帮助到了不少产品团队，让我能更有动力去改进产品和提供更好的服务。之所以我相信风车能真正帮到用户发布更好的产品，是因为我坚信对于一个创业团队来说，采用正确的做事方式和合适的工具能大大降低失败几率。&lt;/p&gt;

&lt;p&gt;一个产品的成功，也许需要天时地利人和&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;，但是要做到不失败相对就容易的多了。我想分享一些我们做事的方式，希望能帮助到你。这里没有互联网思维，这里没有成功学，有的只是真正的工作实践心得，甚至有些也许都是很笨的，但是希望这些分享能给你带来一点点的启发，并且还能付诸于实践。&lt;/p&gt;

&lt;p&gt;&lt;aside class=“aside”&gt;
  &lt;img alt="Scrum Roles" src="http://yedingding.com/images/deliver-better-product-i/KnibergRoles.jpg?1404985052" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;上图是对 Scrum 敏捷方法不同角色的职责的很好诠释，即使是对于不采用 Scrum 的团队来说，我们也应该这样去做产品。做正确的事情，正确的做事情，并且快速的做事情，这样一个团队，最佳情况就是总是能在正确的时间用正确的方法做正确的事，非常完美。对于这个系列的计划，我希望能涵盖产品的整个生命线。本文开篇，主要介绍如何做产品远景和形态探索，后面的文章会涉及如何做用户角色分析，如何做用户故事、如何做计划评估、如果做迭代计划、如何协作执行、如何做回顾测试、如何做用户访谈等&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Great Product starts with Vision&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正如我在&lt;a href="http://yedingding.com/2014/06/17/know-your-consumers.html"&gt;「你是否关注过消费者心理？」&lt;/a&gt; 所写，优秀的市场营销者，会先去传递产品的使命，然后才是与使命匹配的具体需求实现。对外如此，对内同样需要如此，不然团队事情会做的很茫然。为什么我们要做这个功能，为什么我们不做那个功能？为什么我们现在需要做这个，而不是那个？回忆一下，曾经你有没有问过自己这些问题，为什么会问这些问题。究其原因，其实是产品的使命和远景缺乏透明，或者不够简单和清晰，最终导致了执行层面的混乱。用句最近流行的话来讲，『你不要用战术的勤奋来掩盖战略的懒惰』，不要去逃避寻找远景这个答案。只有有了产品远景，后面的路才能走得顺，不然相信我，出来混，迟早是要还的。&lt;/p&gt;

&lt;p&gt;&lt;aside class=“aside”&gt;
  &lt;img alt="Vision" src="http://yedingding.com/images/deliver-better-product-i/vision.jpg?1404985052" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;那么，应该如何才能定出一个好的产品远景呢？作为一个创业者，我们时常被要求用一句话来描述清楚产品，远景也应该如此。经典的 30 秒电梯游说就非常适合用来做产品远景测试，&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;For&lt;/b&gt; (target customer)&lt;br/&gt;
&lt;b&gt;Who&lt;/b&gt; (statement of the need or opportunity)&lt;br/&gt;
&lt;b&gt;The&lt;/b&gt; (product name) &lt;b&gt;is a&lt;/b&gt; (product category)&lt;br/&gt;
&lt;b&gt;That&lt;/b&gt; (key benefit, compelling reason to buy)&lt;br/&gt;
&lt;b&gt;Unlike&lt;/b&gt; (primary competitive alternative)&lt;br/&gt;
&lt;b&gt;Our product&lt;/b&gt; (statement of primary differentiation)&lt;br/&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体来说，就是产品做给谁、解决什么需求，产品是什么、核心价值是啥，跟竞争对手相比区别主要在哪。简单的 30 秒，但是这个定义过程需要做很多功课，非常耗时，但是如果能一口气讲清楚并且还能让人两眼发光，那么你就有了一个简单清晰而且还令人振奋的产品远景，也就有了一个好的开始。现在坐下来，好好思考一下，针对你的产品去填上那些括号里的内容，就像我对风车的远景定义。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;b&gt;For&lt;/b&gt; 创业团队&lt;br/&gt;
  &lt;b&gt;Who&lt;/b&gt; 想更好的成长&lt;br/&gt;
  &lt;b&gt;The&lt;/b&gt; 风车 &lt;b&gt;是一个&lt;/b&gt; 团队协作工具&lt;br/&gt;
  &lt;b&gt;That&lt;/b&gt; 以任务管理为基础，提供简洁纯净的工作空间，帮助团队节省大量时间和资源去做真正要做的事&lt;br/&gt;
  &lt;b&gt;Unlike&lt;/b&gt; Jira、Basecamp、Trello、Email 和 Excel&lt;br/&gt;
  &lt;b&gt;Our product&lt;/b&gt; 专注于任务进度掌控和高效执行，信息合理有效地组织起来，真正做到简单、轻量和高效的平衡。&lt;br/&gt;
&lt;/blockquote&gt;

&lt;p&gt;转换成中文习惯就是『风车是一款以任务管理为基础，提供简洁纯净的工作空间的团队协作工具，让创业团队能节省大量的时间和资源做真正重要的事情，更好的成长。不像 Jira、Basecamp、Trello、Email 或 Excel，风车更专注于任务的进度掌控和高效执行，信息合理有效地组织起来，真正做到简单、轻量和高效的平衡』。&lt;/p&gt;

&lt;p&gt;当有了这个远景以后，我们就应该围绕着这个远景去定义产品形态，设计出一个用户想用、用户知道怎么用并且可以做出来的产品&lt;sup id="fnref3"&gt;&lt;a href="#fn3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;。这个过程，需要整个团队一起参与和努力，更需要相互信任和尊重，以远景为中心，多从用户的角度出发和思考，慢慢聚拢收窄需求，最终的的目标是寻找到最小可行产品，用最小成本去做测试，看看我们是不是在正确的方向上。&lt;/p&gt;

&lt;p&gt;&lt;aside class=“aside”&gt;
  &lt;img alt="Discovery" src="http://yedingding.com/images/deliver-better-product-i/discovery.jpg?1404985052" /&gt;
&lt;/aside&gt;&lt;/p&gt;

&lt;p&gt;MVP 的确定，绝对不是一蹴而就，而是需要一段时间的反复探索、试错和纠正，有时甚至需要原型的辅助测试。所以，在探索的过程中，我们需要不同时刻带不同的帽子。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;学会带最终用户的帽子。忘掉自己的知识背景，去思考如果自己是最终用户，会希望是什么样子的，尽可能的抛掉主观因素。&lt;/li&gt;
&lt;li&gt;学会带用户支持的帽子。去聆听用户的声音，他遇到了什么问题，他希望看到什么结果。即使是他要一辆更快的马车&lt;sup id="fnref4"&gt;&lt;a href="#fn4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;，对于我们来说也是知道他的问题是嫌弃速度不够快。&lt;/li&gt;
&lt;li&gt;学会带产品经理的帽子。用户声音中存在着很多噪音，用户也并不清楚自己需要什么，所以我们需要从众多的用户反馈和建议中挖掘出用户的真正潜在需求并给出可行解决方案。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;产品形态的定义过程，是一个从具象到抽象，再从抽象回到具象的过程。这个过程，依赖于对问题的深刻理解，也借助于用户行为测试和数据分析。 实际项目中，总会有很纠结的时候，听上去这个客户提的意见有道理，那个客户提的也有道理，我们该如何做决策？这个时候就需要依托于我们在前面定义的远景，通过做用户角色分析，来让我们专注在最重要的事情上。这将在本系列文章（II）里面介绍。&lt;/p&gt;

&lt;p&gt;在（I）的最后，再次重申，无论你的设计团队技术团队运营团队销售团队有多强，如果一开始设计出的不是一个用户想用且会用的产品，那么最终产品还是会走向失败。所以，从现在开始透明化你的产品远景，让团队每个成员都清楚知道前进的目标，这，真的很重要。&lt;/p&gt;

&lt;p&gt;读到这里，你有什么想法吗，欢迎大家留言讨论，谢谢!&lt;/p&gt;

&lt;p&gt;PS：上个月在杭州参加了吕毅的 CSPO 课程，有理论有实践，很有收获，推荐给产品经理或者创业者。如果你想了解吕毅和他的课程介绍，可以看&lt;a href="http://www.scrumalliance.org/community/profile/ylv"&gt;这里&lt;/a&gt;，9 月份在杭州也有一次课。&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;个人认为天时地理人和对应站在风口上，进入合适的市场和有一只强大的团队，当然这得有一些运气。&amp;nbsp;&lt;a href="#fnref1" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;我得承认系列文章是很容易太监了，希望能多得到大家反馈和鼓励，希望不至于被批的太惨而心灰意冷，:)&amp;nbsp;&lt;a href="#fnref2" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Valuable - 对用户有价值，用户想用；Usable - 用户知道怎么用；Feasible - 技术可以实现的。&amp;nbsp;&lt;a href="#fnref3" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;“If I had asked people what they wanted, they would have said faster horses.” - Henry Ford, the founder of the Ford Motor Company&amp;nbsp;&lt;a href="#fnref4" rev="footnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
