---
title: "Bootstrapping Your Startup idea"
date: 2014-03-12 12:00 +08:00
tags: bootstrap, startup
disqus_identifier: 'bootstrapping-startup'
---

<aside class="aside-block">
  <blockquote>
    <p>
        本文摘自我发表在 36kr 专栏的文章 [Bootstrapping Your Startup idea - 如何低成本创业](http://www.36kr.com/p/210316.html)。
    </p>
  </blockquote>

  <small>图片 &copy; [Inc.com](http://www.inc.com/elle-kaplan/three-reasons-bootstrapping-has-been-crucial-to-my-business.html)</small>
</aside>

![Bootstrapping](bootstrapping-your-startup-idea/bootstrapping.jpg)

自从在博客上放了 Skype 账号，聊过不少有意思的人，大多都是有创业的想法，也有不错的项目想法，但是犹豫着要不要做，认为没有投资的话不太可行，不太敢启动项目。每次我都会说，只要你开始了，即使使用自有资金，只要合理的使用和合理的做事，其实并没你想的那么困难，足够能给项目开启一个很好的头和到达一定的阶段了。

我们在一开始准备自己做[风车](https://fengche.co)的时候，其实也没太多考虑，很大程度是受到我们非常喜欢的两家公司的影响，[GitHub](https://github.com) 和 [37Signals](https://37signals.com)，我们也希望能按照我们自己的想法去打磨一款用户喜欢的产品，所以没有想太多，决定先把项目做好。我们有很多的理由去寻找资本，比如降低创业风险、获取更多的资源、人才对接等等。但是这两年走过来，回想起来，感觉挺不错。我也觉得，对于技术驱动型团队，Bootstrap 是一个更合适的启动项目方式。

1. 相比非技术人员，技术团队创业的时候有一个天然的优势，可以自己来编写代码实现产品想法。即便只有一个人，也能把事情先做起来。
2. 在产品开发初期，其实成本不高，主要还是时间付出。而在产品出来的时候，你也有很多低成本的推广方式。
3. 在产品开发初期，因为是自有资金的原因，相比会更节俭，一分钱扳两份花，同时花钱会更有目的性，这样即使后面资本进来，这段经历会让我们更加懂得如何花钱。
4. 创业是一个想法不停修正的过程，而这个修正来源于跟用户的大量沟通交流，尤其是在初期，所以会让你把精力放在用户和产品本身，而不用浪费在寻找资本上。

所以，如果有心尝试，与其犹豫不决、畏头畏脚，不如勇敢的迈出去，绝对另有一番天地，:) 但是作为一个技术型团队，有下面几点需要特别注意。有些是我们犯过的错误，有些是身边的朋友犯过的错误。

READMORE

#### 足够的思考，严肃的思考

一个优秀的工程师实现功能的时候，不是一上来就敲代码，而是理清需求，做好设计，最后才是编码。一个优秀的作家，在写文章的时候，也不是直接落笔，而是确定主题，组织结构，最后才是撰写。项目也是如此。在正式启动前一定要有足够的思考，多角度的思考，各种假设论证，合理规划，最后才是执行。出来混，总是要还的。所以不要担心花了很多时间思考而没有行动，缜密的思考绝对是有益的，最怕的想到什么就直接做了，轻易开始，草草结束。

#### 专注核心价值

草根团队，没钱没资源，怎么破？尤其是当你使用自有资金的时候，做决策的事情一定要谨记，这是否是我们的产品核心价值，是否是最紧急的任务，如果不是的就放放。这也会让我们能更加有效的利用资源和更加高效的执行。同时，如果事情不涉及核心价值，尽量去拥抱云，尝试一些好的第三方服务，宁愿花一点钱来换时间。比如在[风车](https://fengche.co)里，我们使用了 [Linode](http://linode.com) 作为应用服务器，[Amazon S3](http://aws.amazon.com/cn/s3/‎) 作为文件存储，[七牛](http://qiniu.com)作为静态文件 CDN，[Pusher](http://pusher.com) 作为实时消息推送系统，[Olark](https://www.olark.com) 作为在线客服系统，[FastSpring](http://www.fastspring.com/) 作为付费订阅系统，[SendCloud](http://sendcloud.sohu.com) 和 [SES](http://aws.amazon.com/cn/ses/) 作为邮件发送服务商，而我们自己，只花时间在提高团队协作这个核心价值上。

#### 用最熟悉的技术

在技术世界里，每天都会产生非常多的名词，每天都能看到很多新鲜的东西出来，很让人兴奋。所以，我们不自觉的就想找个项目去实践一番。今天这个选型，明天那个选型，着实令人着迷。作为一个技术人，对技术的热衷是一个好事，然而，请一定要记住，你最应该去挑战的不是这些新技术，而是产品的成功。所以，请千万克制住尝试新技术的欲望，用你可能都已经觉得枯燥的最熟悉的最简单的技术栈，去快速实现，推出市场，持续改进。我们常说，"Quick and dirty"，但真要做到这点对技术人员来说还是很有难度的，尤其是像我这样的有洁癖的人。但是，创业过程中，检验你的价值已经不再只是技术架构，代码结构等技术层面的事情，所以必须得妥协，一切以产品的成功为准则。

#### 不追新不优化

”我在这个项目里使用了 XX 和 XX 技术，花了多少时间来优化，现在能同时支撑多少用户，比起之前同类网站靠谱得多，不怕用户突然爆发性增长“ 是否觉得很熟悉？这是不少技术团队很喜欢说的桥段。但是，可惜的是很多时候这些产品可能到关掉都见不到这么多用户。套用 Donald Knuth 的一句话，"[过早优化是万恶之源](http://c2.com/cgi/wiki?PrematureOptimization)"，同时适用，千万不要为了数字上的满足感浪费时间去优化。同时，也不要盲目的去更新使用的一些框架和库，除非你真正觉得带来的收益会大于时间付出。所以风车到现在都没有更新到 Ruby 2.0 和 Rails 4.0，因为这些在目前来说根本不重要

#### Ship It

<aside class="aside">
  ![ship it](bootstrapping-your-startup-idea/shipit.png)
</aside>

去年在 [RubyConf China](http://rubyconfchina.org) 上，[Zach Holman](http://zachholman.com) 介绍到 GitHub 公司里用的最多的表情符号是 ":shipit:"，发布是 GitHub 的核心文化之一。而这却是绝大多数创业者最容易犯的错误。我们每天都能给自己找很多理由说发布时机未到，比如产品不够完美需要再改进，比如怕给用户的第一印象不好，
比如如果有某些新功能会更好，比如还需要再多测试一会，尤其是当资金暂时充足时。请放弃这些想法，ship it，ship it，不要怕。我们知道它的确还不够完美，但是也知道发布并不是终点，我们仍然都会每天去改进它，越早的发布，就能越早的去检验想法，就能越早的获得用户反馈。在风车里面，我们坚持持续发布，让我们觉得一个功能或者一个修改已经准备好了后（并不是完美后），我们会选择直接发布，然后观察用户的反应。

#### When to Stop

这是一个我经常思考的问题，也可能是你在思考的问题，什么时候我该停止 Bootstrap 而去寻找资本的支持了？一般来说资本带来的是催化作用，所以最合适的时机是在成长期。当我们意识到每天有很多重要的事情要去做，但是现在因为缺少时间和资源去做这些事，同样的时间成本获得的回报在变小的话，那么就是一个很明显的信号需要寻找外部的支持了。

Bootstrap 听上去很难，但是其实并没有那么难，反而能让你更专注创业的两大核心：产品和客户。如果你的想法的确是需要资本的支持的话，对于草根团队而言，Bootstrap 阶段同时又是一个很好的自证阶段，证明你们是认真的在对待这件事和认真的做着这件事。所以，如果你有创业之心并且内心觉得自己准备好了，那就放下恐惧之心，勇敢的去做吧。
